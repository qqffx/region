ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_MspInit,"ax",%progbits
  17              		.align	1
  18              		.weak	HAL_MspInit
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	HAL_MspInit:
  25              	.LFB139:
  26              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @file    stm32h7xx_hal.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief   HAL module driver.
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This is the common part of the HAL initialization
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   @verbatim
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ==============================================================================
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                      ##### How to use this driver #####
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ==============================================================================
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     [..]
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL.
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     [..]
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     The HAL contains two APIs' categories:
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          (+) Common HAL APIs
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          (+) Services HAL APIs
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   @endverbatim
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ******************************************************************************
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @attention
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * are permitted provided that the following conditions are met:
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      this list of conditions and the following disclaimer.
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      and/or other materials provided with the distribution.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 2


  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      without specific prior written permission.
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ******************************************************************************
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #include "stm32h7xx_hal.h"
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @addtogroup STM32H7xx_HAL_Driver
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @defgroup HAL  HAL
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief HAL module driver.
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private define ------------------------------------------------------------*/
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  * @brief STM32H7xx HAL Driver version number V1.3.0
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    */
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION_MAIN   (0x01) /*!< [31:24] main version */
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION_SUB1   (0x03) /*!< [23:16] sub1 version */
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION_SUB2   (0x00) /*!< [15:8]  sub2 version */
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION_RC     (0x00) /*!< [7:0]  release candidate */
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION         ((__STM32H7xx_HAL_VERSION_MAIN << 24)\
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                                         |(__STM32H7xx_HAL_VERSION_SUB1 << 16)\
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                                         |(__STM32H7xx_HAL_VERSION_SUB2 << 8 )\
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                                         |(__STM32H7xx_HAL_VERSION_RC))
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define VREFBUF_TIMEOUT_VALUE     (uint32_t)10   /* 10 ms  */
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private macro -------------------------------------------------------------*/
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private variables ---------------------------------------------------------*/
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** static __IO uint32_t uwTick;
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** static uint32_t uwTickPrio   = (1UL << __NVIC_PRIO_BITS); /* Invalid PRIO */
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** static HAL_TickFreqTypeDef uwTickFreq = HAL_TICK_FREQ_DEFAULT;  /* 1KHz */
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private functions ---------------------------------------------------------*/
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @defgroup HAL_Private_Functions  HAL Private Functions
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 3


  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @defgroup HAL_Group1 Initialization and de-initialization Functions
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  *  @brief    Initialization and de-initialization functions
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  *
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** @verbatim
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  ===============================================================================
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****               ##### Initialization and de-initialization functions #####
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  ===============================================================================
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     [..]  This section provides functions allowing to:
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Initializes the Flash interface the NVIC allocation and initial clock
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****           configuration. It initializes the systick also when timeout is needed
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****           and the backup domain when enabled.
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) De-Initializes common part of the HAL.
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****           Tick interrupt priority.
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         (++) SysTick timer is used by default as source of time base, but user
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              can eventually implement his proper time base source (a general purpose
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              timer for example or other time source), keeping in mind that Time base
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              handled in milliseconds basis.
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig().
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             ISR process will be blocked.
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****        (++) functions affecting time base configurations are declared as __weak
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** @endverbatim
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  This function is used to initialize the HAL Library; it must be the first
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         instruction to be executed in the main program (before to call any other
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         HAL function), it performs the following:
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           Configures the SysTick to generate an interrupt each 1 millisecond,
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           which is clocked by the HSI (at this stage, the clock is not yet
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           configured and thus the system is running from the internal HSI at 16 MHz).
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           Set NVIC Group Priority to 4.
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           Calls the HAL_MspInit() callback function defined in user file
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           "stm32h7xx_hal_msp.c" to do the global low level hardware initialization
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   SysTick is used as time base for the HAL_Delay() function, the application
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         need to ensure that the SysTick time base is always set to 1 millisecond
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         to have correct HAL operation.
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL status
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Set Interrupt Group Priority */
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 4


 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     return HAL_ERROR;
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Init the low level hardware */
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   HAL_MspInit();
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Return function status */
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return HAL_OK;
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  This function de-Initializes common part of the HAL and stops the systick.
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         This function is optional.
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL status
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Reset of all peripherals */
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB3_FORCE_RESET();
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB1_FORCE_RESET();
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB2_FORCE_RESET();
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB4_FORCE_RESET();
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  __HAL_RCC_AHB4_RELEASE_RESET();
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB3_FORCE_RESET();
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB3_RELEASE_RESET();
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1L_FORCE_RESET();
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1L_RELEASE_RESET();
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1H_FORCE_RESET();
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1H_RELEASE_RESET();
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    __HAL_RCC_APB2_FORCE_RESET();
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    __HAL_RCC_APB2_RELEASE_RESET();
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB4_FORCE_RESET();
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB4_RELEASE_RESET();
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* De-Init the low level hardware */
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   HAL_MspDeInit();
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Return function status */
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return HAL_OK;
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Initializes the MSP.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 5


 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_MspInit(void)
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
  27              		.loc 1 207 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    */
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
  32              		.loc 1 211 0
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE139:
  37              		.section	.text.HAL_MspDeInit,"ax",%progbits
  38              		.align	1
  39              		.weak	HAL_MspDeInit
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv5-d16
  45              	HAL_MspDeInit:
  46              	.LFB140:
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  DeInitializes the MSP.
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_MspDeInit(void)
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
  47              		.loc 1 218 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    */
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
  52              		.loc 1 222 0
  53 0000 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE140:
  57              		.section	.text.HAL_DeInit,"ax",%progbits
  58              		.align	1
  59              		.global	HAL_DeInit
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-d16
  65              	HAL_DeInit:
  66              	.LFB138:
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Reset of all peripherals */
  67              		.loc 1 166 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 6


  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 10B5     		push	{r4, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
  76              		.loc 1 168 0
  77 0002 154B     		ldr	r3, .L5
  78 0004 4FF0FF32 		mov	r2, #-1
  79 0008 DA67     		str	r2, [r3, #124]
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  80              		.loc 1 169 0
  81 000a 0024     		movs	r4, #0
  82 000c DC67     		str	r4, [r3, #124]
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
  83              		.loc 1 171 0
  84 000e C3F88020 		str	r2, [r3, #128]
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  85              		.loc 1 172 0
  86 0012 C3F88040 		str	r4, [r3, #128]
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
  87              		.loc 1 174 0
  88 0016 C3F88420 		str	r2, [r3, #132]
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  89              		.loc 1 175 0
  90 001a C3F88440 		str	r4, [r3, #132]
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  __HAL_RCC_AHB4_RELEASE_RESET();
  91              		.loc 1 177 0
  92 001e C3F88820 		str	r2, [r3, #136]
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  93              		.loc 1 178 0
  94 0022 C3F88840 		str	r4, [r3, #136]
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB3_RELEASE_RESET();
  95              		.loc 1 180 0
  96 0026 C3F88C20 		str	r2, [r3, #140]
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  97              		.loc 1 181 0
  98 002a C3F88C40 		str	r4, [r3, #140]
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1L_RELEASE_RESET();
  99              		.loc 1 183 0
 100 002e C3F89020 		str	r2, [r3, #144]
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 101              		.loc 1 184 0
 102 0032 C3F89040 		str	r4, [r3, #144]
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1H_RELEASE_RESET();
 103              		.loc 1 186 0
 104 0036 C3F89420 		str	r2, [r3, #148]
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 105              		.loc 1 187 0
 106 003a C3F89440 		str	r4, [r3, #148]
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    __HAL_RCC_APB2_RELEASE_RESET();
 107              		.loc 1 189 0
 108 003e C3F89820 		str	r2, [r3, #152]
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 7


 109              		.loc 1 190 0
 110 0042 C3F89840 		str	r4, [r3, #152]
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB4_RELEASE_RESET();
 111              		.loc 1 192 0
 112 0046 C3F89C20 		str	r2, [r3, #156]
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 113              		.loc 1 193 0
 114 004a C3F89C40 		str	r4, [r3, #156]
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 115              		.loc 1 196 0
 116 004e FFF7FEFF 		bl	HAL_MspDeInit
 117              	.LVL0:
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 118              		.loc 1 200 0
 119 0052 2046     		mov	r0, r4
 120 0054 10BD     		pop	{r4, pc}
 121              	.L6:
 122 0056 00BF     		.align	2
 123              	.L5:
 124 0058 00440258 		.word	1476543488
 125              		.cfi_endproc
 126              	.LFE138:
 128              		.section	.text.HAL_InitTick,"ax",%progbits
 129              		.align	1
 130              		.weak	HAL_InitTick
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu fpv5-d16
 136              	HAL_InitTick:
 137              	.LFB141:
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief This function configures the source of the time base.
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *        Tick interrupt priority.
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig().
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base.
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       It is used to generate interrupts at regular time intervals.
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process,
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower)
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       The function is declared as __weak  to be overwritten  in case of other
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementation  in user file.
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param TickPriority: Tick interrupt priority.
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL status
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 138              		.loc 1 241 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              	.LVL1:
 143 0000 10B5     		push	{r4, lr}
 144              	.LCFI1:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 8


 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 4, -8
 147              		.cfi_offset 14, -4
 148 0002 0446     		mov	r4, r0
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Configure the SysTick to have interrupt in 1ms time basis*/
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 149              		.loc 1 243 0
 150 0004 0E4B     		ldr	r3, .L13
 151 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 152              	.LVL2:
 153 0008 4FF47A73 		mov	r3, #1000
 154 000c B3FBF0F3 		udiv	r3, r3, r0
 155 0010 0C4A     		ldr	r2, .L13+4
 156 0012 1068     		ldr	r0, [r2]
 157 0014 B0FBF3F0 		udiv	r0, r0, r3
 158 0018 FFF7FEFF 		bl	HAL_SYSTICK_Config
 159              	.LVL3:
 160 001c 68B9     		cbnz	r0, .L9
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     return HAL_ERROR;
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Configure the SysTick IRQ priority */
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 161              		.loc 1 249 0
 162 001e 0F2C     		cmp	r4, #15
 163 0020 01D9     		bls	.L12
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     uwTickPrio = TickPriority;
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   else
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     return HAL_ERROR;
 164              		.loc 1 256 0
 165 0022 0120     		movs	r0, #1
 166 0024 0AE0     		b	.L8
 167              	.L12:
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     uwTickPrio = TickPriority;
 168              		.loc 1 251 0
 169 0026 0022     		movs	r2, #0
 170 0028 2146     		mov	r1, r4
 171 002a 4FF0FF30 		mov	r0, #-1
 172 002e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 173              	.LVL4:
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 174              		.loc 1 252 0
 175 0032 054B     		ldr	r3, .L13+8
 176 0034 1C60     		str	r4, [r3]
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Return function status */
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return HAL_OK;
 177              		.loc 1 260 0
 178 0036 0020     		movs	r0, #0
 179 0038 00E0     		b	.L8
 180              	.L9:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 9


 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 181              		.loc 1 245 0
 182 003a 0120     		movs	r0, #1
 183              	.L8:
 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 184              		.loc 1 261 0
 185 003c 10BD     		pop	{r4, pc}
 186              	.LVL5:
 187              	.L14:
 188 003e 00BF     		.align	2
 189              	.L13:
 190 0040 00000000 		.word	.LANCHOR0
 191 0044 00000000 		.word	SystemCoreClock
 192 0048 00000000 		.word	.LANCHOR1
 193              		.cfi_endproc
 194              	.LFE141:
 196              		.section	.text.HAL_Init,"ax",%progbits
 197              		.align	1
 198              		.global	HAL_Init
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv5-d16
 204              	HAL_Init:
 205              	.LFB137:
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Set Interrupt Group Priority */
 206              		.loc 1 143 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 10B5     		push	{r4, lr}
 211              	.LCFI2:
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 4, -8
 214              		.cfi_offset 14, -4
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 215              		.loc 1 145 0
 216 0002 0320     		movs	r0, #3
 217 0004 FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 218              	.LVL6:
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 219              		.loc 1 148 0
 220 0008 0020     		movs	r0, #0
 221 000a FFF7FEFF 		bl	HAL_InitTick
 222              	.LVL7:
 223 000e 10B1     		cbz	r0, .L19
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 224              		.loc 1 150 0
 225 0010 0124     		movs	r4, #1
 226              	.L16:
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 227              		.loc 1 158 0
 228 0012 2046     		mov	r0, r4
 229 0014 10BD     		pop	{r4, pc}
 230              	.L19:
 231 0016 0446     		mov	r4, r0
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 10


 232              		.loc 1 154 0
 233 0018 FFF7FEFF 		bl	HAL_MspInit
 234              	.LVL8:
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 235              		.loc 1 157 0
 236 001c F9E7     		b	.L16
 237              		.cfi_endproc
 238              	.LFE137:
 240              		.section	.text.HAL_IncTick,"ax",%progbits
 241              		.align	1
 242              		.weak	HAL_IncTick
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 246              		.fpu fpv5-d16
 248              	HAL_IncTick:
 249              	.LFB142:
 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @}
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @defgroup HAL_Group2 HAL Control functions
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  *  @brief    HAL Control functions
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  *
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** @verbatim
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  ===============================================================================
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                       ##### HAL Control functions #####
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  ===============================================================================
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     [..]  This section provides functions allowing to:
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Provide a tick value in millisecond
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Provide a blocking delay in millisecond
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Suspend the time base source interrupt
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Resume the time base source interrupt
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Get the HAL API driver version
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Get the device identifier
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Get the device revision identifier
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Enable/Disable Debug module during SLEEP mode
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** @endverbatim
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *        used as application time base.
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       in Systick ISR.
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  * @note This function is declared as __weak to be overwritten in case of other
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      implementations in user file.
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_IncTick(void)
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 250              		.loc 1 300 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 11


 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		@ link register save eliminated.
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   uwTick += (uint32_t)uwTickFreq;
 255              		.loc 1 301 0
 256 0000 034B     		ldr	r3, .L21
 257 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 258 0004 034A     		ldr	r2, .L21+4
 259 0006 1168     		ldr	r1, [r2]
 260 0008 0B44     		add	r3, r3, r1
 261 000a 1360     		str	r3, [r2]
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 262              		.loc 1 302 0
 263 000c 7047     		bx	lr
 264              	.L22:
 265 000e 00BF     		.align	2
 266              	.L21:
 267 0010 00000000 		.word	.LANCHOR0
 268 0014 00000000 		.word	.LANCHOR2
 269              		.cfi_endproc
 270              	.LFE142:
 272              		.section	.text.HAL_GetTick,"ax",%progbits
 273              		.align	1
 274              		.weak	HAL_GetTick
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv5-d16
 280              	HAL_GetTick:
 281              	.LFB143:
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Provides a tick value in millisecond.
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementations in user file.
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval tick value
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 282              		.loc 1 311 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return uwTick;
 287              		.loc 1 312 0
 288 0000 014B     		ldr	r3, .L24
 289 0002 1868     		ldr	r0, [r3]
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 290              		.loc 1 313 0
 291 0004 7047     		bx	lr
 292              	.L25:
 293 0006 00BF     		.align	2
 294              	.L24:
 295 0008 00000000 		.word	.LANCHOR2
 296              		.cfi_endproc
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 12


 297              	.LFE143:
 299              		.section	.text.HAL_GetTickPrio,"ax",%progbits
 300              		.align	1
 301              		.global	HAL_GetTickPrio
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv5-d16
 307              	HAL_GetTickPrio:
 308              	.LFB144:
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief This function returns a tick priority.
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval tick priority
 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetTickPrio(void)
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 309              		.loc 1 320 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return uwTickPrio;
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 314              		.loc 1 322 0
 315 0000 014B     		ldr	r3, .L27
 316 0002 1868     		ldr	r0, [r3]
 317 0004 7047     		bx	lr
 318              	.L28:
 319 0006 00BF     		.align	2
 320              	.L27:
 321 0008 00000000 		.word	.LANCHOR1
 322              		.cfi_endproc
 323              	.LFE144:
 325              		.section	.text.HAL_SetTickFreq,"ax",%progbits
 326              		.align	1
 327              		.global	HAL_SetTickFreq
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv5-d16
 333              	HAL_SetTickFreq:
 334              	.LFB145:
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Set new tick Freq.
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval Status
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 335              		.loc 1 329 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              	.LVL9:
 340 0000 08B5     		push	{r3, lr}
 341              	.LCFI3:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 13


 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 3, -8
 344              		.cfi_offset 14, -4
 345              	.LVL10:
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   HAL_StatusTypeDef status  = HAL_OK;
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_TICKFREQ(Freq));
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if (uwTickFreq != Freq)
 346              		.loc 1 333 0
 347 0002 064B     		ldr	r3, .L33
 348 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0006 8342     		cmp	r3, r0
 350 0008 06D0     		beq	.L31
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     uwTickFreq = Freq;
 351              		.loc 1 335 0
 352 000a 044B     		ldr	r3, .L33
 353 000c 1870     		strb	r0, [r3]
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     /* Apply the new tick Freq  */
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     status = HAL_InitTick(uwTickPrio);
 354              		.loc 1 338 0
 355 000e 044B     		ldr	r3, .L33+4
 356 0010 1868     		ldr	r0, [r3]
 357              	.LVL11:
 358 0012 FFF7FEFF 		bl	HAL_InitTick
 359              	.LVL12:
 360              	.L30:
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return status;
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 361              		.loc 1 342 0
 362 0016 08BD     		pop	{r3, pc}
 363              	.LVL13:
 364              	.L31:
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_TICKFREQ(Freq));
 365              		.loc 1 330 0
 366 0018 0020     		movs	r0, #0
 367              	.LVL14:
 368 001a FCE7     		b	.L30
 369              	.L34:
 370              		.align	2
 371              	.L33:
 372 001c 00000000 		.word	.LANCHOR0
 373 0020 00000000 		.word	.LANCHOR1
 374              		.cfi_endproc
 375              	.LFE145:
 377              		.section	.text.HAL_GetTickFreq,"ax",%progbits
 378              		.align	1
 379              		.global	HAL_GetTickFreq
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 383              		.fpu fpv5-d16
 385              	HAL_GetTickFreq:
 386              	.LFB146:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 14


 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Return tick frequency.
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval tick period in Hz
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_TickFreqTypeDef HAL_GetTickFreq(void)
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 387              		.loc 1 349 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return uwTickFreq;
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 392              		.loc 1 351 0
 393 0000 014B     		ldr	r3, .L36
 394 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 395 0004 7047     		bx	lr
 396              	.L37:
 397 0006 00BF     		.align	2
 398              	.L36:
 399 0008 00000000 		.word	.LANCHOR0
 400              		.cfi_endproc
 401              	.LFE146:
 403              		.section	.text.HAL_Delay,"ax",%progbits
 404              		.align	1
 405              		.weak	HAL_Delay
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu fpv5-d16
 411              	HAL_Delay:
 412              	.LFB147:
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief This function provides minimum delay (in milliseconds) based
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *        on variable incremented.
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is incremented.
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementations in user file.
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param Delay  specifies the delay time length, in milliseconds.
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_Delay(uint32_t Delay)
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 413              		.loc 1 365 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              	.LVL15:
 418 0000 38B5     		push	{r3, r4, r5, lr}
 419              	.LCFI4:
 420              		.cfi_def_cfa_offset 16
 421              		.cfi_offset 3, -16
 422              		.cfi_offset 4, -12
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 15


 423              		.cfi_offset 5, -8
 424              		.cfi_offset 14, -4
 425 0002 0446     		mov	r4, r0
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   uint32_t tickstart = HAL_GetTick();
 426              		.loc 1 366 0
 427 0004 FFF7FEFF 		bl	HAL_GetTick
 428              	.LVL16:
 429 0008 0546     		mov	r5, r0
 430              	.LVL17:
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   uint32_t wait = Delay;
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Add a freq to guarantee minimum wait */
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if (wait < HAL_MAX_DELAY)
 431              		.loc 1 370 0
 432 000a B4F1FF3F 		cmp	r4, #-1
 433 000e 02D0     		beq	.L40
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     wait += (uint32_t)(uwTickFreq);
 434              		.loc 1 372 0
 435 0010 044B     		ldr	r3, .L42
 436 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 437 0014 1C44     		add	r4, r4, r3
 438              	.LVL18:
 439              	.L40:
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   while ((HAL_GetTick() - tickstart) < wait)
 440              		.loc 1 375 0 discriminator 1
 441 0016 FFF7FEFF 		bl	HAL_GetTick
 442              	.LVL19:
 443 001a 401B     		subs	r0, r0, r5
 444 001c A042     		cmp	r0, r4
 445 001e FAD3     		bcc	.L40
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 446              		.loc 1 378 0
 447 0020 38BD     		pop	{r3, r4, r5, pc}
 448              	.LVL20:
 449              	.L43:
 450 0022 00BF     		.align	2
 451              	.L42:
 452 0024 00000000 		.word	.LANCHOR0
 453              		.cfi_endproc
 454              	.LFE147:
 456              		.section	.text.HAL_SuspendTick,"ax",%progbits
 457              		.align	1
 458              		.weak	HAL_SuspendTick
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv5-d16
 464              	HAL_SuspendTick:
 465              	.LFB148:
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Suspend Tick increment.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 16


 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is called, the the SysTick interrupt will be disabled and so Tick increment
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is suspended.
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementations in user file.
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_SuspendTick(void)
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 466              		.loc 1 391 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              		@ link register save eliminated.
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Disable SysTick Interrupt */
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 471              		.loc 1 393 0
 472 0000 024A     		ldr	r2, .L45
 473 0002 1368     		ldr	r3, [r2]
 474 0004 23F00203 		bic	r3, r3, #2
 475 0008 1360     		str	r3, [r2]
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 476              		.loc 1 394 0
 477 000a 7047     		bx	lr
 478              	.L46:
 479              		.align	2
 480              	.L45:
 481 000c 10E000E0 		.word	-536813552
 482              		.cfi_endproc
 483              	.LFE148:
 485              		.section	.text.HAL_ResumeTick,"ax",%progbits
 486              		.align	1
 487              		.weak	HAL_ResumeTick
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 491              		.fpu fpv5-d16
 493              	HAL_ResumeTick:
 494              	.LFB149:
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Resume Tick increment.
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is called, the the SysTick interrupt will be enabled and so Tick increment
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is resumed.
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementations in user file.
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_ResumeTick(void)
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 495              		.loc 1 407 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 17


 499              		@ link register save eliminated.
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Enable SysTick Interrupt */
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 500              		.loc 1 409 0
 501 0000 024A     		ldr	r2, .L48
 502 0002 1368     		ldr	r3, [r2]
 503 0004 43F00203 		orr	r3, r3, #2
 504 0008 1360     		str	r3, [r2]
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 505              		.loc 1 410 0
 506 000a 7047     		bx	lr
 507              	.L49:
 508              		.align	2
 509              	.L48:
 510 000c 10E000E0 		.word	-536813552
 511              		.cfi_endproc
 512              	.LFE149:
 514              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 515              		.align	1
 516              		.global	HAL_GetHalVersion
 517              		.syntax unified
 518              		.thumb
 519              		.thumb_func
 520              		.fpu fpv5-d16
 522              	HAL_GetHalVersion:
 523              	.LFB150:
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Returns the HAL revision
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 524              		.loc 1 417 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  return __STM32H7xx_HAL_VERSION;
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 529              		.loc 1 419 0
 530 0000 0048     		ldr	r0, .L51
 531 0002 7047     		bx	lr
 532              	.L52:
 533              		.align	2
 534              	.L51:
 535 0004 00000301 		.word	16973824
 536              		.cfi_endproc
 537              	.LFE150:
 539              		.section	.text.HAL_GetREVID,"ax",%progbits
 540              		.align	1
 541              		.global	HAL_GetREVID
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 545              		.fpu fpv5-d16
 547              	HAL_GetREVID:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 18


 548              	.LFB151:
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Returns the device revision identifier.
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval Device revision identifier
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetREVID(void)
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 549              		.loc 1 426 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553              		@ link register save eliminated.
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    return((DBGMCU->IDCODE) >> 16);
 554              		.loc 1 427 0
 555 0000 014B     		ldr	r3, .L54
 556 0002 1868     		ldr	r0, [r3]
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 557              		.loc 1 428 0
 558 0004 000C     		lsrs	r0, r0, #16
 559 0006 7047     		bx	lr
 560              	.L55:
 561              		.align	2
 562              	.L54:
 563 0008 0010005C 		.word	1543507968
 564              		.cfi_endproc
 565              	.LFE151:
 567              		.section	.text.HAL_GetDEVID,"ax",%progbits
 568              		.align	1
 569              		.global	HAL_GetDEVID
 570              		.syntax unified
 571              		.thumb
 572              		.thumb_func
 573              		.fpu fpv5-d16
 575              	HAL_GetDEVID:
 576              	.LFB152:
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Returns the device identifier.
 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval Device identifier
 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetDEVID(void)
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 577              		.loc 1 435 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 582              		.loc 1 436 0
 583 0000 024B     		ldr	r3, .L57
 584 0002 1868     		ldr	r0, [r3]
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 585              		.loc 1 437 0
 586 0004 C0F30B00 		ubfx	r0, r0, #0, #12
 587 0008 7047     		bx	lr
 588              	.L58:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 19


 589 000a 00BF     		.align	2
 590              	.L57:
 591 000c 0010005C 		.word	1543507968
 592              		.cfi_endproc
 593              	.LFE152:
 595              		.section	.text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig,"ax",%progbits
 596              		.align	1
 597              		.global	HAL_SYSCFG_VREFBUF_VoltageScalingConfig
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv5-d16
 603              	HAL_SYSCFG_VREFBUF_VoltageScalingConfig:
 604              	.LFB153:
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Configure the internal voltage reference buffer voltage scale.
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param VoltageScaling  specifies the output voltage to achieve
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one of the following values:
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE0: VREF_OUT1 around 2.048 V. 
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *                                                This requires VDDA equal to or higher than 2.4 V
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V. 
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *                                                This requires VDDA equal to or higher than 2.8 V
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREF_OUT3 around 1.5 V. 
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *                                                This requires VDDA equal to or higher than 1.8 V
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.8 V. 
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *                                                This requires VDDA equal to or higher than 2.1 V
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 605              		.loc 1 454 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              		@ link register save eliminated.
 610              	.LVL21:
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 611              		.loc 1 458 0
 612 0000 034A     		ldr	r2, .L60
 613 0002 1368     		ldr	r3, [r2]
 614 0004 23F07003 		bic	r3, r3, #112
 615 0008 1843     		orrs	r0, r0, r3
 616              	.LVL22:
 617 000a 1060     		str	r0, [r2]
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 618              		.loc 1 459 0
 619 000c 7047     		bx	lr
 620              	.L61:
 621 000e 00BF     		.align	2
 622              	.L60:
 623 0010 003C0058 		.word	1476410368
 624              		.cfi_endproc
 625              	.LFE153:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 20


 627              		.section	.text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig,"ax",%progbits
 628              		.align	1
 629              		.global	HAL_SYSCFG_VREFBUF_HighImpedanceConfig
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu fpv5-d16
 635              	HAL_SYSCFG_VREFBUF_HighImpedanceConfig:
 636              	.LFB154:
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Configure the internal voltage reference buffer high impedance mode.
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param Mode  specifies the high impedance mode
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one of the following values:
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFI
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 637              		.loc 1 470 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL23:
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 643              		.loc 1 474 0
 644 0000 034A     		ldr	r2, .L63
 645 0002 1368     		ldr	r3, [r2]
 646 0004 23F00203 		bic	r3, r3, #2
 647 0008 1843     		orrs	r0, r0, r3
 648              	.LVL24:
 649 000a 1060     		str	r0, [r2]
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 650              		.loc 1 475 0
 651 000c 7047     		bx	lr
 652              	.L64:
 653 000e 00BF     		.align	2
 654              	.L63:
 655 0010 003C0058 		.word	1476410368
 656              		.cfi_endproc
 657              	.LFE154:
 659              		.section	.text.HAL_SYSCFG_VREFBUF_TrimmingConfig,"ax",%progbits
 660              		.align	1
 661              		.global	HAL_SYSCFG_VREFBUF_TrimmingConfig
 662              		.syntax unified
 663              		.thumb
 664              		.thumb_func
 665              		.fpu fpv5-d16
 667              	HAL_SYSCFG_VREFBUF_TrimmingConfig:
 668              	.LFB155:
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 21


 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 669              		.loc 1 482 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674              	.LVL25:
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 675              		.loc 1 486 0
 676 0000 034A     		ldr	r2, .L66
 677 0002 5368     		ldr	r3, [r2, #4]
 678 0004 23F03F03 		bic	r3, r3, #63
 679 0008 1843     		orrs	r0, r0, r3
 680              	.LVL26:
 681 000a 5060     		str	r0, [r2, #4]
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 682              		.loc 1 487 0
 683 000c 7047     		bx	lr
 684              	.L67:
 685 000e 00BF     		.align	2
 686              	.L66:
 687 0010 003C0058 		.word	1476410368
 688              		.cfi_endproc
 689              	.LFE155:
 691              		.section	.text.HAL_SYSCFG_EnableVREFBUF,"ax",%progbits
 692              		.align	1
 693              		.global	HAL_SYSCFG_EnableVREFBUF
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu fpv5-d16
 699              	HAL_SYSCFG_EnableVREFBUF:
 700              	.LFB156:
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL_OK/HAL_TIMEOUT
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 701              		.loc 1 494 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705 0000 10B5     		push	{r4, lr}
 706              	.LCFI5:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 4, -8
 709              		.cfi_offset 14, -4
 710              	.LVL27:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 22


 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   uint32_t  tickstart = 0;
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 711              		.loc 1 497 0
 712 0002 0B4A     		ldr	r2, .L75
 713 0004 1368     		ldr	r3, [r2]
 714 0006 43F00103 		orr	r3, r3, #1
 715 000a 1360     		str	r3, [r2]
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Get Start Tick*/
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   tickstart = HAL_GetTick();
 716              		.loc 1 500 0
 717 000c FFF7FEFF 		bl	HAL_GetTick
 718              	.LVL28:
 719 0010 0446     		mov	r4, r0
 720              	.LVL29:
 721              	.L69:
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Wait for VRR bit  */
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
 722              		.loc 1 503 0
 723 0012 074B     		ldr	r3, .L75
 724 0014 1B68     		ldr	r3, [r3]
 725 0016 13F0080F 		tst	r3, #8
 726 001a 06D1     		bne	.L74
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 727              		.loc 1 505 0
 728 001c FFF7FEFF 		bl	HAL_GetTick
 729              	.LVL30:
 730 0020 001B     		subs	r0, r0, r4
 731 0022 0A28     		cmp	r0, #10
 732 0024 F5D9     		bls	.L69
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     {
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       return HAL_TIMEOUT;
 733              		.loc 1 507 0
 734 0026 0320     		movs	r0, #3
 735 0028 00E0     		b	.L70
 736              	.L74:
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     }
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return HAL_OK;
 737              		.loc 1 511 0
 738 002a 0020     		movs	r0, #0
 739              	.L70:
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 740              		.loc 1 512 0
 741 002c 10BD     		pop	{r4, pc}
 742              	.LVL31:
 743              	.L76:
 744 002e 00BF     		.align	2
 745              	.L75:
 746 0030 003C0058 		.word	1476410368
 747              		.cfi_endproc
 748              	.LFE156:
 750              		.section	.text.HAL_SYSCFG_DisableVREFBUF,"ax",%progbits
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 23


 751              		.align	1
 752              		.global	HAL_SYSCFG_DisableVREFBUF
 753              		.syntax unified
 754              		.thumb
 755              		.thumb_func
 756              		.fpu fpv5-d16
 758              	HAL_SYSCFG_DisableVREFBUF:
 759              	.LFB157:
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_DisableVREFBUF(void)
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 760              		.loc 1 520 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 0, uses_anonymous_args = 0
 764              		@ link register save eliminated.
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 765              		.loc 1 521 0
 766 0000 024A     		ldr	r2, .L78
 767 0002 1368     		ldr	r3, [r2]
 768 0004 23F00103 		bic	r3, r3, #1
 769 0008 1360     		str	r3, [r2]
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 770              		.loc 1 522 0
 771 000a 7047     		bx	lr
 772              	.L79:
 773              		.align	2
 774              	.L78:
 775 000c 003C0058 		.word	1476410368
 776              		.cfi_endproc
 777              	.LFE157:
 779              		.section	.text.HAL_SYSCFG_ETHInterfaceSelect,"ax",%progbits
 780              		.align	1
 781              		.global	HAL_SYSCFG_ETHInterfaceSelect
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 785              		.fpu fpv5-d16
 787              	HAL_SYSCFG_ETHInterfaceSelect:
 788              	.LFB158:
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Ethernet PHY Interface Selection either MII or RMII
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_ETHInterface: Selects the Ethernet PHY interface
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one of the following values:
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 789              		.loc 1 533 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 24


 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794              	.LVL32:
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(SYSCFG->PMCR, SYCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));  
 795              		.loc 1 537 0
 796 0000 034A     		ldr	r2, .L81
 797 0002 5368     		ldr	r3, [r2, #4]
 798 0004 23F46003 		bic	r3, r3, #14680064
 799 0008 1843     		orrs	r0, r0, r3
 800              	.LVL33:
 801 000a 5060     		str	r0, [r2, #4]
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 802              		.loc 1 538 0
 803 000c 7047     		bx	lr
 804              	.L82:
 805 000e 00BF     		.align	2
 806              	.L81:
 807 0010 00040058 		.word	1476396032
 808              		.cfi_endproc
 809              	.LFE158:
 811              		.section	.text.HAL_SYSCFG_AnalogSwitchConfig,"ax",%progbits
 812              		.align	1
 813              		.global	HAL_SYSCFG_AnalogSwitchConfig
 814              		.syntax unified
 815              		.thumb
 816              		.thumb_func
 817              		.fpu fpv5-d16
 819              	HAL_SYSCFG_AnalogSwitchConfig:
 820              	.LFB159:
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Analog Switch control for dual analog pads.
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_AnalogSwitch: Selects the analog pad
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one or a combination of the following values:
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA0 : Select PA0 analog switch
 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA1:  Select PA1 analog switch
 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC2 : Select PC2 analog switch
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC3:  Select PC3 analog switch
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_SwitchState: Open or Close the analog switch between dual pads (PXn and PXn_C)
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one or a combination of the following values:
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA0_OPEN  
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA0_CLOSE 
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA1_OPEN  
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA1_CLOSE 
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC2_OPEN  
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC2_CLOSE 
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC3_OPEN 
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC3_CLOSE 
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 25


 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 821              		.loc 1 563 0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 0
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 825              		@ link register save eliminated.
 826              	.LVL34:
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));  
 827              		.loc 1 568 0
 828 0000 034A     		ldr	r2, .L84
 829 0002 5368     		ldr	r3, [r2, #4]
 830 0004 23EA0000 		bic	r0, r3, r0
 831              	.LVL35:
 832 0008 0843     		orrs	r0, r0, r1
 833 000a 5060     		str	r0, [r2, #4]
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 834              		.loc 1 569 0
 835 000c 7047     		bx	lr
 836              	.L85:
 837 000e 00BF     		.align	2
 838              	.L84:
 839 0010 00040058 		.word	1476396032
 840              		.cfi_endproc
 841              	.LFE159:
 843              		.section	.text.HAL_SYSCFG_EnableBOOST,"ax",%progbits
 844              		.align	1
 845              		.global	HAL_SYSCFG_EnableBOOST
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
 849              		.fpu fpv5-d16
 851              	HAL_SYSCFG_EnableBOOST:
 852              	.LFB160:
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enables the booster to reduce the total harmonic distortion of the analog
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         switch when the supply voltage is lower than 2.7 V.
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   Activating the booster allows to guaranty the analog switch AC performance
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         when the supply voltage is below 2.7 V: in this case, the analog switch
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         performance is the same on the full voltage range
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_EnableBOOST(void)
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 853              		.loc 1 581 0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 0
 856              		@ frame_needed = 0, uses_anonymous_args = 0
 857              		@ link register save eliminated.
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 858              		.loc 1 582 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 26


 859 0000 024A     		ldr	r2, .L87
 860 0002 5368     		ldr	r3, [r2, #4]
 861 0004 43F48073 		orr	r3, r3, #256
 862 0008 5360     		str	r3, [r2, #4]
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 863              		.loc 1 583 0
 864 000a 7047     		bx	lr
 865              	.L88:
 866              		.align	2
 867              	.L87:
 868 000c 00040058 		.word	1476396032
 869              		.cfi_endproc
 870              	.LFE160:
 872              		.section	.text.HAL_SYSCFG_DisableBOOST,"ax",%progbits
 873              		.align	1
 874              		.global	HAL_SYSCFG_DisableBOOST
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 878              		.fpu fpv5-d16
 880              	HAL_SYSCFG_DisableBOOST:
 881              	.LFB161:
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disables the booster
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   Activating the booster allows to guaranty the analog switch AC performance
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         when the supply voltage is below 2.7 V: in this case, the analog switch
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         performance is the same on the full voltage range
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_DisableBOOST(void)
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 882              		.loc 1 593 0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 0
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 886              		@ link register save eliminated.
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 887              		.loc 1 594 0
 888 0000 024A     		ldr	r2, .L90
 889 0002 5368     		ldr	r3, [r2, #4]
 890 0004 23F48073 		bic	r3, r3, #256
 891 0008 5360     		str	r3, [r2, #4]
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 892              		.loc 1 595 0
 893 000a 7047     		bx	lr
 894              	.L91:
 895              		.align	2
 896              	.L90:
 897 000c 00040058 		.word	1476396032
 898              		.cfi_endproc
 899              	.LFE161:
 901              		.section	.text.HAL_SYSCFG_CM7BootAddConfig,"ax",%progbits
 902              		.align	1
 903              		.global	HAL_SYSCFG_CM7BootAddConfig
 904              		.syntax unified
 905              		.thumb
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 27


 906              		.thumb_func
 907              		.fpu fpv5-d16
 909              	HAL_SYSCFG_CM7BootAddConfig:
 910              	.LFB162:
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  BootCM7 address 0 configuration
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  BootRegister :Specifies the Boot Address register (Address0 or Address1)
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one of the following values:
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_BOOT_ADDR0 : Select the boot address0 
 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 911              		.loc 1 608 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              		@ link register save eliminated.
 916              	.LVL36:
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if ( BootRegister == SYSCFG_BOOT_ADDR0 )
 917              		.loc 1 612 0
 918 0000 48B1     		cbz	r0, .L95
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     /* Configure CM7 BOOT ADD0 */
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << POSITION_VAL(SYSCFG_UR2_B
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }   
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   else 
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     /* Configure CM7 BOOT ADD1 */
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
 919              		.loc 1 620 0
 920 0002 0C4A     		ldr	r2, .L96
 921 0004 D2F80C03 		ldr	r0, [r2, #780]
 922              	.LVL37:
 923 0008 0B4B     		ldr	r3, .L96+4
 924 000a 0340     		ands	r3, r3, r0
 925 000c 43EA1141 		orr	r1, r3, r1, lsr #16
 926              	.LVL38:
 927 0010 C2F80C13 		str	r1, [r2, #780]
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 928              		.loc 1 623 0
 929 0014 7047     		bx	lr
 930              	.LVL39:
 931              	.L95:
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }   
 932              		.loc 1 615 0
 933 0016 0748     		ldr	r0, .L96
 934              	.LVL40:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 28


 935 0018 D0F80833 		ldr	r3, [r0, #776]
 936 001c 9BB2     		uxth	r3, r3
 937 001e 090C     		lsrs	r1, r1, #16
 938              	.LVL41:
 939              	.LBB4:
 940              	.LBB5:
 941              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     02. February 2017
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  39:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  48:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  50:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 29


  51:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wpacked"
  56:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wattributes"
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic pop
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT           struct __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  84:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 30


 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 119:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 136:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 138:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 139:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 147:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 31


 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 185:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 199:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 32


 222:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 242:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 246:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 276:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 33


 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 293:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 294:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 297:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 335:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 34


 336:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 337:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 340:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 347:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 374:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 376:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 380:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 35


 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 36


 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 487:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 489:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 494:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 37


 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 515:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 517:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 524:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 539:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 543:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 547:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 561:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 38


 564:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 566:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 570:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 581:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 591:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 602:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 607:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 620:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 39


 621:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 635:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0U);
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 659:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 662:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 676:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 40


 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 687:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 688:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 691:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 692:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("nop");
 697:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 709:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 718:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 719:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 720:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 725:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 728:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 729:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("sev");
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 41


 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 740:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 741:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 743:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 744:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 745:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 747:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 748:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 770:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 771:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 776:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 42


 792:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 798:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 813:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 822:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 823:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 824:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 837:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 841:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 43


 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 852:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 942              		.loc 2 857 0
 943 0020 054A     		ldr	r2, .L96+4
 944              		.syntax unified
 945              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 946 0022 92FAA2F2 		rbit r2, r2
 947              	@ 0 "" 2
 948              	.LVL42:
 949              		.thumb
 950              		.syntax unified
 951              	.LBE5:
 952              	.LBE4:
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }   
 953              		.loc 1 615 0
 954 0026 B2FA82F2 		clz	r2, r2
 955 002a 9140     		lsls	r1, r1, r2
 956 002c 1943     		orrs	r1, r1, r3
 957 002e C0F80813 		str	r1, [r0, #776]
 958 0032 7047     		bx	lr
 959              	.L97:
 960              		.align	2
 961              	.L96:
 962 0034 00040058 		.word	1476396032
 963 0038 0000FFFF 		.word	-65536
 964              		.cfi_endproc
 965              	.LFE162:
 967              		.section	.text.HAL_EnableCompensationCell,"ax",%progbits
 968              		.align	1
 969              		.global	HAL_EnableCompensationCell
 970              		.syntax unified
 971              		.thumb
 972              		.thumb_func
 973              		.fpu fpv5-d16
 975              	HAL_EnableCompensationCell:
 976              	.LFB163:
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enables the I/O Compensation Cell.
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableCompensationCell(void)
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 977              		.loc 1 633 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 44


 981              		@ link register save eliminated.
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 982              		.loc 1 634 0
 983 0000 024A     		ldr	r2, .L99
 984 0002 136A     		ldr	r3, [r2, #32]
 985 0004 43F00103 		orr	r3, r3, #1
 986 0008 1362     		str	r3, [r2, #32]
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 987              		.loc 1 635 0
 988 000a 7047     		bx	lr
 989              	.L100:
 990              		.align	2
 991              	.L99:
 992 000c 00040058 		.word	1476396032
 993              		.cfi_endproc
 994              	.LFE163:
 996              		.section	.text.HAL_DisableCompensationCell,"ax",%progbits
 997              		.align	1
 998              		.global	HAL_DisableCompensationCell
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1002              		.fpu fpv5-d16
 1004              	HAL_DisableCompensationCell:
 1005              	.LFB164:
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Power-down the I/O Compensation Cell.
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableCompensationCell(void)
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1006              		.loc 1 644 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010              		@ link register save eliminated.
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 1011              		.loc 1 645 0
 1012 0000 024A     		ldr	r2, .L102
 1013 0002 136A     		ldr	r3, [r2, #32]
 1014 0004 23F00103 		bic	r3, r3, #1
 1015 0008 1362     		str	r3, [r2, #32]
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1016              		.loc 1 646 0
 1017 000a 7047     		bx	lr
 1018              	.L103:
 1019              		.align	2
 1020              	.L102:
 1021 000c 00040058 		.word	1476396032
 1022              		.cfi_endproc
 1023              	.LFE164:
 1025              		.section	.text.HAL_SYSCFG_EnableIOSpeedOptimize,"ax",%progbits
 1026              		.align	1
 1027              		.global	HAL_SYSCFG_EnableIOSpeedOptimize
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 45


 1028              		.syntax unified
 1029              		.thumb
 1030              		.thumb_func
 1031              		.fpu fpv5-d16
 1033              	HAL_SYSCFG_EnableIOSpeedOptimize:
 1034              	.LFB165:
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  To Enable optimize the I/O speed when the product voltage is low.
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   This bit is active only if PRODUCT_BELOW_25V user option bit is set. It must be
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         higher than 2.5 V might be destructive.
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_EnableIOSpeedOptimize(void)
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1035              		.loc 1 657 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 0
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV) ;
 1040              		.loc 1 658 0
 1041 0000 024A     		ldr	r2, .L105
 1042 0002 136A     		ldr	r3, [r2, #32]
 1043 0004 43F48033 		orr	r3, r3, #65536
 1044 0008 1362     		str	r3, [r2, #32]
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1045              		.loc 1 659 0
 1046 000a 7047     		bx	lr
 1047              	.L106:
 1048              		.align	2
 1049              	.L105:
 1050 000c 00040058 		.word	1476396032
 1051              		.cfi_endproc
 1052              	.LFE165:
 1054              		.section	.text.HAL_SYSCFG_DisableIOSpeedOptimize,"ax",%progbits
 1055              		.align	1
 1056              		.global	HAL_SYSCFG_DisableIOSpeedOptimize
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu fpv5-d16
 1062              	HAL_SYSCFG_DisableIOSpeedOptimize:
 1063              	.LFB166:
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  To Disable optimize the I/O speed when the product voltage is low.
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   This bit is active only if PRODUCT_BELOW_25V user option bit is set. It must be
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         higher than 2.5 V might be destructive.
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_DisableIOSpeedOptimize(void)
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1064              		.loc 1 669 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 46


 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 0
 1067              		@ frame_needed = 0, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV) ;
 1069              		.loc 1 670 0
 1070 0000 024A     		ldr	r2, .L108
 1071 0002 136A     		ldr	r3, [r2, #32]
 1072 0004 23F48033 		bic	r3, r3, #65536
 1073 0008 1362     		str	r3, [r2, #32]
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1074              		.loc 1 671 0
 1075 000a 7047     		bx	lr
 1076              	.L109:
 1077              		.align	2
 1078              	.L108:
 1079 000c 00040058 		.word	1476396032
 1080              		.cfi_endproc
 1081              	.LFE166:
 1083              		.section	.text.HAL_SYSCFG_CompensationCodeSelect,"ax",%progbits
 1084              		.align	1
 1085              		.global	HAL_SYSCFG_CompensationCodeSelect
 1086              		.syntax unified
 1087              		.thumb
 1088              		.thumb_func
 1089              		.fpu fpv5-d16
 1091              	HAL_SYSCFG_CompensationCodeSelect:
 1092              	.LFB167:
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Code selection for the I/O Compensation cell
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_CompCode: Selects the code to be applied for the I/O compensation cell
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one of the following values:
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCF
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1093              		.loc 1 682 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097              		@ link register save eliminated.
 1098              	.LVL43:
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));  
 1099              		.loc 1 685 0
 1100 0000 034A     		ldr	r2, .L111
 1101 0002 136A     		ldr	r3, [r2, #32]
 1102 0004 23F00203 		bic	r3, r3, #2
 1103 0008 1843     		orrs	r0, r0, r3
 1104              	.LVL44:
 1105 000a 1062     		str	r0, [r2, #32]
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1106              		.loc 1 686 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 47


 1107 000c 7047     		bx	lr
 1108              	.L112:
 1109 000e 00BF     		.align	2
 1110              	.L111:
 1111 0010 00040058 		.word	1476396032
 1112              		.cfi_endproc
 1113              	.LFE167:
 1115              		.section	.text.HAL_SYSCFG_CompensationCodeConfig,"ax",%progbits
 1116              		.align	1
 1117              		.global	HAL_SYSCFG_CompensationCodeConfig
 1118              		.syntax unified
 1119              		.thumb
 1120              		.thumb_func
 1121              		.fpu fpv5-d16
 1123              	HAL_SYSCFG_CompensationCodeConfig:
 1124              	.LFB168:
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Code selection for the I/O Compensation cell
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_PMOSCode: PMOS compensation code
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         This code is applied to the I/O compensation cell when the CS bit of the
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          SYSCFG_CMPCR is set
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_NMOSCode: NMOS compensation code
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         This code is applied to the I/O compensation cell when the CS bit of the
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          SYSCFG_CMPCR is set
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1125              		.loc 1 699 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 0
 1128              		@ frame_needed = 0, uses_anonymous_args = 0
 1129              		@ link register save eliminated.
 1130              	.LVL45:
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uin
 1131              		.loc 1 703 0
 1132 0000 044A     		ldr	r2, .L114
 1133 0002 936A     		ldr	r3, [r2, #40]
 1134 0004 23F0FF03 		bic	r3, r3, #255
 1135 0008 41EA0010 		orr	r0, r1, r0, lsl #4
 1136              	.LVL46:
 1137 000c 0343     		orrs	r3, r3, r0
 1138 000e 9362     		str	r3, [r2, #40]
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1139              		.loc 1 704 0
 1140 0010 7047     		bx	lr
 1141              	.L115:
 1142 0012 00BF     		.align	2
 1143              	.L114:
 1144 0014 00040058 		.word	1476396032
 1145              		.cfi_endproc
 1146              	.LFE168:
 1148              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 48


 1149              		.align	1
 1150              		.global	HAL_DBGMCU_EnableDBGSleepMode
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv5-d16
 1156              	HAL_DBGMCU_EnableDBGSleepMode:
 1157              	.LFB169:
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain1 SLEEP mode
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDBGSleepMode(void)
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1158              		.loc 1 712 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 0
 1161              		@ frame_needed = 0, uses_anonymous_args = 0
 1162              		@ link register save eliminated.
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 1163              		.loc 1 713 0
 1164 0000 024A     		ldr	r2, .L117
 1165 0002 5368     		ldr	r3, [r2, #4]
 1166 0004 43F00103 		orr	r3, r3, #1
 1167 0008 5360     		str	r3, [r2, #4]
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1168              		.loc 1 714 0
 1169 000a 7047     		bx	lr
 1170              	.L118:
 1171              		.align	2
 1172              	.L117:
 1173 000c 0010005C 		.word	1543507968
 1174              		.cfi_endproc
 1175              	.LFE169:
 1177              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 1178              		.align	1
 1179              		.global	HAL_DBGMCU_DisableDBGSleepMode
 1180              		.syntax unified
 1181              		.thumb
 1182              		.thumb_func
 1183              		.fpu fpv5-d16
 1185              	HAL_DBGMCU_DisableDBGSleepMode:
 1186              	.LFB170:
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain1 SLEEP mode
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDBGSleepMode(void)
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1187              		.loc 1 721 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 0, uses_anonymous_args = 0
 1191              		@ link register save eliminated.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 49


 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 1192              		.loc 1 722 0
 1193 0000 024A     		ldr	r2, .L120
 1194 0002 5368     		ldr	r3, [r2, #4]
 1195 0004 23F00103 		bic	r3, r3, #1
 1196 0008 5360     		str	r3, [r2, #4]
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1197              		.loc 1 723 0
 1198 000a 7047     		bx	lr
 1199              	.L121:
 1200              		.align	2
 1201              	.L120:
 1202 000c 0010005C 		.word	1543507968
 1203              		.cfi_endproc
 1204              	.LFE170:
 1206              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 1207              		.align	1
 1208              		.global	HAL_DBGMCU_EnableDBGStopMode
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1212              		.fpu fpv5-d16
 1214              	HAL_DBGMCU_EnableDBGStopMode:
 1215              	.LFB171:
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain1 STOP mode
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDBGStopMode(void)
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1216              		.loc 1 730 0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 1221              		.loc 1 731 0
 1222 0000 024A     		ldr	r2, .L123
 1223 0002 5368     		ldr	r3, [r2, #4]
 1224 0004 43F00203 		orr	r3, r3, #2
 1225 0008 5360     		str	r3, [r2, #4]
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1226              		.loc 1 732 0
 1227 000a 7047     		bx	lr
 1228              	.L124:
 1229              		.align	2
 1230              	.L123:
 1231 000c 0010005C 		.word	1543507968
 1232              		.cfi_endproc
 1233              	.LFE171:
 1235              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 1236              		.align	1
 1237              		.global	HAL_DBGMCU_DisableDBGStopMode
 1238              		.syntax unified
 1239              		.thumb
 1240              		.thumb_func
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 50


 1241              		.fpu fpv5-d16
 1243              	HAL_DBGMCU_DisableDBGStopMode:
 1244              	.LFB172:
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain1 STOP mode
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDBGStopMode(void)
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1245              		.loc 1 739 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249              		@ link register save eliminated.
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 1250              		.loc 1 740 0
 1251 0000 024A     		ldr	r2, .L126
 1252 0002 5368     		ldr	r3, [r2, #4]
 1253 0004 23F00203 		bic	r3, r3, #2
 1254 0008 5360     		str	r3, [r2, #4]
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1255              		.loc 1 741 0
 1256 000a 7047     		bx	lr
 1257              	.L127:
 1258              		.align	2
 1259              	.L126:
 1260 000c 0010005C 		.word	1543507968
 1261              		.cfi_endproc
 1262              	.LFE172:
 1264              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 1265              		.align	1
 1266              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 1267              		.syntax unified
 1268              		.thumb
 1269              		.thumb_func
 1270              		.fpu fpv5-d16
 1272              	HAL_DBGMCU_EnableDBGStandbyMode:
 1273              	.LFB173:
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain1 STANDBY mode
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDBGStandbyMode(void)
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1274              		.loc 1 748 0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 1278              		@ link register save eliminated.
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 1279              		.loc 1 749 0
 1280 0000 024A     		ldr	r2, .L129
 1281 0002 5368     		ldr	r3, [r2, #4]
 1282 0004 43F00403 		orr	r3, r3, #4
 1283 0008 5360     		str	r3, [r2, #4]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 51


 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1284              		.loc 1 750 0
 1285 000a 7047     		bx	lr
 1286              	.L130:
 1287              		.align	2
 1288              	.L129:
 1289 000c 0010005C 		.word	1543507968
 1290              		.cfi_endproc
 1291              	.LFE173:
 1293              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 1294              		.align	1
 1295              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 1296              		.syntax unified
 1297              		.thumb
 1298              		.thumb_func
 1299              		.fpu fpv5-d16
 1301              	HAL_DBGMCU_DisableDBGStandbyMode:
 1302              	.LFB174:
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain1 STANDBY mode
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDBGStandbyMode(void)
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1303              		.loc 1 757 0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307              		@ link register save eliminated.
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 1308              		.loc 1 758 0
 1309 0000 024A     		ldr	r2, .L132
 1310 0002 5368     		ldr	r3, [r2, #4]
 1311 0004 23F00403 		bic	r3, r3, #4
 1312 0008 5360     		str	r3, [r2, #4]
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1313              		.loc 1 759 0
 1314 000a 7047     		bx	lr
 1315              	.L133:
 1316              		.align	2
 1317              	.L132:
 1318 000c 0010005C 		.word	1543507968
 1319              		.cfi_endproc
 1320              	.LFE174:
 1322              		.section	.text.HAL_EnableDomain3DBGStopMode,"ax",%progbits
 1323              		.align	1
 1324              		.global	HAL_EnableDomain3DBGStopMode
 1325              		.syntax unified
 1326              		.thumb
 1327              		.thumb_func
 1328              		.fpu fpv5-d16
 1330              	HAL_EnableDomain3DBGStopMode:
 1331              	.LFB175:
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 52


 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain3 STOP mode
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDomain3DBGStopMode(void)
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1332              		.loc 1 768 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              		@ link register save eliminated.
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD3);
 1337              		.loc 1 769 0
 1338 0000 024A     		ldr	r2, .L135
 1339 0002 5368     		ldr	r3, [r2, #4]
 1340 0004 43F08003 		orr	r3, r3, #128
 1341 0008 5360     		str	r3, [r2, #4]
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1342              		.loc 1 770 0
 1343 000a 7047     		bx	lr
 1344              	.L136:
 1345              		.align	2
 1346              	.L135:
 1347 000c 0010005C 		.word	1543507968
 1348              		.cfi_endproc
 1349              	.LFE175:
 1351              		.section	.text.HAL_DisableDomain3DBGStopMode,"ax",%progbits
 1352              		.align	1
 1353              		.global	HAL_DisableDomain3DBGStopMode
 1354              		.syntax unified
 1355              		.thumb
 1356              		.thumb_func
 1357              		.fpu fpv5-d16
 1359              	HAL_DisableDomain3DBGStopMode:
 1360              	.LFB176:
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain3 STOP mode
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDomain3DBGStopMode(void)
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1361              		.loc 1 777 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              		@ link register save eliminated.
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD3);
 1366              		.loc 1 778 0
 1367 0000 024A     		ldr	r2, .L138
 1368 0002 5368     		ldr	r3, [r2, #4]
 1369 0004 23F08003 		bic	r3, r3, #128
 1370 0008 5360     		str	r3, [r2, #4]
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1371              		.loc 1 779 0
 1372 000a 7047     		bx	lr
 1373              	.L139:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 53


 1374              		.align	2
 1375              	.L138:
 1376 000c 0010005C 		.word	1543507968
 1377              		.cfi_endproc
 1378              	.LFE176:
 1380              		.section	.text.HAL_EnableDomain3DBGStandbyMode,"ax",%progbits
 1381              		.align	1
 1382              		.global	HAL_EnableDomain3DBGStandbyMode
 1383              		.syntax unified
 1384              		.thumb
 1385              		.thumb_func
 1386              		.fpu fpv5-d16
 1388              	HAL_EnableDomain3DBGStandbyMode:
 1389              	.LFB177:
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain3 STANDBY mode
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDomain3DBGStandbyMode(void)
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1390              		.loc 1 786 0
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 0
 1393              		@ frame_needed = 0, uses_anonymous_args = 0
 1394              		@ link register save eliminated.
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD3);
 1395              		.loc 1 787 0
 1396 0000 024A     		ldr	r2, .L141
 1397 0002 5368     		ldr	r3, [r2, #4]
 1398 0004 43F48073 		orr	r3, r3, #256
 1399 0008 5360     		str	r3, [r2, #4]
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1400              		.loc 1 788 0
 1401 000a 7047     		bx	lr
 1402              	.L142:
 1403              		.align	2
 1404              	.L141:
 1405 000c 0010005C 		.word	1543507968
 1406              		.cfi_endproc
 1407              	.LFE177:
 1409              		.section	.text.HAL_DisableDomain3DBGStandbyMode,"ax",%progbits
 1410              		.align	1
 1411              		.global	HAL_DisableDomain3DBGStandbyMode
 1412              		.syntax unified
 1413              		.thumb
 1414              		.thumb_func
 1415              		.fpu fpv5-d16
 1417              	HAL_DisableDomain3DBGStandbyMode:
 1418              	.LFB178:
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain3 STANDBY mode
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDomain3DBGStandbyMode(void)
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 54


 1419              		.loc 1 795 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 1423              		@ link register save eliminated.
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD3);
 1424              		.loc 1 796 0
 1425 0000 024A     		ldr	r2, .L144
 1426 0002 5368     		ldr	r3, [r2, #4]
 1427 0004 23F48073 		bic	r3, r3, #256
 1428 0008 5360     		str	r3, [r2, #4]
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1429              		.loc 1 797 0
 1430 000a 7047     		bx	lr
 1431              	.L145:
 1432              		.align	2
 1433              	.L144:
 1434 000c 0010005C 		.word	1543507968
 1435              		.cfi_endproc
 1436              	.LFE178:
 1438              		.section	.text.HAL_SetFMCMemorySwappingConfig,"ax",%progbits
 1439              		.align	1
 1440              		.global	HAL_SetFMCMemorySwappingConfig
 1441              		.syntax unified
 1442              		.thumb
 1443              		.thumb_func
 1444              		.fpu fpv5-d16
 1446              	HAL_SetFMCMemorySwappingConfig:
 1447              	.LFB179:
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Set the FMC Memory Mapping Swapping config.
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL state
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1448              		.loc 1 806 0
 1449              		.cfi_startproc
 1450              		@ args = 0, pretend = 0, frame = 0
 1451              		@ frame_needed = 0, uses_anonymous_args = 0
 1452              		@ link register save eliminated.
 1453              	.LVL47:
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(FMC_Bank1->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 1454              		.loc 1 809 0
 1455 0000 034A     		ldr	r2, .L147
 1456 0002 1368     		ldr	r3, [r2]
 1457 0004 23F04073 		bic	r3, r3, #50331648
 1458 0008 1843     		orrs	r0, r0, r3
 1459              	.LVL48:
 1460 000a 1060     		str	r0, [r2]
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1461              		.loc 1 810 0
 1462 000c 7047     		bx	lr
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 55


 1463              	.L148:
 1464 000e 00BF     		.align	2
 1465              	.L147:
 1466 0010 00400052 		.word	1375748096
 1467              		.cfi_endproc
 1468              	.LFE179:
 1470              		.section	.text.HAL_GetFMCMemorySwappingConfig,"ax",%progbits
 1471              		.align	1
 1472              		.global	HAL_GetFMCMemorySwappingConfig
 1473              		.syntax unified
 1474              		.thumb
 1475              		.thumb_func
 1476              		.fpu fpv5-d16
 1478              	HAL_GetFMCMemorySwappingConfig:
 1479              	.LFB180:
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Get FMC Bank mapping mode.
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval The FMC Bank mapping mode. This parameter can be 
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** */
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetFMCMemorySwappingConfig(void)
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1480              		.loc 1 818 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return READ_BIT(FMC_Bank1->BTCR[0], FMC_BCR1_BMAP);
 1485              		.loc 1 819 0
 1486 0000 024B     		ldr	r3, .L150
 1487 0002 1868     		ldr	r0, [r3]
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1488              		.loc 1 820 0
 1489 0004 00F04070 		and	r0, r0, #50331648
 1490 0008 7047     		bx	lr
 1491              	.L151:
 1492 000a 00BF     		.align	2
 1493              	.L150:
 1494 000c 00400052 		.word	1375748096
 1495              		.cfi_endproc
 1496              	.LFE180:
 1498              		.section	.text.HAL_EXTI_EdgeConfig,"ax",%progbits
 1499              		.align	1
 1500              		.global	HAL_EXTI_EdgeConfig
 1501              		.syntax unified
 1502              		.thumb
 1503              		.thumb_func
 1504              		.fpu fpv5-d16
 1506              	HAL_EXTI_EdgeConfig:
 1507              	.LFB181:
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Configure the EXTI input event line edge
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note    No edge configuration for direct lines but for configurable lines:(EXTI_LINE0..EXTI_LI
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 56


 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         (EXTI_LINE0....EXTI_LINE88)excluding :line45, line81,line83 which are reserved  
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Edge: Specifies  EXTI line Edge used.
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one of the following values :
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1508              		.loc 1 835 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              		@ link register save eliminated.
 1513              	.LVL49:
 1514 0000 70B4     		push	{r4, r5, r6}
 1515              	.LCFI6:
 1516              		.cfi_def_cfa_offset 12
 1517              		.cfi_offset 4, -12
 1518              		.cfi_offset 5, -8
 1519              		.cfi_offset 6, -4
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_CONFIG_LINE(EXTI_Line));
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     /* Clear Rising Falling edge configuration */
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20)), (uint3
 1520              		.loc 1 841 0
 1521 0002 4309     		lsrs	r3, r0, #5
 1522 0004 5D01     		lsls	r5, r3, #5
 1523 0006 0F4C     		ldr	r4, .L156
 1524 0008 2E59     		ldr	r6, [r5, r4]
 1525 000a 00F01F00 		and	r0, r0, #31
 1526              	.LVL50:
 1527 000e 0122     		movs	r2, #1
 1528 0010 02FA00F0 		lsl	r0, r2, r0
 1529 0014 C243     		mvns	r2, r0
 1530 0016 1640     		ands	r6, r6, r2
 1531 0018 2E51     		str	r6, [r5, r4]
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20)), (uint
 1532              		.loc 1 842 0
 1533 001a 03F13073 		add	r3, r3, #46137344
 1534 001e 5B01     		lsls	r3, r3, #5
 1535 0020 1E68     		ldr	r6, [r3]
 1536 0022 3240     		ands	r2, r2, r6
 1537 0024 1A60     		str	r2, [r3]
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
 1538              		.loc 1 844 0
 1539 0026 11F4801F 		tst	r1, #1048576
 1540 002a 02D0     		beq	.L153
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         {
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20)), (u
 1541              		.loc 1 846 0
 1542 002c 1A68     		ldr	r2, [r3]
 1543 002e 0243     		orrs	r2, r2, r0
 1544 0030 1A60     		str	r2, [r3]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 57


 1545              	.L153:
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         }
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
 1546              		.loc 1 848 0
 1547 0032 11F4001F 		tst	r1, #2097152
 1548 0036 02D0     		beq	.L152
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         {
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20)), (ui
 1549              		.loc 1 850 0
 1550 0038 2B59     		ldr	r3, [r5, r4]
 1551 003a 1843     		orrs	r0, r0, r3
 1552 003c 2851     		str	r0, [r5, r4]
 1553              	.L152:
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         }
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1554              		.loc 1 852 0
 1555 003e 70BC     		pop	{r4, r5, r6}
 1556              	.LCFI7:
 1557              		.cfi_restore 6
 1558              		.cfi_restore 5
 1559              		.cfi_restore 4
 1560              		.cfi_def_cfa_offset 0
 1561 0040 7047     		bx	lr
 1562              	.L157:
 1563 0042 00BF     		.align	2
 1564              	.L156:
 1565 0044 04000058 		.word	1476395012
 1566              		.cfi_endproc
 1567              	.LFE181:
 1569              		.section	.text.HAL_EXTI_GenerateSWInterrupt,"ax",%progbits
 1570              		.align	1
 1571              		.global	HAL_EXTI_GenerateSWInterrupt
 1572              		.syntax unified
 1573              		.thumb
 1574              		.thumb_func
 1575              		.fpu fpv5-d16
 1577              	HAL_EXTI_GenerateSWInterrupt:
 1578              	.LFB182:
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                                                                                     
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Generates a Software interrupt on selected EXTI line.
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1579              		.loc 1 861 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 0
 1582              		@ frame_needed = 0, uses_anonymous_args = 0
 1583              		@ link register save eliminated.
 1584              	.LVL51:
 1585 0000 10B4     		push	{r4}
 1586              	.LCFI8:
 1587              		.cfi_def_cfa_offset 4
 1588              		.cfi_offset 4, -4
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 58


 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_EXTI_CONFIG_LINE(EXTI_Line));
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20)), (uint32_t
 1589              		.loc 1 865 0
 1590 0002 20F01F04 		bic	r4, r0, #31
 1591 0006 0649     		ldr	r1, .L160
 1592 0008 6358     		ldr	r3, [r4, r1]
 1593 000a 00F01F00 		and	r0, r0, #31
 1594              	.LVL52:
 1595 000e 0122     		movs	r2, #1
 1596 0010 02FA00F0 		lsl	r0, r2, r0
 1597 0014 1843     		orrs	r0, r0, r3
 1598 0016 6050     		str	r0, [r4, r1]
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1599              		.loc 1 866 0
 1600 0018 5DF8044B 		ldr	r4, [sp], #4
 1601              	.LCFI9:
 1602              		.cfi_restore 4
 1603              		.cfi_def_cfa_offset 0
 1604 001c 7047     		bx	lr
 1605              	.L161:
 1606 001e 00BF     		.align	2
 1607              	.L160:
 1608 0020 08000058 		.word	1476395016
 1609              		.cfi_endproc
 1610              	.LFE182:
 1612              		.section	.text.HAL_EXTI_D1_ClearFlag,"ax",%progbits
 1613              		.align	1
 1614              		.global	HAL_EXTI_D1_ClearFlag
 1615              		.syntax unified
 1616              		.thumb
 1617              		.thumb_func
 1618              		.fpu fpv5-d16
 1620              	HAL_EXTI_D1_ClearFlag:
 1621              	.LFB183:
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Clears the EXTI's line pending flags for Domain D1
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         (EXTI_LINE0....EXTI_LINE88)excluding :line45, line81,line83 which are reserved 
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1622              		.loc 1 876 0
 1623              		.cfi_startproc
 1624              		@ args = 0, pretend = 0, frame = 0
 1625              		@ frame_needed = 0, uses_anonymous_args = 0
 1626              		@ link register save eliminated.
 1627              	.LVL53:
 1628 0000 10B4     		push	{r4}
 1629              	.LCFI10:
 1630              		.cfi_def_cfa_offset 4
 1631              		.cfi_offset 4, -4
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 59


 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10)), (uint32_t)
 1632              		.loc 1 879 0
 1633 0002 4309     		lsrs	r3, r0, #5
 1634 0004 1B01     		lsls	r3, r3, #4
 1635 0006 064C     		ldr	r4, .L164
 1636 0008 1A59     		ldr	r2, [r3, r4]
 1637 000a 00F01F00 		and	r0, r0, #31
 1638              	.LVL54:
 1639 000e 0121     		movs	r1, #1
 1640 0010 01FA00F0 		lsl	r0, r1, r0
 1641 0014 1043     		orrs	r0, r0, r2
 1642 0016 1851     		str	r0, [r3, r4]
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1643              		.loc 1 881 0
 1644 0018 5DF8044B 		ldr	r4, [sp], #4
 1645              	.LCFI11:
 1646              		.cfi_restore 4
 1647              		.cfi_def_cfa_offset 0
 1648 001c 7047     		bx	lr
 1649              	.L165:
 1650 001e 00BF     		.align	2
 1651              	.L164:
 1652 0020 88000058 		.word	1476395144
 1653              		.cfi_endproc
 1654              	.LFE183:
 1656              		.section	.text.HAL_EXTI_D1_EventInputConfig,"ax",%progbits
 1657              		.align	1
 1658              		.global	HAL_EXTI_D1_EventInputConfig
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1662              		.fpu fpv5-d16
 1664              	HAL_EXTI_D1_EventInputConfig:
 1665              	.LFB184:
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Configure the EXTI input event line for Domain D1
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         (EXTI_LINE0....EXTI_LINE88)excluding :line45, line81,line83 which are reserved  
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Mode: Specifies which EXTI line is used as interrupt or an event. 
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one or a combination of the following values :
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg EXTI_MODE_IT :  Interrupt Mode selected
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg EXTI_MODE_EVT : Event Mode selected
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1666              		.loc 1 896 0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
 1671              	.LVL55:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 60


 1672 0000 70B4     		push	{r4, r5, r6}
 1673              	.LCFI12:
 1674              		.cfi_def_cfa_offset 12
 1675              		.cfi_offset 4, -12
 1676              		.cfi_offset 5, -8
 1677              		.cfi_offset 6, -4
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 1678              		.loc 1 901 0
 1679 0002 11F4803F 		tst	r1, #65536
 1680 0006 0CD0     		beq	.L167
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       {
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          if( EXTI_LineCmd == DISABLE)
 1681              		.loc 1 903 0
 1682 0008 E2B9     		cbnz	r2, .L168
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            {
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            /* Clear EXTI line configuration */
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10
 1683              		.loc 1 906 0
 1684 000a 1A4B     		ldr	r3, .L173
 1685 000c 03EB5013 		add	r3, r3, r0, lsr #5
 1686 0010 1B01     		lsls	r3, r3, #4
 1687 0012 1C68     		ldr	r4, [r3]
 1688 0014 00F01F06 		and	r6, r0, #31
 1689 0018 0125     		movs	r5, #1
 1690 001a B540     		lsls	r5, r5, r6
 1691 001c 24EA0504 		bic	r4, r4, r5
 1692 0020 1C60     		str	r4, [r3]
 1693              	.L167:
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          else 
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            {
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10))
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      }
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 1694              		.loc 1 913 0
 1695 0022 11F4003F 		tst	r1, #131072
 1696 0026 0BD0     		beq	.L166
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       {
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****           if( EXTI_LineCmd == DISABLE)
 1697              		.loc 1 915 0
 1698 0028 C2B1     		cbz	r2, .L172
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            {
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              /* Clear EXTI line configuration */
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            else
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            {  
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10
 1699              		.loc 1 922 0
 1700 002a 4309     		lsrs	r3, r0, #5
 1701 002c 1B01     		lsls	r3, r3, #4
 1702 002e 124C     		ldr	r4, .L173+4
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 61


 1703 0030 1A59     		ldr	r2, [r3, r4]
 1704              	.LVL56:
 1705 0032 00F01F00 		and	r0, r0, #31
 1706              	.LVL57:
 1707 0036 0121     		movs	r1, #1
 1708              	.LVL58:
 1709 0038 01FA00F0 		lsl	r0, r1, r0
 1710 003c 1043     		orrs	r0, r0, r2
 1711 003e 1851     		str	r0, [r3, r4]
 1712              	.L166:
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            } 
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       }
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1713              		.loc 1 926 0
 1714 0040 70BC     		pop	{r4, r5, r6}
 1715              	.LCFI13:
 1716              		.cfi_remember_state
 1717              		.cfi_restore 6
 1718              		.cfi_restore 5
 1719              		.cfi_restore 4
 1720              		.cfi_def_cfa_offset 0
 1721 0042 7047     		bx	lr
 1722              	.LVL59:
 1723              	.L168:
 1724              	.LCFI14:
 1725              		.cfi_restore_state
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 1726              		.loc 1 910 0
 1727 0044 0B4B     		ldr	r3, .L173
 1728 0046 03EB5013 		add	r3, r3, r0, lsr #5
 1729 004a 1B01     		lsls	r3, r3, #4
 1730 004c 1C68     		ldr	r4, [r3]
 1731 004e 00F01F06 		and	r6, r0, #31
 1732 0052 0125     		movs	r5, #1
 1733 0054 B540     		lsls	r5, r5, r6
 1734 0056 2C43     		orrs	r4, r4, r5
 1735 0058 1C60     		str	r4, [r3]
 1736 005a E2E7     		b	.L167
 1737              	.L172:
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 1738              		.loc 1 918 0
 1739 005c 4309     		lsrs	r3, r0, #5
 1740 005e 1B01     		lsls	r3, r3, #4
 1741 0060 0549     		ldr	r1, .L173+4
 1742              	.LVL60:
 1743 0062 5A58     		ldr	r2, [r3, r1]
 1744              	.LVL61:
 1745 0064 00F01F04 		and	r4, r0, #31
 1746 0068 0120     		movs	r0, #1
 1747              	.LVL62:
 1748 006a A040     		lsls	r0, r0, r4
 1749 006c 22EA0000 		bic	r0, r2, r0
 1750 0070 5850     		str	r0, [r3, r1]
 1751 0072 E5E7     		b	.L166
 1752              	.L174:
 1753              		.align	2
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 62


 1754              	.L173:
 1755 0074 08008005 		.word	92274696
 1756 0078 84000058 		.word	1476395140
 1757              		.cfi_endproc
 1758              	.LFE184:
 1760              		.section	.text.HAL_EXTI_D3_EventInputConfig,"ax",%progbits
 1761              		.align	1
 1762              		.global	HAL_EXTI_D3_EventInputConfig
 1763              		.syntax unified
 1764              		.thumb
 1765              		.thumb_func
 1766              		.fpu fpv5-d16
 1768              	HAL_EXTI_D3_EventInputConfig:
 1769              	.LFB185:
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Configure the EXTI input event line for Domain D3 
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         (EXTI_LINE0...EXTI_LINE15),(EXTI_LINE19...EXTI_LINE21),EXTI_LINE25, EXTI_LINE34,
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          EXTI_LINE35,EXTI_LINE41,(EXTI_LINE48...EXTI_LINE53),EXTI_LINE88 
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_ClearSrc: Specifies the clear source of D3 pending event.
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one of the following values :
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg BDMA_CH6_CLEAR : BDMA ch6 event selected as D3 domain pendclear source
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg BDMA_CH7_CLEAR : BDMA ch7 event selected as D3 domain pendclear source
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSr
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1770              		.loc 1 944 0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 0, uses_anonymous_args = 0
 1774              		@ link register save eliminated.
 1775              	.LVL63:
 1776 0000 70B4     		push	{r4, r5, r6}
 1777              	.LCFI15:
 1778              		.cfi_def_cfa_offset 12
 1779              		.cfi_offset 4, -12
 1780              		.cfi_offset 5, -8
 1781              		.cfi_offset 6, -4
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  /* Check the parameter */
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_D3_LINE(EXTI_Line));
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     if( EXTI_LineCmd == DISABLE)
 1782              		.loc 1 950 0
 1783 0002 F1B9     		cbnz	r1, .L176
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       {
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       /* Clear EXTI line configuration */
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20)),(ui
 1784              		.loc 1 953 0
 1785 0004 20F01F03 		bic	r3, r0, #31
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 63


 1786 0008 1B4D     		ldr	r5, .L182
 1787 000a 5959     		ldr	r1, [r3, r5]
 1788              	.LVL64:
 1789 000c 00F01F06 		and	r6, r0, #31
 1790 0010 0124     		movs	r4, #1
 1791 0012 B440     		lsls	r4, r4, r6
 1792 0014 21EA0401 		bic	r1, r1, r4
 1793 0018 5951     		str	r1, [r3, r5]
 1794              	.L177:
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       }
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    else
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      { 
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20)), (uint
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      }
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     if ( (EXTI_Line>>4)%2 ==0)
 1795              		.loc 1 961 0
 1796 001a 10F0100F 		tst	r0, #16
 1797 001e 1BD0     		beq	.L181
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     {
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      MODIFY_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20)), \
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     (uint32_t)(3 << ((EXTI_Line*2) & 0x1F)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2) & 0x1F))) ;
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     }
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     else 
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       {
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       MODIFY_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20)), \
 1798              		.loc 1 969 0
 1799 0020 20F01F05 		bic	r5, r0, #31
 1800 0024 154C     		ldr	r4, .L182+4
 1801 0026 2B59     		ldr	r3, [r5, r4]
 1802 0028 4000     		lsls	r0, r0, #1
 1803              	.LVL65:
 1804 002a 00F01E00 		and	r0, r0, #30
 1805 002e 0321     		movs	r1, #3
 1806 0030 8140     		lsls	r1, r1, r0
 1807 0032 23EA0103 		bic	r3, r3, r1
 1808 0036 02FA00F0 		lsl	r0, r2, r0
 1809 003a 1843     		orrs	r0, r0, r3
 1810 003c 2851     		str	r0, [r5, r4]
 1811              	.L175:
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      (uint32_t)(3 << ((EXTI_Line*2) & 0x1F)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2) & 0x1F))) 
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       }
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1812              		.loc 1 973 0
 1813 003e 70BC     		pop	{r4, r5, r6}
 1814              	.LCFI16:
 1815              		.cfi_remember_state
 1816              		.cfi_restore 6
 1817              		.cfi_restore 5
 1818              		.cfi_restore 4
 1819              		.cfi_def_cfa_offset 0
 1820 0040 7047     		bx	lr
 1821              	.LVL66:
 1822              	.L176:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 64


 1823              	.LCFI17:
 1824              		.cfi_restore_state
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      }
 1825              		.loc 1 957 0
 1826 0042 20F01F03 		bic	r3, r0, #31
 1827 0046 0C4D     		ldr	r5, .L182
 1828 0048 5959     		ldr	r1, [r3, r5]
 1829              	.LVL67:
 1830 004a 00F01F06 		and	r6, r0, #31
 1831 004e 0124     		movs	r4, #1
 1832 0050 B440     		lsls	r4, r4, r6
 1833 0052 2143     		orrs	r1, r1, r4
 1834 0054 5951     		str	r1, [r3, r5]
 1835 0056 E0E7     		b	.L177
 1836              	.L181:
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     (uint32_t)(3 << ((EXTI_Line*2) & 0x1F)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2) & 0x1F))) ;
 1837              		.loc 1 963 0
 1838 0058 20F01F05 		bic	r5, r0, #31
 1839 005c 084C     		ldr	r4, .L182+8
 1840 005e 2959     		ldr	r1, [r5, r4]
 1841 0060 4000     		lsls	r0, r0, #1
 1842              	.LVL68:
 1843 0062 00F01E03 		and	r3, r0, #30
 1844 0066 0320     		movs	r0, #3
 1845 0068 9840     		lsls	r0, r0, r3
 1846 006a 21EA0000 		bic	r0, r1, r0
 1847 006e 02FA03F3 		lsl	r3, r2, r3
 1848 0072 0343     		orrs	r3, r3, r0
 1849 0074 2B51     		str	r3, [r5, r4]
 1850 0076 E2E7     		b	.L175
 1851              	.L183:
 1852              		.align	2
 1853              	.L182:
 1854 0078 0C000058 		.word	1476395020
 1855 007c 14000058 		.word	1476395028
 1856 0080 10000058 		.word	1476395024
 1857              		.cfi_endproc
 1858              	.LFE185:
 1860              		.section	.bss.uwTick,"aw",%nobits
 1861              		.align	2
 1862              		.set	.LANCHOR2,. + 0
 1865              	uwTick:
 1866 0000 00000000 		.space	4
 1867              		.section	.data.uwTickFreq,"aw",%progbits
 1868              		.set	.LANCHOR0,. + 0
 1871              	uwTickFreq:
 1872 0000 01       		.byte	1
 1873              		.section	.data.uwTickPrio,"aw",%progbits
 1874              		.align	2
 1875              		.set	.LANCHOR1,. + 0
 1878              	uwTickPrio:
 1879 0000 10000000 		.word	16
 1880              		.text
 1881              	.Letext0:
 1882              		.file 3 "c:\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 1883              		.file 4 "c:\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 1884              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 65


 1885              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 1886              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 1887              		.file 8 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 1888              		.file 9 "c:\\gcc\\arm-none-eabi\\include\\sys\\lock.h"
 1889              		.file 10 "c:\\gcc\\arm-none-eabi\\include\\sys\\_types.h"
 1890              		.file 11 "c:\\gcc\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\stddef.h"
 1891              		.file 12 "c:\\gcc\\arm-none-eabi\\include\\sys\\reent.h"
 1892              		.file 13 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1893              		.file 14 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 1894              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 1895              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h"
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 66


DEFINED SYMBOLS
                            *ABS*:00000000 stm32h7xx_hal.c
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:17     .text.HAL_MspInit:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:24     .text.HAL_MspInit:00000000 HAL_MspInit
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:38     .text.HAL_MspDeInit:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:45     .text.HAL_MspDeInit:00000000 HAL_MspDeInit
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:58     .text.HAL_DeInit:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:65     .text.HAL_DeInit:00000000 HAL_DeInit
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:124    .text.HAL_DeInit:00000058 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:129    .text.HAL_InitTick:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:136    .text.HAL_InitTick:00000000 HAL_InitTick
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:190    .text.HAL_InitTick:00000040 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:197    .text.HAL_Init:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:204    .text.HAL_Init:00000000 HAL_Init
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:241    .text.HAL_IncTick:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:248    .text.HAL_IncTick:00000000 HAL_IncTick
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:267    .text.HAL_IncTick:00000010 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:273    .text.HAL_GetTick:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:280    .text.HAL_GetTick:00000000 HAL_GetTick
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:295    .text.HAL_GetTick:00000008 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:300    .text.HAL_GetTickPrio:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:307    .text.HAL_GetTickPrio:00000000 HAL_GetTickPrio
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:321    .text.HAL_GetTickPrio:00000008 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:326    .text.HAL_SetTickFreq:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:333    .text.HAL_SetTickFreq:00000000 HAL_SetTickFreq
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:372    .text.HAL_SetTickFreq:0000001c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:378    .text.HAL_GetTickFreq:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:385    .text.HAL_GetTickFreq:00000000 HAL_GetTickFreq
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:399    .text.HAL_GetTickFreq:00000008 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:404    .text.HAL_Delay:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:411    .text.HAL_Delay:00000000 HAL_Delay
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:452    .text.HAL_Delay:00000024 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:457    .text.HAL_SuspendTick:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:464    .text.HAL_SuspendTick:00000000 HAL_SuspendTick
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:481    .text.HAL_SuspendTick:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:486    .text.HAL_ResumeTick:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:493    .text.HAL_ResumeTick:00000000 HAL_ResumeTick
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:510    .text.HAL_ResumeTick:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:515    .text.HAL_GetHalVersion:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:522    .text.HAL_GetHalVersion:00000000 HAL_GetHalVersion
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:535    .text.HAL_GetHalVersion:00000004 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:540    .text.HAL_GetREVID:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:547    .text.HAL_GetREVID:00000000 HAL_GetREVID
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:563    .text.HAL_GetREVID:00000008 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:568    .text.HAL_GetDEVID:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:575    .text.HAL_GetDEVID:00000000 HAL_GetDEVID
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:591    .text.HAL_GetDEVID:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:596    .text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:603    .text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig:00000000 HAL_SYSCFG_VREFBUF_VoltageScalingConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:623    .text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig:00000010 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:628    .text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:635    .text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig:00000000 HAL_SYSCFG_VREFBUF_HighImpedanceConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:655    .text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig:00000010 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:660    .text.HAL_SYSCFG_VREFBUF_TrimmingConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:667    .text.HAL_SYSCFG_VREFBUF_TrimmingConfig:00000000 HAL_SYSCFG_VREFBUF_TrimmingConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:687    .text.HAL_SYSCFG_VREFBUF_TrimmingConfig:00000010 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:692    .text.HAL_SYSCFG_EnableVREFBUF:00000000 $t
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 67


C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:699    .text.HAL_SYSCFG_EnableVREFBUF:00000000 HAL_SYSCFG_EnableVREFBUF
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:746    .text.HAL_SYSCFG_EnableVREFBUF:00000030 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:751    .text.HAL_SYSCFG_DisableVREFBUF:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:758    .text.HAL_SYSCFG_DisableVREFBUF:00000000 HAL_SYSCFG_DisableVREFBUF
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:775    .text.HAL_SYSCFG_DisableVREFBUF:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:780    .text.HAL_SYSCFG_ETHInterfaceSelect:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:787    .text.HAL_SYSCFG_ETHInterfaceSelect:00000000 HAL_SYSCFG_ETHInterfaceSelect
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:807    .text.HAL_SYSCFG_ETHInterfaceSelect:00000010 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:812    .text.HAL_SYSCFG_AnalogSwitchConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:819    .text.HAL_SYSCFG_AnalogSwitchConfig:00000000 HAL_SYSCFG_AnalogSwitchConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:839    .text.HAL_SYSCFG_AnalogSwitchConfig:00000010 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:844    .text.HAL_SYSCFG_EnableBOOST:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:851    .text.HAL_SYSCFG_EnableBOOST:00000000 HAL_SYSCFG_EnableBOOST
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:868    .text.HAL_SYSCFG_EnableBOOST:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:873    .text.HAL_SYSCFG_DisableBOOST:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:880    .text.HAL_SYSCFG_DisableBOOST:00000000 HAL_SYSCFG_DisableBOOST
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:897    .text.HAL_SYSCFG_DisableBOOST:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:902    .text.HAL_SYSCFG_CM7BootAddConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:909    .text.HAL_SYSCFG_CM7BootAddConfig:00000000 HAL_SYSCFG_CM7BootAddConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:962    .text.HAL_SYSCFG_CM7BootAddConfig:00000034 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:968    .text.HAL_EnableCompensationCell:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:975    .text.HAL_EnableCompensationCell:00000000 HAL_EnableCompensationCell
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:992    .text.HAL_EnableCompensationCell:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:997    .text.HAL_DisableCompensationCell:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1004   .text.HAL_DisableCompensationCell:00000000 HAL_DisableCompensationCell
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1021   .text.HAL_DisableCompensationCell:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1026   .text.HAL_SYSCFG_EnableIOSpeedOptimize:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1033   .text.HAL_SYSCFG_EnableIOSpeedOptimize:00000000 HAL_SYSCFG_EnableIOSpeedOptimize
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1050   .text.HAL_SYSCFG_EnableIOSpeedOptimize:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1055   .text.HAL_SYSCFG_DisableIOSpeedOptimize:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1062   .text.HAL_SYSCFG_DisableIOSpeedOptimize:00000000 HAL_SYSCFG_DisableIOSpeedOptimize
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1079   .text.HAL_SYSCFG_DisableIOSpeedOptimize:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1084   .text.HAL_SYSCFG_CompensationCodeSelect:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1091   .text.HAL_SYSCFG_CompensationCodeSelect:00000000 HAL_SYSCFG_CompensationCodeSelect
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1111   .text.HAL_SYSCFG_CompensationCodeSelect:00000010 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1116   .text.HAL_SYSCFG_CompensationCodeConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1123   .text.HAL_SYSCFG_CompensationCodeConfig:00000000 HAL_SYSCFG_CompensationCodeConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1144   .text.HAL_SYSCFG_CompensationCodeConfig:00000014 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1149   .text.HAL_DBGMCU_EnableDBGSleepMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1156   .text.HAL_DBGMCU_EnableDBGSleepMode:00000000 HAL_DBGMCU_EnableDBGSleepMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1173   .text.HAL_DBGMCU_EnableDBGSleepMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1178   .text.HAL_DBGMCU_DisableDBGSleepMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1185   .text.HAL_DBGMCU_DisableDBGSleepMode:00000000 HAL_DBGMCU_DisableDBGSleepMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1202   .text.HAL_DBGMCU_DisableDBGSleepMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1207   .text.HAL_DBGMCU_EnableDBGStopMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1214   .text.HAL_DBGMCU_EnableDBGStopMode:00000000 HAL_DBGMCU_EnableDBGStopMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1231   .text.HAL_DBGMCU_EnableDBGStopMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1236   .text.HAL_DBGMCU_DisableDBGStopMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1243   .text.HAL_DBGMCU_DisableDBGStopMode:00000000 HAL_DBGMCU_DisableDBGStopMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1260   .text.HAL_DBGMCU_DisableDBGStopMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1265   .text.HAL_DBGMCU_EnableDBGStandbyMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1272   .text.HAL_DBGMCU_EnableDBGStandbyMode:00000000 HAL_DBGMCU_EnableDBGStandbyMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1289   .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1294   .text.HAL_DBGMCU_DisableDBGStandbyMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1301   .text.HAL_DBGMCU_DisableDBGStandbyMode:00000000 HAL_DBGMCU_DisableDBGStandbyMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1318   .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1323   .text.HAL_EnableDomain3DBGStopMode:00000000 $t
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s 			page 68


C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1330   .text.HAL_EnableDomain3DBGStopMode:00000000 HAL_EnableDomain3DBGStopMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1347   .text.HAL_EnableDomain3DBGStopMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1352   .text.HAL_DisableDomain3DBGStopMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1359   .text.HAL_DisableDomain3DBGStopMode:00000000 HAL_DisableDomain3DBGStopMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1376   .text.HAL_DisableDomain3DBGStopMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1381   .text.HAL_EnableDomain3DBGStandbyMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1388   .text.HAL_EnableDomain3DBGStandbyMode:00000000 HAL_EnableDomain3DBGStandbyMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1405   .text.HAL_EnableDomain3DBGStandbyMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1410   .text.HAL_DisableDomain3DBGStandbyMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1417   .text.HAL_DisableDomain3DBGStandbyMode:00000000 HAL_DisableDomain3DBGStandbyMode
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1434   .text.HAL_DisableDomain3DBGStandbyMode:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1439   .text.HAL_SetFMCMemorySwappingConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1446   .text.HAL_SetFMCMemorySwappingConfig:00000000 HAL_SetFMCMemorySwappingConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1466   .text.HAL_SetFMCMemorySwappingConfig:00000010 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1471   .text.HAL_GetFMCMemorySwappingConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1478   .text.HAL_GetFMCMemorySwappingConfig:00000000 HAL_GetFMCMemorySwappingConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1494   .text.HAL_GetFMCMemorySwappingConfig:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1499   .text.HAL_EXTI_EdgeConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1506   .text.HAL_EXTI_EdgeConfig:00000000 HAL_EXTI_EdgeConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1565   .text.HAL_EXTI_EdgeConfig:00000044 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1570   .text.HAL_EXTI_GenerateSWInterrupt:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1577   .text.HAL_EXTI_GenerateSWInterrupt:00000000 HAL_EXTI_GenerateSWInterrupt
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1608   .text.HAL_EXTI_GenerateSWInterrupt:00000020 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1613   .text.HAL_EXTI_D1_ClearFlag:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1620   .text.HAL_EXTI_D1_ClearFlag:00000000 HAL_EXTI_D1_ClearFlag
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1652   .text.HAL_EXTI_D1_ClearFlag:00000020 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1657   .text.HAL_EXTI_D1_EventInputConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1664   .text.HAL_EXTI_D1_EventInputConfig:00000000 HAL_EXTI_D1_EventInputConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1755   .text.HAL_EXTI_D1_EventInputConfig:00000074 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1761   .text.HAL_EXTI_D3_EventInputConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1768   .text.HAL_EXTI_D3_EventInputConfig:00000000 HAL_EXTI_D3_EventInputConfig
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1854   .text.HAL_EXTI_D3_EventInputConfig:00000078 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1861   .bss.uwTick:00000000 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1865   .bss.uwTick:00000000 uwTick
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1871   .data.uwTickFreq:00000000 uwTickFreq
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1874   .data.uwTickPrio:00000000 $d
C:\Users\qqffx\AppData\Local\Temp\ccVGvcDa.s:1878   .data.uwTickPrio:00000000 uwTickPrio

UNDEFINED SYMBOLS
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
SystemCoreClock
HAL_NVIC_SetPriorityGrouping
