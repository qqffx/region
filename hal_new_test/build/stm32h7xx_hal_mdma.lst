ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_mdma.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MDMA_Init,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	MDMA_Init:
  24              	.LFB157:
  25              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @file    stm32h7xx_hal_mdma.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  This file provides firmware functions to manage the following
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *         functionalities of the Master Direct Memory Access (MDMA) peripheral:
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *           + Initialization/de-initialization functions
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *           + I/O operation functions
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *           + Peripheral State and errors functions
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   @verbatim     
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   ==============================================================================      
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                         ##### How to use this driver #####
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   ============================================================================== 
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   [..]
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****    (#) Enable and configure the peripheral to be connected to the MDMA Channel
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        (except for internal SRAM/FLASH memories: no initialization is 
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        necessary) please refer to Reference manual for connection between peripherals
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        and MDMA requests. 
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****    (#) 
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        For a given Channel use HAL_MDMA_Init function to program the required configuration through
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        transfer request , channel priority, data endianness, Source increment, destination incremen
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        source data size, destination data size, data alignment, source Burst, destination Burst , 
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        buffer Transfer Length, Transfer Trigger Mode (buffer transfer, block transfer, repeated blo
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        or full transfer) source and destination block address offset, mask address and data.
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        If using the MDMA in linked list mode then use function HAL_MDMA_LinkedList_CreateNode to fi
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        Note that parameters given to the function HAL_MDMA_Init corresponds always to the node zero
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        Use function HAL_MDMA_LinkedList_AddNode to connect the created node to the linked list at a
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        User can make a linked list circular using function HAL_MDMA_LinkedList_EnableCircularMode ,
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        last node of the list to the first one in order to make the list circular.
  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        In this case the linked list will loop on node 1 : first node connected after the initial tr
  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 2


  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       -@-   The initial transfer itself (node 0 corresponding to the Init).
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             User can disable the circular mode using function HAL_MDMA_LinkedList_DisableCircularMo
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             the connection between last node and first one.
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        Function HAL_MDMA_LinkedList_RemoveNode can be used to remove (disconnect) a node from the t
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        When a linked list is circular (last node connected to first one), if removing node1  (node 
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        the linked list remains circular and node 2 becomes the first one.
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        Note that if the linked list is made circular the transfer will loop infinitely (or until ab
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        (+) User can select the transfer trigger mode (parameter TransferTriggerMode) to define the 
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****            transfer upon a request :
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****              (++) MDMA_BUFFER_TRANSFER : each request triggers a transfer of BufferTransferLength d
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                with BufferTransferLength defined within the HAL_MDMA_Init.
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****              (++) MDMA_BLOCK_TRANSFER : each request triggers a transfer of a block 
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                with block size defined within the function HAL_MDMA_Start/HAL_MDMA_Start_IT 
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                or within the current linked list node parameters.
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****              (++) MDMA_REPEAT_BLOCK_TRANSFER : each request triggers a transfer of a number of bloc
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                with block size and number of blocks defined within the function HAL_MDMA_Start/HAL_
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                or within the current linked list node parameters.
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****              (++) MDMA_FULL_TRANSFER : each request triggers a full transfer 
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               all blocks and all nodes(if a linked list has been created using HAL_MDMA_LinkedList_
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      *** Polling mode IO operation ***
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      =================================   
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..] 
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Use HAL_MDMA_Start() to start MDMA transfer after the configuration of Source 
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               address and destination address and the Length of data to be transferred.
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Use HAL_MDMA_PollForTransfer() to poll for the end of current transfer or a transfer 
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****              In this case a fixed Timeout can be configured by User depending from his application.
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Use HAL_MDMA_Abort() function to abort the current transfer : blocking method this AP
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               when the abort ends or timeout (should not be called from an interrupt service routin
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      *** Interrupt mode IO operation ***    
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      =================================== 
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]     
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Configure the MDMA interrupt priority using HAL_NVIC_SetPriority()
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Enable the MDMA IRQ handler using HAL_NVIC_EnableIRQ() 
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Use HAL_MDMA_Start_IT() to start MDMA transfer after the configuration of  
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               Source address and destination address and the Length of data to be transferred. In t
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               case the MDMA interrupt is configured. 
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Use HAL_MDMA_IRQHandler() called under MDMA_IRQHandler() Interrupt subroutine
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) At the end of data transfer HAL_MDMA_IRQHandler() function is executed and user can 
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               add his own function by customization of function pointer XferCpltCallback and 
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               XferErrorCallback (i.e a member of MDMA handle structure). 
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Use HAL_MDMA_Abort_IT() function to abort the current transfer : non-blocking method.
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               then the callback XferAbortCallback (if specified  by the user) is asserted once the 
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (could be called from an interrupt service routine).
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           (+) Use functions HAL_MDMA_RegisterCallback and HAL_MDMA_UnRegisterCallback respectevely 
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               from the following list :
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) XferCpltCallback            : transfer complete callback.
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) XferBufferCpltCallback      : buffer transfer complete callback.
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) XferBlockCpltCallback       : block transfer complete callback.
  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) XferRepeatBlockCpltCallback : repeated block transfer complete callback.        
  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) XferErrorCallback           : transfer error callback.      
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 3


  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) XferAbortCallback           : transfer abort complete callback.    
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****          (+)  If the transfer Request corresponds to SW request (MDMA_REQUEST_SW) User can use func
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               trigger requests manually. Function HAL_MDMA_GenerateSWRequest must be used with the 
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) This function returns an error if used while the Transfer hase ends or not start
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) If used while the current request hase not been served yet (current request tran
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                 this function returns an error and the new request is ignored.
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               Generally this function should be used in conjunctions with the MDMA callbacks:      
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) example 1:  
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                  (+++) Configure a transfer with request set to MDMA_REQUEST_SW and trigger mode se
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                  (+++) Register a callback for buffer transfer complete (using callback ID set to H
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                  (+++) After calling HAL_MDMA_Start_IT the MDMA will issue the transfer of a first 
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                  (+++) When the buffer transfer complete callback is asserted first buffer hase bee
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    request using HAL_MDMA_GenerateSWRequest. 
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               (++) example 2:  
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                  (+++) Configure a transfer with request set to MDMA_REQUEST_SW and trigger mode se
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                  (+++) Register a callback for block transfer complete (using callback ID HAL_MDMA_
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                  (+++) After calling HAL_MDMA_Start_IT the MDMA will issue the transfer of a first 
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                  (+++) When the block transfer complete callback is asserted the fisrt block hase b
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    for a new block transfer request using HAL_MDMA_GenerateSWRequest. 
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]  Use HAL_MDMA_GetState() function to return the MDMA state and HAL_MDMA_GetError() in case
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      *** MDMA HAL driver macros list ***
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      ============================================= 
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      [..]
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        Below the list of most used macros in MDMA HAL driver.
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****        
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) __HAL_MDMA_ENABLE: Enable the specified MDMA Stream.
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) __HAL_MDMA_DISABLE: Disable the specified MDMA Stream.
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) __HAL_MDMA_GET_FLAG: Get the MDMA Stream pending flags.
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) __HAL_MDMA_CLEAR_FLAG: Clear the MDMA Stream pending flags.
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) __HAL_MDMA_ENABLE_IT: Enable the specified MDMA Stream interrupts.
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) __HAL_MDMA_DISABLE_IT: Disable the specified MDMA Stream interrupts.
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) __HAL_MDMA_GET_IT_SOURCE: Check whether the specified MDMA Stream interrupt has occurred 
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      [..] 
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (@) You can refer to the header file of the MDMA HAL driver for more useful macros.
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     @endverbatim
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   ******************************************************************************
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @attention
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * Redistribution and use in source and binary forms, with or without modification,
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * are permitted provided that the following conditions are met:
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *      this list of conditions and the following disclaimer.
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *      this list of conditions and the following disclaimer in the documentation
 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *      and/or other materials provided with the distribution.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 4


 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *      may be used to endorse or promote products derived from this software
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *      without specific prior written permission.
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   ******************************************************************************
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */ 
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /* Includes ------------------------------------------------------------------*/
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** #include "stm32h7xx_hal.h"
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup STM32H7xx_HAL_Driver
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @defgroup MDMA  MDMA
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief MDMA HAL module driver
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** #ifdef HAL_MDMA_MODULE_ENABLED
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /* Private typedef -----------------------------------------------------------*/
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /* Private constants ---------------------------------------------------------*/
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup MDMA_Private_Constants
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  * @{
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  */
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** #define HAL_TIMEOUT_MDMA_ABORT    ((uint32_t)5U)    /* 5 ms */
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** #define HAL_MDMA_CHANNEL_SIZE     ((uint32_t)0x40U) /* an MDMA instance channel size is 64 byte  */
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @}
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /* Private macro -------------------------------------------------------------*/
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /* Private variables ---------------------------------------------------------*/
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /* Private function prototypes -----------------------------------------------*/
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup MDMA_Private_Functions_Prototypes
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uin
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** static void MDMA_Init(MDMA_HandleTypeDef *hmdma);
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @}
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup MDMA_Exported_Functions MDMA Exported Functions
 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 5


 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup MDMA_Exported_Functions_Group1
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** @verbatim   
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  ===============================================================================
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****              ##### Initialization and de-initialization functions  #####
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  ===============================================================================  
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     This section provides functions allowing to :
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       Initialize and de-initialize the MDMA channel.
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       Register and Unregister MDMA callbacks    
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     The HAL_MDMA_Init() function follows the MDMA channel configuration procedures as described in
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     reference manual. 
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     The HAL_MDMA_DeInit function allows to deinitialize the MDMA channel.
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     HAL_MDMA_RegisterCallback and  HAL_MDMA_UnRegisterCallback functions allows 
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     respectevely to register/unregister an MDMA callback function.
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** @endverbatim
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Initializes the MDMA according to the specified
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *         parameters in the MDMA_InitTypeDef and create the associated handle.
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *               the configuration information for the specified MDMA Stream.  
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t tickstart = HAL_GetTick();
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_STREAM_ALL_INSTANCE(hmdma->Instance));
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_PRIORITY(hmdma->Init.Priority));
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_ENDIANNESS_MODE(hmdma->Init.Endianness));
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_REQUEST(hmdma->Init.Request));
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_SOURCE_INC(hmdma->Init.SourceInc));
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_DESTINATION_INC(hmdma->Init.DestinationInc));
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_SOURCE_DATASIZE(hmdma->Init.SourceDataSize));
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_DESTINATION_DATASIZE(hmdma->Init.DestDataSize));
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_DATA_ALIGNMENT(hmdma->Init.DataAlignment));
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_SOURCE_BURST(hmdma->Init.SourceBurst));
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_DESTINATION_BURST(hmdma->Init.DestBurst));
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BUFFER_TRANSFER_LENGTH(hmdma->Init.BufferTransferLength));
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_TRANSFER_TRIGGER_MODE(hmdma->Init.TransferTriggerMode));
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset)); 
 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 6


 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Allocate lock resource */
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_UNLOCK(hmdma);
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Change MDMA peripheral state */
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->State = HAL_MDMA_STATE_BUSY;
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Disable the MDMA channel */
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_MDMA_DISABLE(hmdma);
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check if the MDMA channel is effectively disabled */
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   while((hmdma->Instance->CCR & MDMA_CCR_EN) != RESET)
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Check for the Timeout */
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Update error code */
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Change the MDMA state */
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->State = HAL_MDMA_STATE_ERROR;
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       return HAL_ERROR;
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Init MDMA channel registers */
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   MDMA_Init(hmdma);
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Reset the  MDMA first/last linkedlist node addresses and node counter */
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->FirstLinkedListNodeAddress  = 0; 
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->LastLinkedListNodeAddress   = 0; 
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->LinkedListNodeCounter  = 0;  
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Initialise the error code */
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Initialize the MDMA state */
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->State = HAL_MDMA_STATE_READY;
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return HAL_OK;
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  DeInitializes the MDMA peripheral 
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *               the configuration information for the specified MDMA Stream.  
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {  
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 7


 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral state */
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma->State == HAL_MDMA_STATE_BUSY)
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Disable the selected MDMA Channelx */
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_MDMA_DISABLE(hmdma);
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Reset MDMA Channel control register */
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CCR  = 0;
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CTCR = 0;
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CBNDTR = 0;
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CSAR = 0;
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CDAR = 0;  
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CBRUR = 0;
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CLAR = 0;
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CTBR = 0;
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CMAR = 0;
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CMDR = 0;
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Clear all flags */
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_F
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Reset the  MDMA first/last linkedlist node addresses and node counter */
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->FirstLinkedListNodeAddress  = 0; 
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->LastLinkedListNodeAddress   = 0; 
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->LinkedListNodeCounter  = 0; 
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Initialise the error code */
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Initialize the MDMA state */
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->State = HAL_MDMA_STATE_RESET;
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Release Lock */
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_UNLOCK(hmdma);
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return HAL_OK;
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Config the Post request Mask address and Mask data
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma      : pointer to a MDMA_HandleTypeDef structure that contains
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                               the configuration information for the specified MDMA Channel.
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  MaskAddress: specifies the address to be updated (written) with MaskData after a reques
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                      MaskAddress and MaskData could be used to automatically clear a peripheral
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */  
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, u
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef  status = HAL_OK;
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 8


 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* if HW request set Post Request MaskAddress and MaskData,  */
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0)
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Set the HW request clear Mask and Data */
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->Instance->CMAR = MaskAddress;
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->Instance->CMDR = MaskData;
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* 
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       -If the request is done by SW : BWM could be set to 1 or 0.
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       -If the request is done by a peripheral :
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****          If mask address not set (0) => BWM must be set to 0
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****          If mask address set (different than 0) => BWM could be set to 1 or 0
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       */
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(MaskAddress == 0)
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       else
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     else
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Return error status */
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       status =  HAL_ERROR;      
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Return error status */
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     status =  HAL_ERROR;
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Release Lock */
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_UNLOCK(hmdma);
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return status;  
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Register callbacks
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma:                pointer to a MDMA_HandleTypeDef structure that contains
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                               the configuration information for the specified MDMA Channel.
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  CallbackID:           User Callback identifier
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  pCallback:            pointer to callbacsk function.
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */                      
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 9


 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef C
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {  
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef status = HAL_OK;
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     switch (CallbackID)
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_CPLT_CB_ID:
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferCpltCallback = pCallback;
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferBufferCpltCallback = pCallback;
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferBlockCpltCallback = pCallback;
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferRepeatBlockCpltCallback = pCallback;
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_ERROR_CB_ID:
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferErrorCallback = pCallback;
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_ABORT_CB_ID:
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferAbortCallback = pCallback;
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     default:
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Return error status */
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     status =  HAL_ERROR;
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Release Lock */
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_UNLOCK(hmdma);
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return status;
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 10


 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  UnRegister callbacks
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma:                 pointer to a MDMA_HandleTypeDef structure that contains
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                               the configuration information for the specified MDMA Channel.
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  CallbackID:           User Callback identifier
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                               a HAL_MDMA_CallbackIDTypeDef ENUM as parameter.
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef status = HAL_OK;
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     switch (CallbackID)
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_CPLT_CB_ID:
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferCpltCallback = NULL;
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferBufferCpltCallback = NULL;
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferBlockCpltCallback = NULL;
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferRepeatBlockCpltCallback = NULL;
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_ERROR_CB_ID:
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferErrorCallback = NULL;
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case  HAL_MDMA_XFER_ABORT_CB_ID:
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferAbortCallback = NULL;
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break; 
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     case   HAL_MDMA_XFER_ALL_CB_ID:
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferCpltCallback = NULL;
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferBufferCpltCallback = NULL;
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferBlockCpltCallback = NULL;
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferRepeatBlockCpltCallback = NULL;
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferErrorCallback = NULL;
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferAbortCallback = NULL;
 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break; 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 11


 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     default:
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       status = HAL_ERROR;
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     status = HAL_ERROR;
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Release Lock */
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_UNLOCK(hmdma);
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return status;
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @}
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup MDMA_Exported_Functions_Group2
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  *
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** @verbatim   
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  ===============================================================================
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                       #####  Linked list operation functions  #####
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  ===============================================================================  
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]  This section provides functions allowing to:
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Create a linked list node
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Add a node to the MDMA linked list
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Remove a node from the MDMA linked list
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Enable/Disable linked list circular mode 
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** @endverbatim
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Initializes an MDMA Link Node according to the specified
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *         parameters in the pMDMA_LinkedListNodeConfig .
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  pNode: Pointer to a MDMA_LinkNodeTypeDef structure that contains Linked list node 
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *         registers configurations.  
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *               the configuration information for the specified MDMA Linked List Node. 
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfType
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t addressMask = 0;
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t blockoffset = 0;
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral state */
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((pNode == NULL) || (pNodeConfig == NULL))
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 12


 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_PRIORITY(pNodeConfig->Init.Priority));
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_ENDIANNESS_MODE(pNodeConfig->Init.Endianness));
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_REQUEST(pNodeConfig->Init.Request));
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_SOURCE_INC(pNodeConfig->Init.SourceInc));
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_DESTINATION_INC(pNodeConfig->Init.DestinationInc));
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_SOURCE_DATASIZE(pNodeConfig->Init.SourceDataSize));
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_DESTINATION_DATASIZE(pNodeConfig->Init.DestDataSize));
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_DATA_ALIGNMENT(pNodeConfig->Init.DataAlignment));
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_SOURCE_BURST(pNodeConfig->Init.SourceBurst));
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_DESTINATION_BURST(pNodeConfig->Init.DestBurst));
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BUFFER_TRANSFER_LENGTH(pNodeConfig->Init.BufferTransferLength));
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_TRANSFER_TRIGGER_MODE(pNodeConfig->Init.TransferTriggerMode));
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(pNodeConfig->Init.SourceBlockAddressOffset));
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(pNodeConfig->Init.DestBlockAddressOffset));
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));  
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /*configure next Link node Address Register to zero */
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CLAR =  0;
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /*Configure the Link Node registers*/
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CTBR   = 0;
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CMAR   = 0;  
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CMDR   = 0;
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->Reserved = 0;
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* write new CTCR Register value */
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc  | \
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize  | \
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst   | \
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         pNodeConfig->Init.DestBurst  | \
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           ((pNodeConfig->Init.BufferTransferLength - 1) << POSITION_VAL(MDMA_CTCR_TLEN)) | \
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             pNodeConfig->Init.TransferTriggerMode;
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* If SW request set the CTCR register to SW Request Mode*/
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CTCR |= MDMA_CTCR_SWRM;
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* 
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   -If the request is done by SW : BWM could be set to 1 or 0.
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   -If the request is done by a peripheral :
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      If mask address not set (0) => BWM must be set to 0
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****      If mask address set (different than 0) => BWM could be set to 1 or 0
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0))
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CTCR |=  MDMA_CTCR_BWM;
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Set the new CBNDTR Register value */ 
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CBNDTR = ((pNodeConfig->BlockCount - 1) << POSITION_VAL(MDMA_CBNDTR_BRC)) & MDMA_CBNDTR_BR
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* if block source address offset is negative set the Block Repeat Source address Update Mode to 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 13


 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : source repeat block offset */
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     blockoffset = (-1 * pNodeConfig->Init.SourceBlockAddressOffset);
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CBRUR = blockoffset & 0x0000FFFFU;
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : source repeat block offset */     
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);    
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }    
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* if block destination address offset is negative set the Block Repeat destination address Updat
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(pNodeConfig->Init.DestBlockAddressOffset < 0)
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : destination repeat block offset */
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     blockoffset = (-1 * pNodeConfig->Init.DestBlockAddressOffset);
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << POSITION_VAL(MDMA_CBRUR_DUV));
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : destination repeat block offset */     
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CBRUR |= (((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << POSITIO
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }    
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Configure MDMA Link Node data length */
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Configure MDMA Link Node destination address */
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CDAR = pNodeConfig->DstAddress; 
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Configure MDMA Link Node Source address */
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CSAR = pNodeConfig->SrcAddress;
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Set the HW request in CTBR register  */
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Set the HW request clear Mask and Data */
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CMDR = pNodeConfig->PostRequestMaskData;      
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*The AHBSbus is used as source (read operation) on channel x */
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CTBR |= MDMA_CTBR_SBUS;  
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   addressMask = pNodeConfig->DstAddress & 0xFF000000U;
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*The AHB bus is used as destination (write operation) on channel x */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 14


 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CTBR |= MDMA_CTBR_DBUS;
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return HAL_OK;
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Connect a node to the linked list.
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma    : Pointer to a MDMA_HandleTypeDef structure that contains
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                    the configuration information for the specified MDMA Channel.
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  pNewNode : Pointer to a MDMA_LinkNodeTypeDef structure that contains Linked list node 
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                    to be add to the list.
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param pPrevNode : Pointer to the new node position in the linked list or zero to insert the ne
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                    at the end of the list 
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNew
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   MDMA_LinkNodeTypeDef *pNode = 0;
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t counter = 0, nodeInserted = 0;
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((hmdma == NULL) || (pNewNode == NULL))
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Change MDMA peripheral state */
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_BUSY;
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Check if this is the first node (after the Inititlization node) */
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0)
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(pPrevNode == NULL)
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* if this is the first node after the initialization  
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         connect this node to the node 0 by updating
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         the MDMA channel CLAR register to this node address */
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->Instance->CLAR = (uint32_t)pNewNode;
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Set the MDMA handle First linked List node*/
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->FirstLinkedListNodeAddress = pNewNode;
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /*reset New node link */
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         pNewNode->CLAR = 0;
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update the Handle last node address */      
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->LastLinkedListNodeAddress = pNewNode;
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->LinkedListNodeCounter = 1;
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 15


 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       else
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hal_status = HAL_ERROR;
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     else if(hmdma->FirstLinkedListNodeAddress != pNewNode)  
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Check if the node to insert already exists*/        
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       pNode = hmdma->FirstLinkedListNodeAddress;
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         if(pNode->CLAR == (uint32_t)pNewNode)
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         counter++;
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(hal_status == HAL_OK)
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Check if the previous node is the last one in the current list or zero */     
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == 0))
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* insert the new node at the end of the list. */
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;            
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* Update the Handle last node address */
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           hmdma->LastLinkedListNodeAddress = pNewNode;
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* Increment the linked list node counter */
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           hmdma->LinkedListNodeCounter++;
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         else
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /*insert the new node after the pPreviousNode node */ 
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           pNode = hmdma->FirstLinkedListNodeAddress;
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           counter = 0;
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0))
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           {
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             counter++;
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             if(pNode == pPrevNode)
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             {
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               /*Insert the new node after the previous one */
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               pNewNode->CLAR = pNode->CLAR;
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               pNode->CLAR = (uint32_t)pNewNode; 
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               /* Increment the linked list node counter */
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               hmdma->LinkedListNodeCounter++;
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               nodeInserted = 1;
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             }
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             else
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             {
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             }
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           }
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           if(nodeInserted == 0)
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 16


 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             hal_status = HAL_ERROR;
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           }
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }      
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     else
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hal_status = HAL_ERROR;     
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process unlocked */
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma); 
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_READY;
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return hal_status; 
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process unlocked */
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma);
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Return error status */
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_BUSY;
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   } 
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Disconnect/Remove a node from the transfer linked list.
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                 the configuration information for the specified MDMA Channel.
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  pNode : Pointer to a MDMA_LinkNodeTypeDef structure that contains Linked list node 
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                 to be removed from the list.
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *p
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   MDMA_LinkNodeTypeDef *ptmpNode = 0;
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t counter = 0, nodeDeleted = 0;
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((hmdma == NULL) || (pNode == NULL))
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Change MDMA peripheral state */
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_BUSY;
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* If first and last node are null (no nodes in the list) : return error*/
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 17


 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0) || ((uint32_t)hmdma->LastLinkedListNodeAd
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hal_status = HAL_ERROR;
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     else if(hmdma->FirstLinkedListNodeAddress == pNode) /* Deleting first node */
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Delete 1st node */
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(hmdma->LastLinkedListNodeAddress == pNode)
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /*if the last node is at the same time the first one (1 single node after the init node 0)
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         then update the last node too */
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->FirstLinkedListNodeAddress = 0;
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->LastLinkedListNodeAddress  = 0;
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->LinkedListNodeCounter = 0;
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->Instance->CLAR = 0;
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       else
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         if((uint32_t)hmdma->FirstLinkedListNodeAddress == hmdma->LastLinkedListNodeAddress->CLAR)
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* if last node is looping to first (circular list) one update the last node connection *
 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           hmdma->LastLinkedListNodeAddress->CLAR = pNode->CLAR;
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* if deleting the first node after the initialization  
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         connect the next node to the node 0 by updating
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         the MDMA channel CLAR register to this node address */        
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->Instance->CLAR = pNode->CLAR;
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update the Handle node counter */
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->LinkedListNodeCounter--;        
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }     
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     else /* Deleting any other node */
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /*Deleted node is not the first one : find it  */      
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       ptmpNode = hmdma->FirstLinkedListNodeAddress;
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0))
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         counter++;
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         if(ptmpNode->CLAR == ((uint32_t)pNode))
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* if deleting the last node */
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           if(pNode == hmdma->LastLinkedListNodeAddress)
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           {
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             /*Update the linked list last node address in the handle*/
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             hmdma->LastLinkedListNodeAddress = ptmpNode;
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           }
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* update the next node link after deleting pMDMA_LinkedListNode */
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           ptmpNode->CLAR = pNode->CLAR;
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           nodeDeleted = 1;
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* Update the Handle node counter */
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           hmdma->LinkedListNodeCounter--;  
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         else
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 18


 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           ptmpNode = (MDMA_LinkNodeTypeDef *)ptmpNode->CLAR;
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(nodeDeleted == 0)
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* last node reashed without finding the node to delete : return error */
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hal_status = HAL_ERROR;
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process unlocked */
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma); 
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_READY;
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return hal_status; 
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process unlocked */
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma);
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Return error status */
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_BUSY;
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   } 
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Make the linked list circular by connecting the last node to the first.
 977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
 978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                 the configuration information for the specified MDMA Channel.
 979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
 984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
 987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
 995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Change MDMA peripheral state */
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_BUSY; 
 998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  
 999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* If first and last node are null (no nodes in the list) : return error*/
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0) || ((uint32_t)hmdma->LastLinkedListNodeAd
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hal_status = HAL_ERROR;
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 19


1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     else
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* to enable circular mode Last Node should be connected to first node */
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
1008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process unlocked */
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_UNLOCK(hmdma); 
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->State = HAL_MDMA_STATE_READY;
1015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return hal_status;  
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Disable the linked list circular mode by setting the last node connection to null
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                 the configuration information for the specified MDMA Channel.
1023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
1024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma)
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
1028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
1037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
1039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Change MDMA peripheral state */
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_BUSY; 
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  
1043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* If first and last node are null (no nodes in the list) : return error*/
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0) || ((uint32_t)hmdma->LastLinkedListNodeAd
1045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hal_status = HAL_ERROR;
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     else
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* to disable circular mode Last Node should be connected to NULL */
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->LastLinkedListNodeAddress->CLAR = 0;
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process unlocked */
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_UNLOCK(hmdma); 
1057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->State = HAL_MDMA_STATE_READY;
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 20


1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return hal_status;  
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @}
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup MDMA_Exported_Functions_Group3
1068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  *
1069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** @verbatim   
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  ===============================================================================
1071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                       #####  IO operation functions  #####
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  ===============================================================================  
1073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]  This section provides functions allowing to:
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Configure the source, destination address and data length and Start MDMA transfer
1075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Configure the source, destination address and data length and 
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           Start MDMA transfer with interrupt
1077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Abort MDMA transfer
1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Poll for transfer complete
1079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Generate a SW request (when Request is set to MDMA_REQUEST_SW)
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Handle MDMA interrupt request  
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** @endverbatim
1083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Starts the MDMA Transfer.
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma           : pointer to a MDMA_HandleTypeDef structure that contains
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                           the configuration information for the specified MDMA Stream.  
1090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  SrcAddress      : The source memory Buffer address
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  DstAddress      : The destination memory Buffer address
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  BlockDataLength : The length of a block transfer in bytes
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  BlockCount      : The number of a blocks to be transfer
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
1095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_Start (MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddre
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));  
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
1104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
1110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
1112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Change MDMA peripheral state */
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_BUSY;
1115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Initialize the error code */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 21


1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->ErrorCode = HAL_MDMA_ERROR_NONE; 
1118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Disable the peripheral */
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_DISABLE(hmdma);
1121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Configure the source, destination address and the data length */
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
1124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Enable the Peripheral */
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_ENABLE(hmdma);
1128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(hmdma->Init.Request == MDMA_REQUEST_SW)
1131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* activate If SW request mode*/
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }  
1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process unlocked */
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma);
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Return error status */
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_BUSY;
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return HAL_OK; 
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Starts the MDMA Transfer with interrupts enabled.
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma           : pointer to a MDMA_HandleTypeDef structure that contains
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                           the configuration information for the specified MDMA Stream.  
1152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  SrcAddress      : The source memory Buffer address
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  DstAddress      : The destination memory Buffer address
1154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  BlockDataLength : The length of a block transfer in bytes
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  BlockCount      : The number of a blocks to be transfer
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
1157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAdd
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_BLOCK_COUNT(BlockCount)); 
1163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Process locked */
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_LOCK(hmdma);
1172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_READY == hmdma->State)
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 22


1174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Change MDMA peripheral state */
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_BUSY;
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Initialize the error code */
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;     
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Disable the peripheral */
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_DISABLE(hmdma);
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Configure the source, destination address and the data length */
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(hmdma->XferBlockCpltCallback != NULL)
1191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* if Block transfer complete Callback is set enable the corresponding IT*/
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);    
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(hmdma->XferRepeatBlockCpltCallback != NULL)
1197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/      
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);    
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }  
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(hmdma->XferBufferCpltCallback != NULL)
1203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* if buffer transfer complete Callback is set enable the corresponding IT*/
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
1206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Enable the Peripheral */
1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_ENABLE(hmdma);
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(hmdma->Init.Request == MDMA_REQUEST_SW)
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* activate If SW request mode*/
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }  
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process unlocked */
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma);
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Return error status */
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_BUSY;
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return HAL_OK;
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** } 
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Aborts the MDMA Transfer.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 23


1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
1232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                 the configuration information for the specified MDMA Channel.
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                   
1234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @note  After disabling a MDMA Stream, a check for wait until the MDMA Channel is 
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *        effectively disabled is added. If a Stream is disabled 
1236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *        while a data transfer is ongoing, the current data will be transferred
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *        and the Stream will be effectively disabled only after the transfer of
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *        this single data is finished.  
1239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t tickstart =  HAL_GetTick();
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_BUSY != hmdma->State)
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process Unlocked */
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma);
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Disable all the transfer interrupts */
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFT
1264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Disable the channel */
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_DISABLE(hmdma);
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Check if the MDMA Channel is effectively disabled */
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0) 
1270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Check for the Timeout */
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code */
1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
1276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
1277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Process Unlocked */
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         __HAL_UNLOCK(hmdma);
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
1280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Change the MDMA state */
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->State = HAL_MDMA_STATE_ERROR;
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         return HAL_ERROR;
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Clear all interrupt flags */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 24


1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDM
1289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process Unlocked */
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma);
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Change the MDMA state*/
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_READY; 
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return HAL_OK; 
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Aborts the MDMA Transfer in Interrupt mode.
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
1303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                 the configuration information for the specified MDMA Channel.
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_BUSY != hmdma->State)
1315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Set Abort State  */
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_ABORT;
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Disable the stream */
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_DISABLE(hmdma);
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return HAL_OK;
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Polling for transfer complete.
1333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma:          pointer to a MDMA_HandleTypeDef structure that contains
1334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                        the configuration information for the specified MDMA Channel.
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  CompleteLevel: Specifies the MDMA level complete.  
1336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  Timeout:       Timeout duration.
1337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
1338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, uint32_t CompleteLevel, uint3
1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t levelFlag = 0, errorFlag = 0;
1342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t tickstart = 0;
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 25


1345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   assert_param(IS_MDMA_LEVEL_COMPLETE(CompleteLevel));
1346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
1349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
1352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(HAL_MDMA_STATE_BUSY != hmdma->State)
1354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* No transfer ongoing */
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
1357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
1360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Get the level transfer complete flag */
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER) ? MDMA_FLAG_CTC   :\
1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC :\
1364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   :\
1365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         MDMA_FLAG_BRT);
1366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Get timeout */
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   tickstart = HAL_GetTick();
1370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == RESET)
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != RESET))
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {      
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Get the transfer error source flag */
1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       errorFlag = hmdma->Instance->CESR;
1377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_TED) == 0)
1379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Read Transfer error  */
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
1382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       else
1384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Write Transfer error */
1386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;        
1387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_TEMD) != 0)
1390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Error Mask Data */
1392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
1393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_TELD) != 0)
1396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Error Linked list */
1398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
1399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_ASE) != 0)
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 26


1402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Address/Size alignment error */
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_BSE) != 0)
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Block Size error */
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }      
1412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       HAL_MDMA_Abort(hmdma); /* if error then abort the current transfer */
1414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /*
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         Note that the Abort function will 
1417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           - Clear the transfer error flags
1418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           - Unlock
1419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           - Set the State          
1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       */       
1421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       return HAL_ERROR;
1423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Check for the Timeout */
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(Timeout != HAL_MAX_DELAY)
1428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
1430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code */
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
1433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         HAL_MDMA_Abort(hmdma); /* if timeout then abort the current transfer */
1435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /*
1437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           Note that the Abort function will 
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             - Clear the transfer error flags
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             - Unlock
1440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             - Set the State          
1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         */
1442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         return HAL_ERROR;
1444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Clear the transfer level flag */
1449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
1452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else if(CompleteLevel == HAL_MDMA_BLOCK_TRANSFER)
1455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT));
1457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 27


1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else if(CompleteLevel == HAL_MDMA_REPEAT_BLOCK_TRANSFER)
1460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT | MDMA_FLAG_BRT));    
1462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }    
1463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else if(CompleteLevel == HAL_MDMA_FULL_TRANSFER)
1464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC | MDMA_FLAG_CTC));
1466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process unlocked */
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma); 
1469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_READY;
1471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return HAL_OK;
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Generate an MDMA SW request trigger to activate the request on the given Channel.
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
1479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                     the configuration information for the specified MDMA Stream.  
1480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
1481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma == NULL)
1486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
1488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((hmdma->Instance->CCR &  MDMA_CCR_EN) == RESET)
1491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* if no Transfer on going (MDMA enable bit not set) retrun error */
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;      
1495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != RESET) || ((hmdma->Instance->CTCR & MDMA_CT
1497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* if an MDMA ongoing request hase not yet ends or if request mode is not SW request retrun err
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;      
1501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Set the SW request bit to activate the request on the Channel */
1505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
1506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_OK;
1508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** } 
1510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Handles MDMA interrupt request.
1513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *               the configuration information for the specified MDMA Stream.  
1515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval None
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 28


1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
1518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __IO uint32_t count = 0;
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t timeout = SystemCoreClock / 9600;
1521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t generalIntFlag, errorFlag;
1523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* General Interrupt Flag management ****************************************/  
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   generalIntFlag =  1 << (((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((MDMA->GISR0 & generalIntFlag) == RESET)
1527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return; /* the  General interrupt flag for the current channel is down , nothing to do */
1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }    
1530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Transfer Error Interrupt management ***************************************/
1532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != RESET))
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != RESET)
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {      
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Disable the transfer error interrupt */
1537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
1538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Get the transfer error source flag */
1540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       errorFlag = hmdma->Instance->CESR;
1541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_TED) == 0)
1543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Read Transfer error  */
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
1546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       else
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Write Transfer error */
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;        
1551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_TEMD) != 0)
1554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Error Mask Data */
1556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
1557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_TELD) != 0)
1560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Error Linked list */
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
1563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_ASE) != 0)
1566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Address/Size alignment error */
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
1569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if((errorFlag & MDMA_CESR_BSE) != 0)
1572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 29


1573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update error code : Block Size error error */
1574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
1575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }       
1576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Clear the transfer error flags */
1578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);     
1579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Buffer Transfer Complete Interrupt management ******************************/
1583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != RESET))
1584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != RESET)
1586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Clear the buffer transfer complete flag */
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
1589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(hmdma->XferBufferCpltCallback != NULL)
1591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Buffer transfer callback */
1593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->XferBufferCpltCallback(hmdma);
1594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }          
1595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Block Transfer Complete Interrupt management ******************************/
1599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != RESET))
1600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != RESET)
1602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Clear the block transfer complete flag */
1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
1605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(hmdma->XferBlockCpltCallback != NULL)
1607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Block transfer callback */
1609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->XferBlockCpltCallback(hmdma);
1610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }          
1611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Repeated Block Transfer Complete Interrupt management ******************************/
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != RESET))
1616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != RESET)
1618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Clear the repeat block transfer complete flag */
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
1621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(hmdma->XferRepeatBlockCpltCallback != NULL)
1623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Repeated Block transfer callback */
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->XferRepeatBlockCpltCallback(hmdma);
1626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }          
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }   
1629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 30


1630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Channel Transfer Complete Interrupt management ***********************************/
1631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != RESET))
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != RESET)
1634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Disable all the transfer interrupts */
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_B
1637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(HAL_MDMA_STATE_ABORT == hmdma->State)
1639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Process Unlocked */
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         __HAL_UNLOCK(hmdma);
1642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
1643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Change the DMA state */
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->State = HAL_MDMA_STATE_READY;
1645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
1646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         if(hmdma->XferAbortCallback != NULL)
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           hmdma->XferAbortCallback(hmdma);
1649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
1650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         return;
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
1652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Clear the Channel Transfer Complete flag */
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
1655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Process Unlocked */
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       __HAL_UNLOCK(hmdma); 
1658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Change MDMA peripheral state */
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->State = HAL_MDMA_STATE_READY;
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if(hmdma->XferCpltCallback != NULL)
1663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Channel Transfer Complete callback */
1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->XferCpltCallback(hmdma);
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }          
1667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* manage error case */
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
1672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->State = HAL_MDMA_STATE_ABORT;
1674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Disable the channel */
1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_MDMA_DISABLE(hmdma);
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     do
1679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       if (++count > timeout)
1681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
1682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         break;
1683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
1684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     while((hmdma->Instance->CCR & MDMA_CCR_EN) != RESET);
1686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 31


1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Process Unlocked */
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     __HAL_UNLOCK(hmdma);
1689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if((hmdma->Instance->CCR & MDMA_CCR_EN) != RESET)
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Change the MDMA state to error if MDMA disable fails */
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->State = HAL_MDMA_STATE_ERROR;
1694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     else
1696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Change the MDMA state to Ready if MDMA disable success */
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->State = HAL_MDMA_STATE_READY;      
1699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     if (hmdma->XferErrorCallback != NULL)
1703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
1704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       /* Transfer error callback */
1705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferErrorCallback(hmdma);
1706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
1707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @}
1713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup MDMA_Exported_Functions_Group4
1716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  *
1717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** @verbatim
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  ===============================================================================
1719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                     ##### State and Errors functions #####
1720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  ===============================================================================
1721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     [..]
1722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     This subsection provides functions allowing to
1723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Check the MDMA state
1724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (+) Get error code
1725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** @endverbatim
1727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
1728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Returns the MDMA state.
1732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
1733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *               the configuration information for the specified MDMA Stream.
1734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL state
1735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma)
1737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return hmdma->State;
1739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Return the MDMA error code
1743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma : pointer to a MDMA_HandleTypeDef structure that contains
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 32


1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *              the configuration information for the specified MDMA Stream.
1745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval MDMA Error Code
1746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma)
1748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return hmdma->ErrorCode;
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @}
1754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @}
1758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /** @addtogroup JPEG_Private_Functions
1761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @{
1762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** /**
1765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @brief  Sets the MDMA Transfer parameter.
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
1767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   *                     the configuration information for the specified MDMA Stream.
1768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  SrcAddress: The source memory Buffer address
1769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  DstAddress: The destination memory Buffer address
1770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  BlockDataLength : The length of a block transfer in bytes
1771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @param  BlockCount: The number of a blocks to be transfer
1772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   * @retval HAL status
1773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   */
1774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uin
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
1776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t addressMask;
1777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Configure MDMA Channel data length */
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /*Configure the MDMA block repeat count*/
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   MODIFY_REG( hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1) << POSITION_VAL(MDMA_CB
1782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Clear all interrupt flags */
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MD
1785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Configure MDMA Channel destination address */
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CDAR = DstAddress; 
1788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Configure MDMA Channel Source address */
1790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CSAR = SrcAddress;
1791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   addressMask = SrcAddress & 0xFF000000U;
1793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
1794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*The AHBSbus is used as source (read operation) on channel x */
1796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;  
1797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*The AXI bus is used as source (read operation) on channel x */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 33


1801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);  
1802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   addressMask = DstAddress & 0xFF000000U;
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
1806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*The AHB bus is used as destination (write operation) on channel x */
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
1809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*The AXI bus is used as destination (write operation) on channel x */
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);  
1814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Set the linked list rgeitser to the first node of the list */
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;  
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
1819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
1821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** {
  26              		.loc 1 1821 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
1822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t blockoffset = 0;
1823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
1824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Prepare the MDMA Channel configuration */
1825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
  32              		.loc 1 1825 0
  33 0000 C368     		ldr	r3, [r0, #12]
  34 0002 0169     		ldr	r1, [r0, #16]
  35 0004 0268     		ldr	r2, [r0]
  36 0006 0B43     		orrs	r3, r3, r1
  37 0008 D360     		str	r3, [r2, #12]
1826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* write new CTCR Register value */
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc  | \
  38              		.loc 1 1828 0
  39 000a 4369     		ldr	r3, [r0, #20]
  40 000c 8269     		ldr	r2, [r0, #24]
  41 000e 1343     		orrs	r3, r3, r2
1829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize  | \
  42              		.loc 1 1829 0
  43 0010 C269     		ldr	r2, [r0, #28]
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize  | \
  44              		.loc 1 1828 0
  45 0012 1343     		orrs	r3, r3, r2
  46              		.loc 1 1829 0
  47 0014 026A     		ldr	r2, [r0, #32]
  48 0016 1343     		orrs	r3, r3, r2
1830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst   | \
  49              		.loc 1 1830 0
  50 0018 426A     		ldr	r2, [r0, #36]
1829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize  | \
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 34


  51              		.loc 1 1829 0
  52 001a 1343     		orrs	r3, r3, r2
  53              		.loc 1 1830 0
  54 001c C26A     		ldr	r2, [r0, #44]
  55 001e 1343     		orrs	r3, r3, r2
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.DestBurst      | \
  56              		.loc 1 1831 0
  57 0020 026B     		ldr	r2, [r0, #48]
1830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst   | \
  58              		.loc 1 1830 0
  59 0022 1343     		orrs	r3, r3, r2
1832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    ((hmdma->Init.BufferTransferLength - 1) << POSITION_VAL(MDMA_CTCR_TLEN)) | \
  60              		.loc 1 1832 0
  61 0024 826A     		ldr	r2, [r0, #40]
  62 0026 013A     		subs	r2, r2, #1
  63              	.LVL1:
  64              	.LBB18:
  65              	.LBB19:
  66              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     02. February 2017
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 35


  39:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  48:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  50:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wpacked"
  56:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wattributes"
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic pop
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT           struct __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  84:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 36


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 119:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 136:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 138:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 139:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 147:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 37


 153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 185:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 199:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 38


 210:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 242:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 246:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 39


 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 276:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 293:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 294:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 297:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 40


 324:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 335:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 336:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 337:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 340:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 347:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 374:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 376:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 380:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 41


 381:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 42


 438:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 487:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 489:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 494:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 43


 495:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 515:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 517:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 524:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 539:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 543:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 547:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 44


 552:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 561:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 566:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 570:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 581:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 591:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 602:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 607:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 45


 609:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 620:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 635:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0U);
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 659:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 662:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 46


 666:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 676:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 687:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 688:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 691:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 692:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("nop");
 697:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 709:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 718:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 719:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 720:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 47


 723:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 725:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 728:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 729:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("sev");
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 740:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 741:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 743:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 744:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 745:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 747:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 748:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 770:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 771:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 776:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 48


 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 792:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 798:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 813:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 822:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 823:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 824:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 49


 837:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 841:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 852:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  67              		.loc 2 857 0
  68 0028 4FF0FE71 		mov	r1, #33292288
  69              		.syntax unified
  70              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  71 002c 91FAA1F1 		rbit r1, r1
  72              	@ 0 "" 2
  73              	.LVL2:
  74              		.thumb
  75              		.syntax unified
  76              	.LBE19:
  77              	.LBE18:
  78              		.loc 1 1832 0
  79 0030 B1FA81F1 		clz	r1, r1
  80 0034 8A40     		lsls	r2, r2, r1
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    ((hmdma->Init.BufferTransferLength - 1) << POSITION_VAL(MDMA_CTCR_TLEN)) | \
  81              		.loc 1 1831 0
  82 0036 1343     		orrs	r3, r3, r2
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.TransferTriggerMode;
  83              		.loc 1 1833 0
  84 0038 8168     		ldr	r1, [r0, #8]
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize  | \
  85              		.loc 1 1828 0
  86 003a 0268     		ldr	r2, [r0]
1832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.TransferTriggerMode;
  87              		.loc 1 1832 0
  88 003c 0B43     		orrs	r3, r3, r1
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****                    hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize  | \
  89              		.loc 1 1828 0
  90 003e 1361     		str	r3, [r2, #16]
1834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* If SW request set the CTCR register to SW Request Mode*/
1836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma->Init.Request == MDMA_REQUEST_SW)
  91              		.loc 1 1836 0
  92 0040 4368     		ldr	r3, [r0, #4]
  93 0042 B3F1804F 		cmp	r3, #1073741824
  94 0046 21D0     		beq	.L9
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 50


  95              	.L2:
1837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* 
1839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     -If the request is done by SW : BWM could be set to 1 or 0.
1840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     -If the request is done by a peripheral :
1841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     If mask address not set (0) => BWM must be set to 0
1842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     If mask address set (different than 0) => BWM could be set to 1 or 0
1843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     */   
1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
1845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   } 
1846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****    
1847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Reset CBNDTR Register */ 
1848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CBNDTR = 0;
  96              		.loc 1 1848 0
  97 0048 0368     		ldr	r3, [r0]
  98 004a 0022     		movs	r2, #0
  99 004c 5A61     		str	r2, [r3, #20]
1849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* if block source address offset is negative set the Block Repeat Source address Update Mode to 
1851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma->Init.SourceBlockAddressOffset < 0)
 100              		.loc 1 1851 0
 101 004e 436B     		ldr	r3, [r0, #52]
 102 0050 9342     		cmp	r3, r2
 103 0052 21DB     		blt	.L10
1852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
1854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : source repeat block offset */
1855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     blockoffset = (-1 * hmdma->Init.SourceBlockAddressOffset);
1856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
1857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : source repeat block offset */     
1861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);    
 104              		.loc 1 1861 0
 105 0054 0268     		ldr	r2, [r0]
 106 0056 9BB2     		uxth	r3, r3
 107 0058 1362     		str	r3, [r2, #32]
 108              	.LVL3:
 109              	.L4:
1862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* if block destination address offset is negative set the Block Repeat destination address Updat
1865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma->Init.DestBlockAddressOffset < 0)
 110              		.loc 1 1865 0
 111 005a 836B     		ldr	r3, [r0, #56]
 112 005c 002B     		cmp	r3, #0
 113 005e 26DB     		blt	.L11
1866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
1868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : destination repeat block offset */
1869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     blockoffset = (-1 * hmdma->Init.DestBlockAddressOffset);
1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << POSITION_VAL(MDMA_CBRUR_DUV));    
1871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else
1873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : destination repeat block offset */     
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 51


1875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CBRUR |= (((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << POS
 114              		.loc 1 1875 0
 115 0060 9BB2     		uxth	r3, r3
 116              	.LVL4:
 117              	.LBB20:
 118              	.LBB21:
 119              		.loc 2 857 0
 120 0062 1E4A     		ldr	r2, .L12
 121              		.syntax unified
 122              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 123 0064 92FAA2F2 		rbit r2, r2
 124              	@ 0 "" 2
 125              	.LVL5:
 126              		.thumb
 127              		.syntax unified
 128              	.LBE21:
 129              	.LBE20:
 130              		.loc 1 1875 0
 131 0068 B2FA82F2 		clz	r2, r2
 132 006c 9340     		lsls	r3, r3, r2
 133 006e 0168     		ldr	r1, [r0]
 134 0070 0A6A     		ldr	r2, [r1, #32]
 135 0072 1343     		orrs	r3, r3, r2
 136 0074 0B62     		str	r3, [r1, #32]
 137              	.L6:
1876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }   
1877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
1879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if(hmdma->Init.Request != MDMA_REQUEST_SW)
 138              		.loc 1 1879 0
 139 0076 4368     		ldr	r3, [r0, #4]
 140 0078 B3F1804F 		cmp	r3, #1073741824
 141 007c 2AD0     		beq	.L7
1880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Set the HW request in CTRB register  */
1882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;      
 142              		.loc 1 1882 0
 143 007e 0268     		ldr	r2, [r0]
 144 0080 DBB2     		uxtb	r3, r3
 145 0082 9362     		str	r3, [r2, #40]
 146              	.L8:
1883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   else /* SW request : reset the CTBR register */
1885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CTBR = 0;
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
1888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
1889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /*Write Link Address Register*/
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CLAR =  0;
 147              		.loc 1 1890 0
 148 0084 0368     		ldr	r3, [r0]
 149 0086 0022     		movs	r2, #0
 150 0088 5A62     		str	r2, [r3, #36]
1891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 151              		.loc 1 1891 0
 152 008a 7047     		bx	lr
 153              	.LVL6:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 52


 154              	.L9:
1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   } 
 155              		.loc 1 1844 0
 156 008c 0268     		ldr	r2, [r0]
 157 008e 1369     		ldr	r3, [r2, #16]
 158 0090 43F04043 		orr	r3, r3, #-1073741824
 159 0094 1361     		str	r3, [r2, #16]
 160 0096 D7E7     		b	.L2
 161              	.L10:
1853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : source repeat block offset */
 162              		.loc 1 1853 0
 163 0098 0268     		ldr	r2, [r0]
 164 009a 5369     		ldr	r3, [r2, #20]
 165 009c 43F48023 		orr	r3, r3, #262144
 166 00a0 5361     		str	r3, [r2, #20]
1855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 167              		.loc 1 1855 0
 168 00a2 436B     		ldr	r3, [r0, #52]
 169 00a4 5B42     		negs	r3, r3
 170              	.LVL7:
1856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 171              		.loc 1 1856 0
 172 00a6 0268     		ldr	r2, [r0]
 173 00a8 9BB2     		uxth	r3, r3
 174              	.LVL8:
 175 00aa 1362     		str	r3, [r2, #32]
 176              	.LVL9:
 177 00ac D5E7     		b	.L4
 178              	.L11:
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : destination repeat block offset */
 179              		.loc 1 1867 0
 180 00ae 0268     		ldr	r2, [r0]
 181 00b0 5369     		ldr	r3, [r2, #20]
 182 00b2 43F40023 		orr	r3, r3, #524288
 183 00b6 5361     		str	r3, [r2, #20]
1869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << POSITION_VAL(MDMA_CBRUR_DUV));    
 184              		.loc 1 1869 0
 185 00b8 836B     		ldr	r3, [r0, #56]
 186 00ba 5B42     		negs	r3, r3
 187              	.LVL10:
1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 188              		.loc 1 1870 0
 189 00bc 9BB2     		uxth	r3, r3
 190              	.LVL11:
 191              	.LBB22:
 192              	.LBB23:
 193              		.loc 2 857 0
 194 00be 074A     		ldr	r2, .L12
 195              		.syntax unified
 196              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 197 00c0 92FAA2F2 		rbit r2, r2
 198              	@ 0 "" 2
 199              	.LVL12:
 200              		.thumb
 201              		.syntax unified
 202              	.LBE23:
 203              	.LBE22:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 53


1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 204              		.loc 1 1870 0
 205 00c4 B2FA82F2 		clz	r2, r2
 206 00c8 9340     		lsls	r3, r3, r2
 207 00ca 0168     		ldr	r1, [r0]
 208 00cc 0A6A     		ldr	r2, [r1, #32]
 209 00ce 1343     		orrs	r3, r3, r2
 210 00d0 0B62     		str	r3, [r1, #32]
 211              	.LVL13:
 212 00d2 D0E7     		b	.L6
 213              	.L7:
1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 214              		.loc 1 1886 0
 215 00d4 0368     		ldr	r3, [r0]
 216 00d6 0022     		movs	r2, #0
 217 00d8 9A62     		str	r2, [r3, #40]
 218 00da D3E7     		b	.L8
 219              	.L13:
 220              		.align	2
 221              	.L12:
 222 00dc 0000FFFF 		.word	-65536
 223              		.cfi_endproc
 224              	.LFE157:
 226              		.section	.text.MDMA_SetConfig,"ax",%progbits
 227              		.align	1
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu fpv5-d16
 233              	MDMA_SetConfig:
 234              	.LFB156:
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t addressMask;
 235              		.loc 1 1775 0
 236              		.cfi_startproc
 237              		@ args = 4, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240              	.LVL14:
 241 0000 F0B4     		push	{r4, r5, r6, r7}
 242              	.LCFI0:
 243              		.cfi_def_cfa_offset 16
 244              		.cfi_offset 4, -16
 245              		.cfi_offset 5, -12
 246              		.cfi_offset 6, -8
 247              		.cfi_offset 7, -4
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 248              		.loc 1 1778 0
 249 0002 0568     		ldr	r5, [r0]
 250 0004 6E69     		ldr	r6, [r5, #20]
 251 0006 224C     		ldr	r4, .L21
 252 0008 3440     		ands	r4, r4, r6
 253 000a C3F31003 		ubfx	r3, r3, #0, #17
 254              	.LVL15:
 255 000e 1C43     		orrs	r4, r4, r3
 256 0010 6C61     		str	r4, [r5, #20]
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 257              		.loc 1 1781 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 54


 258 0012 0668     		ldr	r6, [r0]
 259 0014 7469     		ldr	r4, [r6, #20]
 260 0016 C4F31304 		ubfx	r4, r4, #0, #20
 261 001a 049B     		ldr	r3, [sp, #16]
 262 001c 013B     		subs	r3, r3, #1
 263              	.LVL16:
 264              	.LBB24:
 265              	.LBB25:
 266              		.loc 2 857 0
 267 001e 1D4F     		ldr	r7, .L21+4
 268              		.syntax unified
 269              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 270 0020 97FAA7F5 		rbit r5, r7
 271              	@ 0 "" 2
 272              	.LVL17:
 273              		.thumb
 274              		.syntax unified
 275              	.LBE25:
 276              	.LBE24:
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 277              		.loc 1 1781 0
 278 0024 B5FA85F5 		clz	r5, r5
 279 0028 AB40     		lsls	r3, r3, r5
 280 002a 3B40     		ands	r3, r3, r7
 281 002c 2343     		orrs	r3, r3, r4
 282 002e 7361     		str	r3, [r6, #20]
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 283              		.loc 1 1784 0
 284 0030 0368     		ldr	r3, [r0]
 285 0032 1F24     		movs	r4, #31
 286 0034 5C60     		str	r4, [r3, #4]
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 287              		.loc 1 1787 0
 288 0036 0368     		ldr	r3, [r0]
 289 0038 DA61     		str	r2, [r3, #28]
1790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 290              		.loc 1 1790 0
 291 003a 0368     		ldr	r3, [r0]
 292 003c 9961     		str	r1, [r3, #24]
1792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 293              		.loc 1 1792 0
 294 003e 01F07F41 		and	r1, r1, #-16777216
 295              	.LVL18:
1793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 296              		.loc 1 1793 0
 297 0042 0029     		cmp	r1, #0
 298 0044 18BF     		it	ne
 299 0046 B1F1005F 		cmpne	r1, #536870912
 300 004a 15D1     		bne	.L15
1796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 301              		.loc 1 1796 0
 302 004c 0168     		ldr	r1, [r0]
 303              	.LVL19:
 304 004e 8B6A     		ldr	r3, [r1, #40]
 305              	.LVL20:
 306 0050 43F48033 		orr	r3, r3, #65536
 307 0054 8B62     		str	r3, [r1, #40]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 55


 308              	.L16:
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 309              		.loc 1 1804 0
 310 0056 02F07F42 		and	r2, r2, #-16777216
 311              	.LVL21:
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 312              		.loc 1 1805 0
 313 005a 002A     		cmp	r2, #0
 314 005c 18BF     		it	ne
 315 005e B2F1005F 		cmpne	r2, #536870912
 316 0062 0FD0     		beq	.L20
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 317              		.loc 1 1813 0
 318 0064 0268     		ldr	r2, [r0]
 319              	.LVL22:
 320 0066 936A     		ldr	r3, [r2, #40]
 321 0068 23F40033 		bic	r3, r3, #131072
 322 006c 9362     		str	r3, [r2, #40]
 323              	.L18:
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 324              		.loc 1 1817 0
 325 006e C26D     		ldr	r2, [r0, #92]
 326 0070 0368     		ldr	r3, [r0]
 327 0072 5A62     		str	r2, [r3, #36]
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 328              		.loc 1 1818 0
 329 0074 F0BC     		pop	{r4, r5, r6, r7}
 330              	.LCFI1:
 331              		.cfi_remember_state
 332              		.cfi_restore 7
 333              		.cfi_restore 6
 334              		.cfi_restore 5
 335              		.cfi_restore 4
 336              		.cfi_def_cfa_offset 0
 337              	.LVL23:
 338 0076 7047     		bx	lr
 339              	.LVL24:
 340              	.L15:
 341              	.LCFI2:
 342              		.cfi_restore_state
1801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 343              		.loc 1 1801 0
 344 0078 0168     		ldr	r1, [r0]
 345              	.LVL25:
 346 007a 8B6A     		ldr	r3, [r1, #40]
 347              	.LVL26:
 348 007c 23F48033 		bic	r3, r3, #65536
 349 0080 8B62     		str	r3, [r1, #40]
 350 0082 E8E7     		b	.L16
 351              	.LVL27:
 352              	.L20:
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 353              		.loc 1 1808 0
 354 0084 0268     		ldr	r2, [r0]
 355              	.LVL28:
 356 0086 936A     		ldr	r3, [r2, #40]
 357 0088 43F40033 		orr	r3, r3, #131072
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 56


 358 008c 9362     		str	r3, [r2, #40]
 359 008e EEE7     		b	.L18
 360              	.L22:
 361              		.align	2
 362              	.L21:
 363 0090 0000FEFF 		.word	-131072
 364 0094 0000F0FF 		.word	-1048576
 365              		.cfi_endproc
 366              	.LFE156:
 368              		.section	.text.HAL_MDMA_Init,"ax",%progbits
 369              		.align	1
 370              		.global	HAL_MDMA_Init
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 374              		.fpu fpv5-d16
 376              	HAL_MDMA_Init:
 377              	.LFB137:
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t tickstart = HAL_GetTick();
 378              		.loc 1 236 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              	.LVL29:
 383 0000 38B5     		push	{r3, r4, r5, lr}
 384              	.LCFI3:
 385              		.cfi_def_cfa_offset 16
 386              		.cfi_offset 3, -16
 387              		.cfi_offset 4, -12
 388              		.cfi_offset 5, -8
 389              		.cfi_offset 14, -4
 390 0002 0446     		mov	r4, r0
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 391              		.loc 1 237 0
 392 0004 FFF7FEFF 		bl	HAL_GetTick
 393              	.LVL30:
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 394              		.loc 1 240 0
 395 0008 44B3     		cbz	r4, .L27
 396 000a 0546     		mov	r5, r0
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 397              		.loc 1 264 0
 398 000c 0023     		movs	r3, #0
 399 000e 84F83C30 		strb	r3, [r4, #60]
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 400              		.loc 1 267 0
 401 0012 0223     		movs	r3, #2
 402 0014 84F83D30 		strb	r3, [r4, #61]
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 403              		.loc 1 270 0
 404 0018 2268     		ldr	r2, [r4]
 405 001a D368     		ldr	r3, [r2, #12]
 406 001c 23F00103 		bic	r3, r3, #1
 407 0020 D360     		str	r3, [r2, #12]
 408              	.LVL31:
 409              	.L25:
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 57


 410              		.loc 1 273 0
 411 0022 2368     		ldr	r3, [r4]
 412 0024 DB68     		ldr	r3, [r3, #12]
 413 0026 13F0010F 		tst	r3, #1
 414 002a 0BD0     		beq	.L29
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 415              		.loc 1 276 0
 416 002c FFF7FEFF 		bl	HAL_GetTick
 417              	.LVL32:
 418 0030 401B     		subs	r0, r0, r5
 419 0032 0528     		cmp	r0, #5
 420 0034 F5D9     		bls	.L25
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 421              		.loc 1 279 0
 422 0036 4023     		movs	r3, #64
 423 0038 A366     		str	r3, [r4, #104]
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 424              		.loc 1 282 0
 425 003a 0323     		movs	r3, #3
 426 003c 84F83D30 		strb	r3, [r4, #61]
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 427              		.loc 1 284 0
 428 0040 0120     		movs	r0, #1
 429 0042 0AE0     		b	.L24
 430              	.L29:
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 431              		.loc 1 289 0
 432 0044 2046     		mov	r0, r4
 433 0046 FFF7FEFF 		bl	MDMA_Init
 434              	.LVL33:
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->LastLinkedListNodeAddress   = 0; 
 435              		.loc 1 292 0
 436 004a 0020     		movs	r0, #0
 437 004c E065     		str	r0, [r4, #92]
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->LinkedListNodeCounter  = 0;  
 438              		.loc 1 293 0
 439 004e 2066     		str	r0, [r4, #96]
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 440              		.loc 1 294 0
 441 0050 6066     		str	r0, [r4, #100]
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 442              		.loc 1 297 0
 443 0052 A066     		str	r0, [r4, #104]
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 444              		.loc 1 300 0
 445 0054 0123     		movs	r3, #1
 446 0056 84F83D30 		strb	r3, [r4, #61]
 447              	.LVL34:
 448              	.L24:
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 449              		.loc 1 303 0
 450 005a 38BD     		pop	{r3, r4, r5, pc}
 451              	.LVL35:
 452              	.L27:
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 453              		.loc 1 242 0
 454 005c 0120     		movs	r0, #1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 58


 455              	.LVL36:
 456 005e FCE7     		b	.L24
 457              		.cfi_endproc
 458              	.LFE137:
 460              		.section	.text.HAL_MDMA_DeInit,"ax",%progbits
 461              		.align	1
 462              		.global	HAL_MDMA_DeInit
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv5-d16
 468              	HAL_MDMA_DeInit:
 469              	.LFB138:
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 470              		.loc 1 312 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475              	.LVL37:
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 476              		.loc 1 315 0
 477 0000 0346     		mov	r3, r0
 478 0002 0028     		cmp	r0, #0
 479 0004 2FD0     		beq	.L33
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 480              		.loc 1 321 0
 481 0006 90F83D20 		ldrb	r2, [r0, #61]	@ zero_extendqisi2
 482 000a D2B2     		uxtb	r2, r2
 483 000c 022A     		cmp	r2, #2
 484 000e 25D0     		beq	.L34
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 485              		.loc 1 328 0
 486 0010 0168     		ldr	r1, [r0]
 487 0012 CA68     		ldr	r2, [r1, #12]
 488 0014 22F00102 		bic	r2, r2, #1
 489 0018 CA60     		str	r2, [r1, #12]
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CTCR = 0;
 490              		.loc 1 331 0
 491 001a 0268     		ldr	r2, [r0]
 492 001c 0020     		movs	r0, #0
 493              	.LVL38:
 494 001e D060     		str	r0, [r2, #12]
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CBNDTR = 0;
 495              		.loc 1 332 0
 496 0020 1A68     		ldr	r2, [r3]
 497 0022 1061     		str	r0, [r2, #16]
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CSAR = 0;
 498              		.loc 1 333 0
 499 0024 1A68     		ldr	r2, [r3]
 500 0026 5061     		str	r0, [r2, #20]
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CDAR = 0;  
 501              		.loc 1 334 0
 502 0028 1A68     		ldr	r2, [r3]
 503 002a 9061     		str	r0, [r2, #24]
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CBRUR = 0;
 504              		.loc 1 335 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 59


 505 002c 1A68     		ldr	r2, [r3]
 506 002e D061     		str	r0, [r2, #28]
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CLAR = 0;
 507              		.loc 1 336 0
 508 0030 1A68     		ldr	r2, [r3]
 509 0032 1062     		str	r0, [r2, #32]
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CTBR = 0;
 510              		.loc 1 337 0
 511 0034 1A68     		ldr	r2, [r3]
 512 0036 5062     		str	r0, [r2, #36]
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CMAR = 0;
 513              		.loc 1 338 0
 514 0038 1A68     		ldr	r2, [r3]
 515 003a 9062     		str	r0, [r2, #40]
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->Instance->CMDR = 0;
 516              		.loc 1 339 0
 517 003c 1A68     		ldr	r2, [r3]
 518 003e 1063     		str	r0, [r2, #48]
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 519              		.loc 1 340 0
 520 0040 1A68     		ldr	r2, [r3]
 521 0042 5063     		str	r0, [r2, #52]
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 522              		.loc 1 343 0
 523 0044 1A68     		ldr	r2, [r3]
 524 0046 1F21     		movs	r1, #31
 525 0048 5160     		str	r1, [r2, #4]
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->LastLinkedListNodeAddress   = 0; 
 526              		.loc 1 346 0
 527 004a D865     		str	r0, [r3, #92]
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   hmdma->LinkedListNodeCounter  = 0; 
 528              		.loc 1 347 0
 529 004c 1866     		str	r0, [r3, #96]
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 530              		.loc 1 348 0
 531 004e 5866     		str	r0, [r3, #100]
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 532              		.loc 1 351 0
 533 0050 9866     		str	r0, [r3, #104]
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 534              		.loc 1 354 0
 535 0052 83F83D00 		strb	r0, [r3, #61]
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 536              		.loc 1 357 0
 537 0056 83F83C00 		strb	r0, [r3, #60]
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 538              		.loc 1 359 0
 539 005a 7047     		bx	lr
 540              	.LVL39:
 541              	.L34:
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 542              		.loc 1 323 0
 543 005c 4FF48072 		mov	r2, #256
 544 0060 8266     		str	r2, [r0, #104]
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 545              		.loc 1 324 0
 546 0062 0120     		movs	r0, #1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 60


 547              	.LVL40:
 548 0064 7047     		bx	lr
 549              	.LVL41:
 550              	.L33:
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 551              		.loc 1 317 0
 552 0066 0120     		movs	r0, #1
 553              	.LVL42:
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 554              		.loc 1 360 0
 555 0068 7047     		bx	lr
 556              		.cfi_endproc
 557              	.LFE138:
 559              		.section	.text.HAL_MDMA_ConfigPostRequestMask,"ax",%progbits
 560              		.align	1
 561              		.global	HAL_MDMA_ConfigPostRequestMask
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 565              		.fpu fpv5-d16
 567              	HAL_MDMA_ConfigPostRequestMask:
 568              	.LFB139:
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef  status = HAL_OK;
 569              		.loc 1 372 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL43:
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 575              		.loc 1 376 0
 576 0000 80B3     		cbz	r0, .L39
 577 0002 0346     		mov	r3, r0
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 578              		.loc 1 382 0
 579 0004 90F83C00 		ldrb	r0, [r0, #60]	@ zero_extendqisi2
 580              	.LVL44:
 581 0008 0128     		cmp	r0, #1
 582 000a 2DD0     		beq	.L40
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 583              		.loc 1 382 0 is_stmt 0 discriminator 2
 584 000c 0120     		movs	r0, #1
 585 000e 83F83C00 		strb	r0, [r3, #60]
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 586              		.loc 1 384 0 is_stmt 1 discriminator 2
 587 0012 93F83D00 		ldrb	r0, [r3, #61]	@ zero_extendqisi2
 588 0016 C0B2     		uxtb	r0, r0
 589 0018 0128     		cmp	r0, #1
 590 001a 04D0     		beq	.L48
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 591              		.loc 1 417 0
 592 001c 0120     		movs	r0, #1
 593              	.LVL45:
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 594              		.loc 1 420 0
 595 001e 0022     		movs	r2, #0
 596              	.LVL46:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 61


 597 0020 83F83C20 		strb	r2, [r3, #60]
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 598              		.loc 1 423 0
 599 0024 7047     		bx	lr
 600              	.LVL47:
 601              	.L48:
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef  status = HAL_OK;
 602              		.loc 1 372 0
 603 0026 10B4     		push	{r4}
 604              	.LCFI4:
 605              		.cfi_def_cfa_offset 4
 606              		.cfi_offset 4, -4
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 607              		.loc 1 387 0
 608 0028 1868     		ldr	r0, [r3]
 609 002a 0469     		ldr	r4, [r0, #16]
 610 002c 14F0804F 		tst	r4, #1073741824
 611 0030 11D1     		bne	.L42
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->Instance->CMDR = MaskData;
 612              		.loc 1 390 0
 613 0032 0163     		str	r1, [r0, #48]
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 614              		.loc 1 391 0
 615 0034 1868     		ldr	r0, [r3]
 616 0036 4263     		str	r2, [r0, #52]
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 617              		.loc 1 399 0
 618 0038 31B9     		cbnz	r1, .L38
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 619              		.loc 1 401 0
 620 003a 1968     		ldr	r1, [r3]
 621              	.LVL48:
 622 003c 0A69     		ldr	r2, [r1, #16]
 623              	.LVL49:
 624 003e 22F00042 		bic	r2, r2, #-2147483648
 625 0042 0A61     		str	r2, [r1, #16]
 626              	.LVL50:
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 627              		.loc 1 373 0
 628 0044 0020     		movs	r0, #0
 629 0046 07E0     		b	.L37
 630              	.LVL51:
 631              	.L38:
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 632              		.loc 1 405 0
 633 0048 1968     		ldr	r1, [r3]
 634              	.LVL52:
 635 004a 0A69     		ldr	r2, [r1, #16]
 636              	.LVL53:
 637 004c 42F00042 		orr	r2, r2, #-2147483648
 638 0050 0A61     		str	r2, [r1, #16]
 639              	.LVL54:
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 640              		.loc 1 373 0
 641 0052 0020     		movs	r0, #0
 642 0054 00E0     		b	.L37
 643              	.LVL55:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 62


 644              	.L42:
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 645              		.loc 1 411 0
 646 0056 0120     		movs	r0, #1
 647              	.LVL56:
 648              	.L37:
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 649              		.loc 1 420 0
 650 0058 0022     		movs	r2, #0
 651 005a 83F83C20 		strb	r2, [r3, #60]
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 652              		.loc 1 423 0
 653 005e 5DF8044B 		ldr	r4, [sp], #4
 654              	.LCFI5:
 655              		.cfi_restore 4
 656              		.cfi_def_cfa_offset 0
 657 0062 7047     		bx	lr
 658              	.LVL57:
 659              	.L39:
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 660              		.loc 1 378 0
 661 0064 0120     		movs	r0, #1
 662              	.LVL58:
 663 0066 7047     		bx	lr
 664              	.LVL59:
 665              	.L40:
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 666              		.loc 1 382 0
 667 0068 0220     		movs	r0, #2
 668 006a 7047     		bx	lr
 669              		.cfi_endproc
 670              	.LFE139:
 672              		.section	.text.HAL_MDMA_RegisterCallback,"ax",%progbits
 673              		.align	1
 674              		.global	HAL_MDMA_RegisterCallback
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu fpv5-d16
 680              	HAL_MDMA_RegisterCallback:
 681              	.LFB140:
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef status = HAL_OK;
 682              		.loc 1 434 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 687              	.LVL60:
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 688              		.loc 1 438 0
 689 0000 0346     		mov	r3, r0
 690 0002 58B3     		cbz	r0, .L59
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 691              		.loc 1 444 0
 692 0004 90F83C00 		ldrb	r0, [r0, #60]	@ zero_extendqisi2
 693              	.LVL61:
 694 0008 0128     		cmp	r0, #1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 63


 695 000a 29D0     		beq	.L60
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 696              		.loc 1 444 0 is_stmt 0 discriminator 2
 697 000c 0120     		movs	r0, #1
 698 000e 83F83C00 		strb	r0, [r3, #60]
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 699              		.loc 1 446 0 is_stmt 1 discriminator 2
 700 0012 93F83D00 		ldrb	r0, [r3, #61]	@ zero_extendqisi2
 701 0016 C0B2     		uxtb	r0, r0
 702 0018 0128     		cmp	r0, #1
 703 001a 04D0     		beq	.L63
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 704              		.loc 1 481 0
 705 001c 0120     		movs	r0, #1
 706              	.L51:
 707              	.LVL62:
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 708              		.loc 1 485 0
 709 001e 0022     		movs	r2, #0
 710              	.LVL63:
 711 0020 83F83C20 		strb	r2, [r3, #60]
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 712              		.loc 1 487 0
 713 0024 7047     		bx	lr
 714              	.LVL64:
 715              	.L63:
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 716              		.loc 1 448 0
 717 0026 0529     		cmp	r1, #5
 718 0028 16D8     		bhi	.L62
 719 002a DFE801F0 		tbb	[pc, r1]
 720              	.L53:
 721 002e 03       		.byte	(.L52-.L53)/2
 722 002f 06       		.byte	(.L54-.L53)/2
 723 0030 09       		.byte	(.L55-.L53)/2
 724 0031 0C       		.byte	(.L56-.L53)/2
 725 0032 0F       		.byte	(.L57-.L53)/2
 726 0033 12       		.byte	(.L58-.L53)/2
 727              		.p2align 1
 728              	.L52:
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 729              		.loc 1 451 0
 730 0034 5A64     		str	r2, [r3, #68]
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 731              		.loc 1 435 0
 732 0036 0020     		movs	r0, #0
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 733              		.loc 1 452 0
 734 0038 F1E7     		b	.L51
 735              	.L54:
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 736              		.loc 1 455 0
 737 003a 9A64     		str	r2, [r3, #72]
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 738              		.loc 1 435 0
 739 003c 0020     		movs	r0, #0
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 64


 740              		.loc 1 456 0
 741 003e EEE7     		b	.L51
 742              	.L55:
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 743              		.loc 1 459 0
 744 0040 DA64     		str	r2, [r3, #76]
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 745              		.loc 1 435 0
 746 0042 0020     		movs	r0, #0
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 747              		.loc 1 460 0
 748 0044 EBE7     		b	.L51
 749              	.L56:
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 750              		.loc 1 463 0
 751 0046 1A65     		str	r2, [r3, #80]
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 752              		.loc 1 435 0
 753 0048 0020     		movs	r0, #0
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 754              		.loc 1 464 0
 755 004a E8E7     		b	.L51
 756              	.L57:
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 757              		.loc 1 467 0
 758 004c 5A65     		str	r2, [r3, #84]
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 759              		.loc 1 435 0
 760 004e 0020     		movs	r0, #0
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 761              		.loc 1 468 0
 762 0050 E5E7     		b	.L51
 763              	.L58:
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 764              		.loc 1 471 0
 765 0052 9A65     		str	r2, [r3, #88]
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 766              		.loc 1 435 0
 767 0054 0020     		movs	r0, #0
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 768              		.loc 1 472 0
 769 0056 E2E7     		b	.L51
 770              	.L62:
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 771              		.loc 1 435 0
 772 0058 0020     		movs	r0, #0
 773 005a E0E7     		b	.L51
 774              	.LVL65:
 775              	.L59:
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 776              		.loc 1 440 0
 777 005c 0120     		movs	r0, #1
 778              	.LVL66:
 779 005e 7047     		bx	lr
 780              	.L60:
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 781              		.loc 1 444 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 65


 782 0060 0220     		movs	r0, #2
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 783              		.loc 1 488 0
 784 0062 7047     		bx	lr
 785              		.cfi_endproc
 786              	.LFE140:
 788              		.section	.text.HAL_MDMA_UnRegisterCallback,"ax",%progbits
 789              		.align	1
 790              		.global	HAL_MDMA_UnRegisterCallback
 791              		.syntax unified
 792              		.thumb
 793              		.thumb_func
 794              		.fpu fpv5-d16
 796              	HAL_MDMA_UnRegisterCallback:
 797              	.LFB141:
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef status = HAL_OK;
 798              		.loc 1 499 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803              	.LVL67:
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 804              		.loc 1 503 0
 805 0000 0346     		mov	r3, r0
 806 0002 0028     		cmp	r0, #0
 807 0004 34D0     		beq	.L75
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 808              		.loc 1 509 0
 809 0006 90F83C20 		ldrb	r2, [r0, #60]	@ zero_extendqisi2
 810 000a 012A     		cmp	r2, #1
 811 000c 32D0     		beq	.L76
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 812              		.loc 1 509 0 is_stmt 0 discriminator 2
 813 000e 0122     		movs	r2, #1
 814 0010 80F83C20 		strb	r2, [r0, #60]
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 815              		.loc 1 511 0 is_stmt 1 discriminator 2
 816 0014 90F83D20 		ldrb	r2, [r0, #61]	@ zero_extendqisi2
 817 0018 D2B2     		uxtb	r2, r2
 818 001a 012A     		cmp	r2, #1
 819 001c 04D0     		beq	.L79
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 820              		.loc 1 555 0
 821 001e 0120     		movs	r0, #1
 822              	.LVL68:
 823              	.L66:
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 824              		.loc 1 559 0
 825 0020 0022     		movs	r2, #0
 826 0022 83F83C20 		strb	r2, [r3, #60]
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 827              		.loc 1 561 0
 828 0026 7047     		bx	lr
 829              	.LVL69:
 830              	.L79:
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 66


 831              		.loc 1 513 0
 832 0028 0629     		cmp	r1, #6
 833 002a 1FD8     		bhi	.L78
 834 002c DFE801F0 		tbb	[pc, r1]
 835              	.L68:
 836 0030 04       		.byte	(.L67-.L68)/2
 837 0031 07       		.byte	(.L69-.L68)/2
 838 0032 0A       		.byte	(.L70-.L68)/2
 839 0033 0D       		.byte	(.L71-.L68)/2
 840 0034 10       		.byte	(.L72-.L68)/2
 841 0035 13       		.byte	(.L73-.L68)/2
 842 0036 16       		.byte	(.L74-.L68)/2
 843 0037 00       		.p2align 1
 844              	.L67:
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 845              		.loc 1 516 0
 846 0038 0020     		movs	r0, #0
 847              	.LVL70:
 848 003a 5864     		str	r0, [r3, #68]
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 849              		.loc 1 517 0
 850 003c F0E7     		b	.L66
 851              	.LVL71:
 852              	.L69:
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 853              		.loc 1 520 0
 854 003e 0020     		movs	r0, #0
 855              	.LVL72:
 856 0040 9864     		str	r0, [r3, #72]
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 857              		.loc 1 521 0
 858 0042 EDE7     		b	.L66
 859              	.LVL73:
 860              	.L70:
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 861              		.loc 1 524 0
 862 0044 0020     		movs	r0, #0
 863              	.LVL74:
 864 0046 D864     		str	r0, [r3, #76]
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 865              		.loc 1 525 0
 866 0048 EAE7     		b	.L66
 867              	.LVL75:
 868              	.L71:
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 869              		.loc 1 528 0
 870 004a 0020     		movs	r0, #0
 871              	.LVL76:
 872 004c 1865     		str	r0, [r3, #80]
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 873              		.loc 1 529 0
 874 004e E7E7     		b	.L66
 875              	.LVL77:
 876              	.L72:
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 877              		.loc 1 532 0
 878 0050 0020     		movs	r0, #0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 67


 879              	.LVL78:
 880 0052 5865     		str	r0, [r3, #84]
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 881              		.loc 1 533 0
 882 0054 E4E7     		b	.L66
 883              	.LVL79:
 884              	.L73:
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break; 
 885              		.loc 1 536 0
 886 0056 0020     		movs	r0, #0
 887              	.LVL80:
 888 0058 9865     		str	r0, [r3, #88]
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 889              		.loc 1 537 0
 890 005a E1E7     		b	.L66
 891              	.LVL81:
 892              	.L74:
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferBufferCpltCallback = NULL;
 893              		.loc 1 540 0
 894 005c 0020     		movs	r0, #0
 895              	.LVL82:
 896 005e 5864     		str	r0, [r3, #68]
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferBlockCpltCallback = NULL;
 897              		.loc 1 541 0
 898 0060 9864     		str	r0, [r3, #72]
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferRepeatBlockCpltCallback = NULL;
 899              		.loc 1 542 0
 900 0062 D864     		str	r0, [r3, #76]
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferErrorCallback = NULL;
 901              		.loc 1 543 0
 902 0064 1865     		str	r0, [r3, #80]
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       hmdma->XferAbortCallback = NULL;
 903              		.loc 1 544 0
 904 0066 5865     		str	r0, [r3, #84]
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break; 
 905              		.loc 1 545 0
 906 0068 9865     		str	r0, [r3, #88]
 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 907              		.loc 1 546 0
 908 006a D9E7     		b	.L66
 909              	.LVL83:
 910              	.L78:
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       break;
 911              		.loc 1 549 0
 912 006c 0120     		movs	r0, #1
 913              	.LVL84:
 914 006e D7E7     		b	.L66
 915              	.LVL85:
 916              	.L75:
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 917              		.loc 1 505 0
 918 0070 0120     		movs	r0, #1
 919              	.LVL86:
 920 0072 7047     		bx	lr
 921              	.LVL87:
 922              	.L76:
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 68


 923              		.loc 1 509 0
 924 0074 0220     		movs	r0, #2
 925              	.LVL88:
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 926              		.loc 1 562 0
 927 0076 7047     		bx	lr
 928              		.cfi_endproc
 929              	.LFE141:
 931              		.section	.text.HAL_MDMA_LinkedList_CreateNode,"ax",%progbits
 932              		.align	1
 933              		.global	HAL_MDMA_LinkedList_CreateNode
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 937              		.fpu fpv5-d16
 939              	HAL_MDMA_LinkedList_CreateNode:
 940              	.LFB142:
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t addressMask = 0;
 941              		.loc 1 593 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              		@ link register save eliminated.
 946              	.LVL89:
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 947              		.loc 1 598 0
 948 0000 0B46     		mov	r3, r1
 949 0002 B1FA81F1 		clz	r1, r1
 950              	.LVL90:
 951 0006 4909     		lsrs	r1, r1, #5
 952 0008 0028     		cmp	r0, #0
 953 000a 08BF     		it	eq
 954 000c 0121     		moveq	r1, #1
 955 000e 0029     		cmp	r1, #0
 956 0010 40F09880 		bne	.L91
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t addressMask = 0;
 957              		.loc 1 593 0
 958 0014 10B4     		push	{r4}
 959              	.LCFI6:
 960              		.cfi_def_cfa_offset 4
 961              		.cfi_offset 4, -4
 962 0016 0246     		mov	r2, r0
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 963              		.loc 1 624 0
 964 0018 4161     		str	r1, [r0, #20]
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CMAR   = 0;  
 965              		.loc 1 627 0
 966 001a 8161     		str	r1, [r0, #24]
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->CMDR   = 0;
 967              		.loc 1 628 0
 968 001c 0162     		str	r1, [r0, #32]
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   pNode->Reserved = 0;
 969              		.loc 1 629 0
 970 001e 4162     		str	r1, [r0, #36]
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 971              		.loc 1 630 0
 972 0020 C161     		str	r1, [r0, #28]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 69


 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize  | \
 973              		.loc 1 633 0
 974 0022 1969     		ldr	r1, [r3, #16]
 975 0024 5869     		ldr	r0, [r3, #20]
 976              	.LVL91:
 977 0026 0143     		orrs	r1, r1, r0
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst   | \
 978              		.loc 1 634 0
 979 0028 9869     		ldr	r0, [r3, #24]
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize  | \
 980              		.loc 1 633 0
 981 002a 0143     		orrs	r1, r1, r0
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst   | \
 982              		.loc 1 634 0
 983 002c D869     		ldr	r0, [r3, #28]
 984 002e 0143     		orrs	r1, r1, r0
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         pNodeConfig->Init.DestBurst  | \
 985              		.loc 1 635 0
 986 0030 186A     		ldr	r0, [r3, #32]
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst   | \
 987              		.loc 1 634 0
 988 0032 0143     		orrs	r1, r1, r0
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         pNodeConfig->Init.DestBurst  | \
 989              		.loc 1 635 0
 990 0034 986A     		ldr	r0, [r3, #40]
 991 0036 0143     		orrs	r1, r1, r0
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           ((pNodeConfig->Init.BufferTransferLength - 1) << POSITION_VAL(MDMA_CTCR_TLEN)) | \
 992              		.loc 1 636 0
 993 0038 D86A     		ldr	r0, [r3, #44]
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         pNodeConfig->Init.DestBurst  | \
 994              		.loc 1 635 0
 995 003a 0143     		orrs	r1, r1, r0
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             pNodeConfig->Init.TransferTriggerMode;
 996              		.loc 1 637 0
 997 003c 586A     		ldr	r0, [r3, #36]
 998 003e 0138     		subs	r0, r0, #1
 999              	.LVL92:
 1000              	.LBB26:
 1001              	.LBB27:
 1002              		.loc 2 857 0
 1003 0040 4FF0FE74 		mov	r4, #33292288
 1004              		.syntax unified
 1005              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1006 0044 94FAA4F4 		rbit r4, r4
 1007              	@ 0 "" 2
 1008              	.LVL93:
 1009              		.thumb
 1010              		.syntax unified
 1011              	.LBE27:
 1012              	.LBE26:
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             pNodeConfig->Init.TransferTriggerMode;
 1013              		.loc 1 637 0
 1014 0048 B4FA84F4 		clz	r4, r4
 1015 004c A040     		lsls	r0, r0, r4
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           ((pNodeConfig->Init.BufferTransferLength - 1) << POSITION_VAL(MDMA_CTCR_TLEN)) | \
 1016              		.loc 1 636 0
 1017 004e 0143     		orrs	r1, r1, r0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 70


 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1018              		.loc 1 638 0
 1019 0050 5868     		ldr	r0, [r3, #4]
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             pNodeConfig->Init.TransferTriggerMode;
 1020              		.loc 1 637 0
 1021 0052 0143     		orrs	r1, r1, r0
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize  | \
 1022              		.loc 1 633 0
 1023 0054 1160     		str	r1, [r2]
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1024              		.loc 1 641 0
 1025 0056 1968     		ldr	r1, [r3]
 1026 0058 B1F1804F 		cmp	r1, #1073741824
 1027 005c 53D0     		beq	.L97
 1028              	.L82:
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1029              		.loc 1 652 0
 1030 005e 1968     		ldr	r1, [r3]
 1031 0060 B1F1804F 		cmp	r1, #1073741824
 1032 0064 01D0     		beq	.L83
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1033              		.loc 1 652 0 is_stmt 0 discriminator 1
 1034 0066 996C     		ldr	r1, [r3, #72]
 1035 0068 19B1     		cbz	r1, .L84
 1036              	.L83:
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1037              		.loc 1 654 0 is_stmt 1
 1038 006a 1168     		ldr	r1, [r2]
 1039 006c 41F00041 		orr	r1, r1, #-2147483648
 1040 0070 1160     		str	r1, [r2]
 1041              	.L84:
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1042              		.loc 1 658 0
 1043 0072 596C     		ldr	r1, [r3, #68]
 1044 0074 0139     		subs	r1, r1, #1
 1045              	.LVL94:
 1046              	.LBB28:
 1047              	.LBB29:
 1048              		.loc 2 857 0
 1049 0076 354C     		ldr	r4, .L100
 1050              		.syntax unified
 1051              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1052 0078 94FAA4F0 		rbit r0, r4
 1053              	@ 0 "" 2
 1054              	.LVL95:
 1055              		.thumb
 1056              		.syntax unified
 1057              	.LBE29:
 1058              	.LBE28:
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1059              		.loc 1 658 0
 1060 007c B0FA80F0 		clz	r0, r0
 1061 0080 8140     		lsls	r1, r1, r0
 1062 0082 2140     		ands	r1, r1, r4
 1063 0084 5160     		str	r1, [r2, #4]
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1064              		.loc 1 661 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 71


 1065 0086 196B     		ldr	r1, [r3, #48]
 1066 0088 0029     		cmp	r1, #0
 1067 008a 41DB     		blt	.L98
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }    
 1068              		.loc 1 671 0
 1069 008c 89B2     		uxth	r1, r1
 1070 008e 1161     		str	r1, [r2, #16]
 1071              	.LVL96:
 1072              	.L86:
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1073              		.loc 1 675 0
 1074 0090 596B     		ldr	r1, [r3, #52]
 1075 0092 0029     		cmp	r1, #0
 1076 0094 45DB     		blt	.L99
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }    
 1077              		.loc 1 685 0
 1078 0096 89B2     		uxth	r1, r1
 1079              	.LVL97:
 1080              	.LBB30:
 1081              	.LBB31:
 1082              		.loc 2 857 0
 1083 0098 2D48     		ldr	r0, .L100+4
 1084              		.syntax unified
 1085              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1086 009a 90FAA0F0 		rbit r0, r0
 1087              	@ 0 "" 2
 1088              	.LVL98:
 1089              		.thumb
 1090              		.syntax unified
 1091              	.LBE31:
 1092              	.LBE30:
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }    
 1093              		.loc 1 685 0
 1094 009e B0FA80F0 		clz	r0, r0
 1095 00a2 8140     		lsls	r1, r1, r0
 1096 00a4 1069     		ldr	r0, [r2, #16]
 1097 00a6 0143     		orrs	r1, r1, r0
 1098 00a8 1161     		str	r1, [r2, #16]
 1099              	.L88:
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1100              		.loc 1 689 0
 1101 00aa 5168     		ldr	r1, [r2, #4]
 1102 00ac 186C     		ldr	r0, [r3, #64]
 1103 00ae 0143     		orrs	r1, r1, r0
 1104 00b0 5160     		str	r1, [r2, #4]
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1105              		.loc 1 692 0
 1106 00b2 D96B     		ldr	r1, [r3, #60]
 1107 00b4 D160     		str	r1, [r2, #12]
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1108              		.loc 1 695 0
 1109 00b6 996B     		ldr	r1, [r3, #56]
 1110 00b8 9160     		str	r1, [r2, #8]
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1111              		.loc 1 698 0
 1112 00ba 1968     		ldr	r1, [r3]
 1113 00bc B1F1804F 		cmp	r1, #1073741824
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 72


 1114 00c0 05D0     		beq	.L89
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /* Set the HW request clear Mask and Data */
 1115              		.loc 1 701 0
 1116 00c2 C9B2     		uxtb	r1, r1
 1117 00c4 9161     		str	r1, [r2, #24]
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CMDR = pNodeConfig->PostRequestMaskData;      
 1118              		.loc 1 703 0
 1119 00c6 996C     		ldr	r1, [r3, #72]
 1120 00c8 1162     		str	r1, [r2, #32]
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1121              		.loc 1 704 0
 1122 00ca D96C     		ldr	r1, [r3, #76]
 1123 00cc 5162     		str	r1, [r2, #36]
 1124              	.L89:
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 1125              		.loc 1 707 0
 1126 00ce 996B     		ldr	r1, [r3, #56]
 1127 00d0 01F07F41 		and	r1, r1, #-16777216
 1128              	.LVL99:
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1129              		.loc 1 708 0
 1130 00d4 0029     		cmp	r1, #0
 1131 00d6 18BF     		it	ne
 1132 00d8 B1F1005F 		cmpne	r1, #536870912
 1133 00dc 03D1     		bne	.L90
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1134              		.loc 1 711 0
 1135 00de 9169     		ldr	r1, [r2, #24]
 1136              	.LVL100:
 1137 00e0 41F48031 		orr	r1, r1, #65536
 1138 00e4 9161     		str	r1, [r2, #24]
 1139              	.LVL101:
 1140              	.L90:
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 1141              		.loc 1 714 0
 1142 00e6 DB6B     		ldr	r3, [r3, #60]
 1143              	.LVL102:
 1144 00e8 03F07F43 		and	r3, r3, #-16777216
 1145              	.LVL103:
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1146              		.loc 1 715 0
 1147 00ec 002B     		cmp	r3, #0
 1148 00ee 18BF     		it	ne
 1149 00f0 B3F1005F 		cmpne	r3, #536870912
 1150 00f4 28D1     		bne	.L92
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1151              		.loc 1 718 0
 1152 00f6 9369     		ldr	r3, [r2, #24]
 1153              	.LVL104:
 1154 00f8 43F40033 		orr	r3, r3, #131072
 1155 00fc 9361     		str	r3, [r2, #24]
 1156              	.LVL105:
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 1157              		.loc 1 721 0
 1158 00fe 0020     		movs	r0, #0
 1159              	.L81:
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 73


 1160              		.loc 1 722 0
 1161 0100 5DF8044B 		ldr	r4, [sp], #4
 1162              	.LCFI7:
 1163              		.cfi_remember_state
 1164              		.cfi_restore 4
 1165              		.cfi_def_cfa_offset 0
 1166 0104 7047     		bx	lr
 1167              	.LVL106:
 1168              	.L97:
 1169              	.LCFI8:
 1170              		.cfi_restore_state
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1171              		.loc 1 643 0
 1172 0106 1168     		ldr	r1, [r2]
 1173 0108 41F08041 		orr	r1, r1, #1073741824
 1174 010c 1160     		str	r1, [r2]
 1175 010e A6E7     		b	.L82
 1176              	.L98:
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : source repeat block offset */
 1177              		.loc 1 663 0
 1178 0110 5168     		ldr	r1, [r2, #4]
 1179 0112 41F48021 		orr	r1, r1, #262144
 1180 0116 5160     		str	r1, [r2, #4]
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CBRUR = blockoffset & 0x0000FFFFU;
 1181              		.loc 1 665 0
 1182 0118 196B     		ldr	r1, [r3, #48]
 1183 011a 4942     		negs	r1, r1
 1184              	.LVL107:
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1185              		.loc 1 666 0
 1186 011c 89B2     		uxth	r1, r1
 1187              	.LVL108:
 1188 011e 1161     		str	r1, [r2, #16]
 1189              	.LVL109:
 1190 0120 B6E7     		b	.L86
 1191              	.L99:
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     /*write new CBRUR Register value : destination repeat block offset */
 1192              		.loc 1 677 0
 1193 0122 5168     		ldr	r1, [r2, #4]
 1194 0124 41F40021 		orr	r1, r1, #524288
 1195 0128 5160     		str	r1, [r2, #4]
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << POSITION_VAL(MDMA_CBRUR_DUV));
 1196              		.loc 1 679 0
 1197 012a 596B     		ldr	r1, [r3, #52]
 1198 012c 4942     		negs	r1, r1
 1199              	.LVL110:
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1200              		.loc 1 680 0
 1201 012e 89B2     		uxth	r1, r1
 1202              	.LVL111:
 1203              	.LBB32:
 1204              	.LBB33:
 1205              		.loc 2 857 0
 1206 0130 0748     		ldr	r0, .L100+4
 1207              		.syntax unified
 1208              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1209 0132 90FAA0F0 		rbit r0, r0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 74


 1210              	@ 0 "" 2
 1211              	.LVL112:
 1212              		.thumb
 1213              		.syntax unified
 1214              	.LBE33:
 1215              	.LBE32:
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1216              		.loc 1 680 0
 1217 0136 B0FA80F0 		clz	r0, r0
 1218 013a 8140     		lsls	r1, r1, r0
 1219 013c 1069     		ldr	r0, [r2, #16]
 1220 013e 0143     		orrs	r1, r1, r0
 1221 0140 1161     		str	r1, [r2, #16]
 1222              	.LVL113:
 1223 0142 B2E7     		b	.L88
 1224              	.LVL114:
 1225              	.L91:
 1226              	.LCFI9:
 1227              		.cfi_def_cfa_offset 0
 1228              		.cfi_restore 4
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 1229              		.loc 1 600 0
 1230 0144 0120     		movs	r0, #1
 1231              	.LVL115:
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 1232              		.loc 1 722 0
 1233 0146 7047     		bx	lr
 1234              	.LVL116:
 1235              	.L92:
 1236              	.LCFI10:
 1237              		.cfi_def_cfa_offset 4
 1238              		.cfi_offset 4, -4
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 1239              		.loc 1 721 0
 1240 0148 0020     		movs	r0, #0
 1241 014a D9E7     		b	.L81
 1242              	.L101:
 1243              		.align	2
 1244              	.L100:
 1245 014c 0000F0FF 		.word	-1048576
 1246 0150 0000FFFF 		.word	-65536
 1247              		.cfi_endproc
 1248              	.LFE142:
 1250              		.section	.text.HAL_MDMA_LinkedList_AddNode,"ax",%progbits
 1251              		.align	1
 1252              		.global	HAL_MDMA_LinkedList_AddNode
 1253              		.syntax unified
 1254              		.thumb
 1255              		.thumb_func
 1256              		.fpu fpv5-d16
 1258              	HAL_MDMA_LinkedList_AddNode:
 1259              	.LFB143:
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   MDMA_LinkNodeTypeDef *pNode = 0;
 1260              		.loc 1 736 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 0
 1263              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 75


 1264              		@ link register save eliminated.
 1265              	.LVL117:
 1266 0000 F0B4     		push	{r4, r5, r6, r7}
 1267              	.LCFI11:
 1268              		.cfi_def_cfa_offset 16
 1269              		.cfi_offset 4, -16
 1270              		.cfi_offset 5, -12
 1271              		.cfi_offset 6, -8
 1272              		.cfi_offset 7, -4
 1273              	.LVL118:
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1274              		.loc 1 742 0
 1275 0002 0D46     		mov	r5, r1
 1276 0004 B1FA81F1 		clz	r1, r1
 1277              	.LVL119:
 1278 0008 4909     		lsrs	r1, r1, #5
 1279 000a 0028     		cmp	r0, #0
 1280 000c 08BF     		it	eq
 1281 000e 0121     		moveq	r1, #1
 1282 0010 0029     		cmp	r1, #0
 1283 0012 61D1     		bne	.L117
 1284 0014 0346     		mov	r3, r0
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1285              		.loc 1 748 0
 1286 0016 90F83C10 		ldrb	r1, [r0, #60]	@ zero_extendqisi2
 1287 001a 0129     		cmp	r1, #1
 1288 001c 5FD0     		beq	.L118
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1289              		.loc 1 748 0 is_stmt 0 discriminator 2
 1290 001e 0121     		movs	r1, #1
 1291 0020 80F83C10 		strb	r1, [r0, #60]
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1292              		.loc 1 750 0 is_stmt 1 discriminator 2
 1293 0024 90F83D10 		ldrb	r1, [r0, #61]	@ zero_extendqisi2
 1294 0028 C9B2     		uxtb	r1, r1
 1295 002a 0129     		cmp	r1, #1
 1296 002c 4FD1     		bne	.L104
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1297              		.loc 1 753 0
 1298 002e 0221     		movs	r1, #2
 1299 0030 80F83D10 		strb	r1, [r0, #61]
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1300              		.loc 1 756 0
 1301 0034 C76D     		ldr	r7, [r0, #92]
 1302 0036 2FB1     		cbz	r7, .L125
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1303              		.loc 1 780 0
 1304 0038 AF42     		cmp	r7, r5
 1305 003a 15D0     		beq	.L126
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 1306              		.loc 1 783 0
 1307 003c 3C46     		mov	r4, r7
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1308              		.loc 1 739 0
 1309 003e 0020     		movs	r0, #0
 1310              	.LVL120:
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 76


 1311              		.loc 1 738 0
 1312 0040 0146     		mov	r1, r0
 1313 0042 15E0     		b	.L107
 1314              	.LVL121:
 1315              	.L125:
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 1316              		.loc 1 758 0
 1317 0044 3AB1     		cbz	r2, .L127
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 1318              		.loc 1 777 0
 1319 0046 0120     		movs	r0, #1
 1320              	.LVL122:
 1321              	.L106:
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1322              		.loc 1 843 0
 1323 0048 0022     		movs	r2, #0
 1324 004a 83F83C20 		strb	r2, [r3, #60]
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1325              		.loc 1 845 0
 1326 004e 0122     		movs	r2, #1
 1327 0050 83F83D20 		strb	r2, [r3, #61]
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1328              		.loc 1 847 0
 1329 0054 41E0     		b	.L103
 1330              	.LVL123:
 1331              	.L127:
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Set the MDMA handle First linked List node*/
 1332              		.loc 1 763 0
 1333 0056 0268     		ldr	r2, [r0]
 1334              	.LVL124:
 1335 0058 5562     		str	r5, [r2, #36]
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 1336              		.loc 1 765 0
 1337 005a C565     		str	r5, [r0, #92]
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 1338              		.loc 1 768 0
 1339 005c 0020     		movs	r0, #0
 1340              	.LVL125:
 1341 005e 6861     		str	r0, [r5, #20]
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 1342              		.loc 1 771 0
 1343 0060 1D66     		str	r5, [r3, #96]
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 1344              		.loc 1 773 0
 1345 0062 0122     		movs	r2, #1
 1346 0064 5A66     		str	r2, [r3, #100]
 1347 0066 EFE7     		b	.L106
 1348              	.LVL126:
 1349              	.L126:
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 1350              		.loc 1 839 0
 1351 0068 0120     		movs	r0, #1
 1352              	.LVL127:
 1353 006a EDE7     		b	.L106
 1354              	.LVL128:
 1355              	.L108:
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         counter++;
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 77


 1356              		.loc 1 790 0
 1357 006c 6469     		ldr	r4, [r4, #20]
 1358              	.LVL129:
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 1359              		.loc 1 791 0
 1360 006e 0131     		adds	r1, r1, #1
 1361              	.LVL130:
 1362              	.L107:
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 1363              		.loc 1 784 0
 1364 0070 5E6E     		ldr	r6, [r3, #100]
 1365 0072 8E42     		cmp	r6, r1
 1366 0074 05D9     		bls	.L109
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 1367              		.loc 1 784 0 is_stmt 0 discriminator 1
 1368 0076 20B9     		cbnz	r0, .L109
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 1369              		.loc 1 786 0 is_stmt 1
 1370 0078 6669     		ldr	r6, [r4, #20]
 1371 007a AE42     		cmp	r6, r5
 1372 007c F6D1     		bne	.L108
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 1373              		.loc 1 788 0
 1374 007e 0120     		movs	r0, #1
 1375              	.LVL131:
 1376 0080 F4E7     		b	.L108
 1377              	.LVL132:
 1378              	.L109:
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 1379              		.loc 1 794 0
 1380 0082 0028     		cmp	r0, #0
 1381 0084 E0D1     		bne	.L106
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 1382              		.loc 1 797 0
 1383 0086 196E     		ldr	r1, [r3, #96]
 1384              	.LVL133:
 1385 0088 9142     		cmp	r1, r2
 1386 008a 03D0     		beq	.L111
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 1387              		.loc 1 797 0 is_stmt 0 discriminator 1
 1388 008c 12B1     		cbz	r2, .L111
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
 1389              		.loc 1 738 0 is_stmt 1
 1390 008e 0026     		movs	r6, #0
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0))
 1391              		.loc 1 811 0
 1392 0090 3146     		mov	r1, r6
 1393 0092 0FE0     		b	.L112
 1394              	.L111:
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
 1395              		.loc 1 800 0
 1396 0094 4A69     		ldr	r2, [r1, #20]
 1397              	.LVL134:
 1398 0096 6A61     		str	r2, [r5, #20]
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* Update the Handle last node address */
 1399              		.loc 1 801 0
 1400 0098 1A6E     		ldr	r2, [r3, #96]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 78


 1401 009a 5561     		str	r5, [r2, #20]
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* Increment the linked list node counter */
 1402              		.loc 1 803 0
 1403 009c 1D66     		str	r5, [r3, #96]
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 1404              		.loc 1 805 0
 1405 009e 5A6E     		ldr	r2, [r3, #100]
 1406 00a0 0132     		adds	r2, r2, #1
 1407 00a2 5A66     		str	r2, [r3, #100]
 1408 00a4 D0E7     		b	.L106
 1409              	.LVL135:
 1410              	.L128:
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               pNode->CLAR = (uint32_t)pNewNode; 
 1411              		.loc 1 818 0
 1412 00a6 7C69     		ldr	r4, [r7, #20]
 1413 00a8 6C61     		str	r4, [r5, #20]
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               /* Increment the linked list node counter */
 1414              		.loc 1 819 0
 1415 00aa 7D61     		str	r5, [r7, #20]
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****               nodeInserted = 1;
 1416              		.loc 1 821 0
 1417 00ac 5C6E     		ldr	r4, [r3, #100]
 1418 00ae 0134     		adds	r4, r4, #1
 1419 00b0 5C66     		str	r4, [r3, #100]
 1420              	.LVL136:
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             }
 1421              		.loc 1 822 0
 1422 00b2 0126     		movs	r6, #1
 1423              	.LVL137:
 1424              	.L112:
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           {
 1425              		.loc 1 812 0
 1426 00b4 5C6E     		ldr	r4, [r3, #100]
 1427 00b6 8C42     		cmp	r4, r1
 1428 00b8 05D9     		bls	.L115
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           {
 1429              		.loc 1 812 0 is_stmt 0 discriminator 1
 1430 00ba 26B9     		cbnz	r6, .L115
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             if(pNode == pPrevNode)
 1431              		.loc 1 814 0 is_stmt 1
 1432 00bc 0131     		adds	r1, r1, #1
 1433              	.LVL138:
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             {
 1434              		.loc 1 815 0
 1435 00be 9742     		cmp	r7, r2
 1436 00c0 F1D0     		beq	.L128
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****             }
 1437              		.loc 1 826 0
 1438 00c2 7F69     		ldr	r7, [r7, #20]
 1439              	.LVL139:
 1440 00c4 F6E7     		b	.L112
 1441              	.L115:
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           {
 1442              		.loc 1 830 0
 1443 00c6 002E     		cmp	r6, #0
 1444 00c8 BED1     		bne	.L106
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 79


 1445              		.loc 1 832 0
 1446 00ca 0120     		movs	r0, #1
 1447              	.LVL140:
 1448 00cc BCE7     		b	.L106
 1449              	.LVL141:
 1450              	.L104:
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1451              		.loc 1 852 0
 1452 00ce 0022     		movs	r2, #0
 1453              	.LVL142:
 1454 00d0 80F83C20 		strb	r2, [r0, #60]
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   } 
 1455              		.loc 1 855 0
 1456 00d4 0220     		movs	r0, #2
 1457              	.LVL143:
 1458 00d6 00E0     		b	.L103
 1459              	.LVL144:
 1460              	.L117:
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 1461              		.loc 1 744 0
 1462 00d8 0120     		movs	r0, #1
 1463              	.LVL145:
 1464              	.L103:
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 1465              		.loc 1 857 0
 1466 00da F0BC     		pop	{r4, r5, r6, r7}
 1467              	.LCFI12:
 1468              		.cfi_remember_state
 1469              		.cfi_restore 7
 1470              		.cfi_restore 6
 1471              		.cfi_restore 5
 1472              		.cfi_restore 4
 1473              		.cfi_def_cfa_offset 0
 1474              	.LVL146:
 1475 00dc 7047     		bx	lr
 1476              	.LVL147:
 1477              	.L118:
 1478              	.LCFI13:
 1479              		.cfi_restore_state
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1480              		.loc 1 748 0
 1481 00de 0220     		movs	r0, #2
 1482              	.LVL148:
 1483 00e0 FBE7     		b	.L103
 1484              		.cfi_endproc
 1485              	.LFE143:
 1487              		.section	.text.HAL_MDMA_LinkedList_RemoveNode,"ax",%progbits
 1488              		.align	1
 1489              		.global	HAL_MDMA_LinkedList_RemoveNode
 1490              		.syntax unified
 1491              		.thumb
 1492              		.thumb_func
 1493              		.fpu fpv5-d16
 1495              	HAL_MDMA_LinkedList_RemoveNode:
 1496              	.LFB144:
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   MDMA_LinkNodeTypeDef *ptmpNode = 0;
 1497              		.loc 1 869 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 80


 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 0
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 1501              		@ link register save eliminated.
 1502              	.LVL149:
 1503 0000 30B4     		push	{r4, r5}
 1504              	.LCFI14:
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 4, -8
 1507              		.cfi_offset 5, -4
 1508              	.LVL150:
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1509              		.loc 1 875 0
 1510 0002 0C46     		mov	r4, r1
 1511 0004 B1FA81F1 		clz	r1, r1
 1512              	.LVL151:
 1513 0008 4909     		lsrs	r1, r1, #5
 1514 000a 0028     		cmp	r0, #0
 1515 000c 08BF     		it	eq
 1516 000e 0121     		moveq	r1, #1
 1517 0010 0029     		cmp	r1, #0
 1518 0012 62D1     		bne	.L141
 1519 0014 0346     		mov	r3, r0
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1520              		.loc 1 881 0
 1521 0016 90F83C20 		ldrb	r2, [r0, #60]	@ zero_extendqisi2
 1522 001a 012A     		cmp	r2, #1
 1523 001c 60D0     		beq	.L142
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1524              		.loc 1 881 0 is_stmt 0 discriminator 2
 1525 001e 0122     		movs	r2, #1
 1526 0020 80F83C20 		strb	r2, [r0, #60]
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1527              		.loc 1 883 0 is_stmt 1 discriminator 2
 1528 0024 90F83D20 		ldrb	r2, [r0, #61]	@ zero_extendqisi2
 1529 0028 D2B2     		uxtb	r2, r2
 1530 002a 012A     		cmp	r2, #1
 1531 002c 50D1     		bne	.L131
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1532              		.loc 1 886 0
 1533 002e 0222     		movs	r2, #2
 1534 0030 80F83D20 		strb	r2, [r0, #61]
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1535              		.loc 1 889 0
 1536 0034 C26D     		ldr	r2, [r0, #92]
 1537 0036 002A     		cmp	r2, #0
 1538 0038 3ED0     		beq	.L143
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1539              		.loc 1 889 0 is_stmt 0 discriminator 1
 1540 003a 016E     		ldr	r1, [r0, #96]
 1541 003c 0029     		cmp	r1, #0
 1542 003e 43D0     		beq	.L144
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1543              		.loc 1 889 0 discriminator 2
 1544 0040 406E     		ldr	r0, [r0, #100]
 1545              	.LVL152:
 1546 0042 0028     		cmp	r0, #0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 81


 1547 0044 42D0     		beq	.L145
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1548              		.loc 1 893 0 is_stmt 1
 1549 0046 A242     		cmp	r2, r4
 1550 0048 02D0     		beq	.L149
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
 1551              		.loc 1 871 0
 1552 004a 0025     		movs	r5, #0
 1553 004c 2946     		mov	r1, r5
 1554 004e 22E0     		b	.L133
 1555              	.L149:
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 1556              		.loc 1 896 0
 1557 0050 A142     		cmp	r1, r4
 1558 0052 0DD0     		beq	.L150
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 1559              		.loc 1 909 0
 1560 0054 4869     		ldr	r0, [r1, #20]
 1561 0056 8242     		cmp	r2, r0
 1562 0058 11D0     		beq	.L151
 1563              	.L135:
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
 1564              		.loc 1 918 0
 1565 005a 1A68     		ldr	r2, [r3]
 1566 005c 6169     		ldr	r1, [r4, #20]
 1567 005e 5162     		str	r1, [r2, #36]
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         /* Update the Handle node counter */
 1568              		.loc 1 919 0
 1569 0060 1A68     		ldr	r2, [r3]
 1570 0062 526A     		ldr	r2, [r2, #36]
 1571 0064 DA65     		str	r2, [r3, #92]
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }     
 1572              		.loc 1 921 0
 1573 0066 5A6E     		ldr	r2, [r3, #100]
 1574 0068 013A     		subs	r2, r2, #1
 1575 006a 5A66     		str	r2, [r3, #100]
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1576              		.loc 1 872 0
 1577 006c 0020     		movs	r0, #0
 1578 006e 24E0     		b	.L132
 1579              	.L150:
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->LastLinkedListNodeAddress  = 0;
 1580              		.loc 1 901 0
 1581 0070 0020     		movs	r0, #0
 1582 0072 D865     		str	r0, [r3, #92]
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         hmdma->LinkedListNodeCounter = 0;
 1583              		.loc 1 902 0
 1584 0074 1866     		str	r0, [r3, #96]
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 1585              		.loc 1 903 0
 1586 0076 5866     		str	r0, [r3, #100]
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 1587              		.loc 1 905 0
 1588 0078 1A68     		ldr	r2, [r3]
 1589 007a 5062     		str	r0, [r2, #36]
 1590 007c 1DE0     		b	.L132
 1591              	.L151:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 82


 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 1592              		.loc 1 912 0
 1593 007e 6269     		ldr	r2, [r4, #20]
 1594 0080 4A61     		str	r2, [r1, #20]
 1595 0082 EAE7     		b	.L135
 1596              	.LVL153:
 1597              	.L153:
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           {
 1598              		.loc 1 934 0
 1599 0084 186E     		ldr	r0, [r3, #96]
 1600 0086 A042     		cmp	r0, r4
 1601 0088 0FD0     		beq	.L152
 1602              	.L137:
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           nodeDeleted = 1;
 1603              		.loc 1 940 0
 1604 008a 6069     		ldr	r0, [r4, #20]
 1605 008c 5061     		str	r0, [r2, #20]
 1606              	.LVL154:
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 1607              		.loc 1 943 0
 1608 008e 586E     		ldr	r0, [r3, #100]
 1609 0090 0138     		subs	r0, r0, #1
 1610 0092 5866     		str	r0, [r3, #100]
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           /* Update the Handle node counter */
 1611              		.loc 1 941 0
 1612 0094 0125     		movs	r5, #1
 1613              	.LVL155:
 1614              	.L133:
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 1615              		.loc 1 928 0
 1616 0096 586E     		ldr	r0, [r3, #100]
 1617 0098 8842     		cmp	r0, r1
 1618 009a 08D9     		bls	.L139
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 1619              		.loc 1 928 0 is_stmt 0 discriminator 1
 1620 009c 3DB9     		cbnz	r5, .L139
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         if(ptmpNode->CLAR == ((uint32_t)pNode))
 1621              		.loc 1 930 0 is_stmt 1
 1622 009e 0131     		adds	r1, r1, #1
 1623              	.LVL156:
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 1624              		.loc 1 931 0
 1625 00a0 5069     		ldr	r0, [r2, #20]
 1626 00a2 A042     		cmp	r0, r4
 1627 00a4 EED0     		beq	.L153
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 1628              		.loc 1 947 0
 1629 00a6 5269     		ldr	r2, [r2, #20]
 1630              	.LVL157:
 1631 00a8 F5E7     		b	.L133
 1632              	.L152:
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****           }
 1633              		.loc 1 937 0
 1634 00aa 1A66     		str	r2, [r3, #96]
 1635 00ac EDE7     		b	.L137
 1636              	.L139:
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 83


 1637              		.loc 1 951 0
 1638 00ae 0DB9     		cbnz	r5, .L154
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 1639              		.loc 1 954 0
 1640 00b0 0120     		movs	r0, #1
 1641 00b2 02E0     		b	.L132
 1642              	.L154:
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1643              		.loc 1 872 0
 1644 00b4 0020     		movs	r0, #0
 1645 00b6 00E0     		b	.L132
 1646              	.LVL158:
 1647              	.L143:
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 1648              		.loc 1 891 0
 1649 00b8 0120     		movs	r0, #1
 1650              	.LVL159:
 1651              	.L132:
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1652              		.loc 1 959 0
 1653 00ba 0022     		movs	r2, #0
 1654 00bc 83F83C20 		strb	r2, [r3, #60]
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1655              		.loc 1 961 0
 1656 00c0 0122     		movs	r2, #1
 1657 00c2 83F83D20 		strb	r2, [r3, #61]
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1658              		.loc 1 963 0
 1659 00c6 09E0     		b	.L130
 1660              	.LVL160:
 1661              	.L144:
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 1662              		.loc 1 891 0
 1663 00c8 0120     		movs	r0, #1
 1664              	.LVL161:
 1665 00ca F6E7     		b	.L132
 1666              	.L145:
 1667 00cc 0120     		movs	r0, #1
 1668 00ce F4E7     		b	.L132
 1669              	.LVL162:
 1670              	.L131:
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1671              		.loc 1 968 0
 1672 00d0 0022     		movs	r2, #0
 1673 00d2 80F83C20 		strb	r2, [r0, #60]
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   } 
 1674              		.loc 1 971 0
 1675 00d6 0220     		movs	r0, #2
 1676              	.LVL163:
 1677 00d8 00E0     		b	.L130
 1678              	.LVL164:
 1679              	.L141:
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 1680              		.loc 1 877 0
 1681 00da 0120     		movs	r0, #1
 1682              	.LVL165:
 1683              	.L130:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 84


 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 1684              		.loc 1 973 0
 1685 00dc 30BC     		pop	{r4, r5}
 1686              	.LCFI15:
 1687              		.cfi_remember_state
 1688              		.cfi_restore 5
 1689              		.cfi_restore 4
 1690              		.cfi_def_cfa_offset 0
 1691              	.LVL166:
 1692 00de 7047     		bx	lr
 1693              	.LVL167:
 1694              	.L142:
 1695              	.LCFI16:
 1696              		.cfi_restore_state
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1697              		.loc 1 881 0
 1698 00e0 0220     		movs	r0, #2
 1699              	.LVL168:
 1700 00e2 FBE7     		b	.L130
 1701              		.cfi_endproc
 1702              	.LFE144:
 1704              		.section	.text.HAL_MDMA_LinkedList_EnableCircularMode,"ax",%progbits
 1705              		.align	1
 1706              		.global	HAL_MDMA_LinkedList_EnableCircularMode
 1707              		.syntax unified
 1708              		.thumb
 1709              		.thumb_func
 1710              		.fpu fpv5-d16
 1712              	HAL_MDMA_LinkedList_EnableCircularMode:
 1713              	.LFB145:
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
 1714              		.loc 1 982 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 0
 1717              		@ frame_needed = 0, uses_anonymous_args = 0
 1718              		@ link register save eliminated.
 1719              	.LVL169:
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1720              		.loc 1 986 0
 1721 0000 0346     		mov	r3, r0
 1722 0002 28B3     		cbz	r0, .L158
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1723              		.loc 1 992 0
 1724 0004 90F83C20 		ldrb	r2, [r0, #60]	@ zero_extendqisi2
 1725 0008 012A     		cmp	r2, #1
 1726 000a 23D0     		beq	.L159
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1727              		.loc 1 992 0 is_stmt 0 discriminator 2
 1728 000c 0122     		movs	r2, #1
 1729 000e 80F83C20 		strb	r2, [r0, #60]
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1730              		.loc 1 994 0 is_stmt 1 discriminator 2
 1731 0012 90F83D20 		ldrb	r2, [r0, #61]	@ zero_extendqisi2
 1732 0016 D2B2     		uxtb	r2, r2
 1733 0018 012A     		cmp	r2, #1
 1734 001a 07D0     		beq	.L164
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 85


 1735              		.loc 1 983 0
 1736 001c 0020     		movs	r0, #0
 1737              	.LVL170:
 1738              	.L157:
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1739              		.loc 1 1012 0
 1740 001e 0022     		movs	r2, #0
 1741 0020 83F83C20 		strb	r2, [r3, #60]
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1742              		.loc 1 1014 0
 1743 0024 0122     		movs	r2, #1
 1744 0026 83F83D20 		strb	r2, [r3, #61]
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 1745              		.loc 1 1016 0
 1746 002a 7047     		bx	lr
 1747              	.LVL171:
 1748              	.L164:
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  
 1749              		.loc 1 997 0
 1750 002c 0222     		movs	r2, #2
 1751 002e 80F83D20 		strb	r2, [r0, #61]
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1752              		.loc 1 1000 0
 1753 0032 C26D     		ldr	r2, [r0, #92]
 1754 0034 32B1     		cbz	r2, .L161
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1755              		.loc 1 1000 0 is_stmt 0 discriminator 1
 1756 0036 016E     		ldr	r1, [r0, #96]
 1757 0038 31B1     		cbz	r1, .L162
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1758              		.loc 1 1000 0 discriminator 2
 1759 003a 406E     		ldr	r0, [r0, #100]
 1760              	.LVL172:
 1761 003c 30B1     		cbz	r0, .L163
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 1762              		.loc 1 1007 0 is_stmt 1
 1763 003e 4A61     		str	r2, [r1, #20]
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1764              		.loc 1 983 0
 1765 0040 0020     		movs	r0, #0
 1766 0042 ECE7     		b	.L157
 1767              	.LVL173:
 1768              	.L161:
1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 1769              		.loc 1 1002 0
 1770 0044 0120     		movs	r0, #1
 1771              	.LVL174:
 1772 0046 EAE7     		b	.L157
 1773              	.LVL175:
 1774              	.L162:
 1775 0048 0120     		movs	r0, #1
 1776              	.LVL176:
 1777 004a E8E7     		b	.L157
 1778              	.L163:
 1779 004c 0120     		movs	r0, #1
 1780 004e E6E7     		b	.L157
 1781              	.LVL177:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 86


 1782              	.L158:
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 1783              		.loc 1 988 0
 1784 0050 0120     		movs	r0, #1
 1785              	.LVL178:
 1786 0052 7047     		bx	lr
 1787              	.LVL179:
 1788              	.L159:
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1789              		.loc 1 992 0
 1790 0054 0220     		movs	r0, #2
 1791              	.LVL180:
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 1792              		.loc 1 1017 0
 1793 0056 7047     		bx	lr
 1794              		.cfi_endproc
 1795              	.LFE145:
 1797              		.section	.text.HAL_MDMA_LinkedList_DisableCircularMode,"ax",%progbits
 1798              		.align	1
 1799              		.global	HAL_MDMA_LinkedList_DisableCircularMode
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1803              		.fpu fpv5-d16
 1805              	HAL_MDMA_LinkedList_DisableCircularMode:
 1806              	.LFB146:
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   HAL_StatusTypeDef hal_status = HAL_OK;  
 1807              		.loc 1 1026 0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              		@ link register save eliminated.
 1812              	.LVL181:
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1813              		.loc 1 1030 0
 1814 0000 0346     		mov	r3, r0
 1815 0002 28B3     		cbz	r0, .L168
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1816              		.loc 1 1036 0
 1817 0004 90F83C20 		ldrb	r2, [r0, #60]	@ zero_extendqisi2
 1818 0008 012A     		cmp	r2, #1
 1819 000a 23D0     		beq	.L169
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1820              		.loc 1 1036 0 is_stmt 0 discriminator 2
 1821 000c 0122     		movs	r2, #1
 1822 000e 80F83C20 		strb	r2, [r0, #60]
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1823              		.loc 1 1038 0 is_stmt 1 discriminator 2
 1824 0012 90F83D20 		ldrb	r2, [r0, #61]	@ zero_extendqisi2
 1825 0016 D2B2     		uxtb	r2, r2
 1826 0018 012A     		cmp	r2, #1
 1827 001a 07D0     		beq	.L174
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1828              		.loc 1 1027 0
 1829 001c 0020     		movs	r0, #0
 1830              	.LVL182:
 1831              	.L167:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 87


1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1832              		.loc 1 1056 0
 1833 001e 0022     		movs	r2, #0
 1834 0020 83F83C20 		strb	r2, [r3, #60]
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1835              		.loc 1 1058 0
 1836 0024 0122     		movs	r2, #1
 1837 0026 83F83D20 		strb	r2, [r3, #61]
1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 1838              		.loc 1 1060 0
 1839 002a 7047     		bx	lr
 1840              	.LVL183:
 1841              	.L174:
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****  
 1842              		.loc 1 1041 0
 1843 002c 0222     		movs	r2, #2
 1844 002e 80F83D20 		strb	r2, [r0, #61]
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1845              		.loc 1 1044 0
 1846 0032 C26D     		ldr	r2, [r0, #92]
 1847 0034 32B1     		cbz	r2, .L171
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1848              		.loc 1 1044 0 is_stmt 0 discriminator 1
 1849 0036 026E     		ldr	r2, [r0, #96]
 1850 0038 32B1     		cbz	r2, .L172
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1851              		.loc 1 1044 0 discriminator 2
 1852 003a 416E     		ldr	r1, [r0, #100]
 1853 003c 31B1     		cbz	r1, .L173
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 1854              		.loc 1 1051 0 is_stmt 1
 1855 003e 0020     		movs	r0, #0
 1856              	.LVL184:
 1857 0040 5061     		str	r0, [r2, #20]
 1858 0042 ECE7     		b	.L167
 1859              	.LVL185:
 1860              	.L171:
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 1861              		.loc 1 1046 0
 1862 0044 0120     		movs	r0, #1
 1863              	.LVL186:
 1864 0046 EAE7     		b	.L167
 1865              	.LVL187:
 1866              	.L172:
 1867 0048 0120     		movs	r0, #1
 1868              	.LVL188:
 1869 004a E8E7     		b	.L167
 1870              	.LVL189:
 1871              	.L173:
 1872 004c 0120     		movs	r0, #1
 1873              	.LVL190:
 1874 004e E6E7     		b	.L167
 1875              	.LVL191:
 1876              	.L168:
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 1877              		.loc 1 1032 0
 1878 0050 0120     		movs	r0, #1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 88


 1879              	.LVL192:
 1880 0052 7047     		bx	lr
 1881              	.LVL193:
 1882              	.L169:
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1883              		.loc 1 1036 0
 1884 0054 0220     		movs	r0, #2
 1885              	.LVL194:
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 1886              		.loc 1 1061 0
 1887 0056 7047     		bx	lr
 1888              		.cfi_endproc
 1889              	.LFE146:
 1891              		.section	.text.HAL_MDMA_Start,"ax",%progbits
 1892              		.align	1
 1893              		.global	HAL_MDMA_Start
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu fpv5-d16
 1899              	HAL_MDMA_Start:
 1900              	.LFB147:
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
 1901              		.loc 1 1097 0
 1902              		.cfi_startproc
 1903              		@ args = 4, pretend = 0, frame = 0
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              	.LVL195:
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1906              		.loc 1 1103 0
 1907 0000 0028     		cmp	r0, #0
 1908 0002 35D0     		beq	.L178
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
 1909              		.loc 1 1097 0
 1910 0004 30B5     		push	{r4, r5, lr}
 1911              	.LCFI17:
 1912              		.cfi_def_cfa_offset 12
 1913              		.cfi_offset 4, -12
 1914              		.cfi_offset 5, -8
 1915              		.cfi_offset 14, -4
 1916 0006 83B0     		sub	sp, sp, #12
 1917              	.LCFI18:
 1918              		.cfi_def_cfa_offset 24
 1919 0008 0446     		mov	r4, r0
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1920              		.loc 1 1109 0
 1921 000a 90F83C00 		ldrb	r0, [r0, #60]	@ zero_extendqisi2
 1922              	.LVL196:
 1923 000e 0128     		cmp	r0, #1
 1924 0010 30D0     		beq	.L179
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 1925              		.loc 1 1109 0 is_stmt 0 discriminator 2
 1926 0012 0120     		movs	r0, #1
 1927 0014 84F83C00 		strb	r0, [r4, #60]
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 1928              		.loc 1 1111 0 is_stmt 1 discriminator 2
 1929 0018 94F83D00 		ldrb	r0, [r4, #61]	@ zero_extendqisi2
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 89


 1930 001c C0B2     		uxtb	r0, r0
 1931 001e 0128     		cmp	r0, #1
 1932 0020 05D0     		beq	.L185
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1933              		.loc 1 1139 0
 1934 0022 0023     		movs	r3, #0
 1935              	.LVL197:
 1936 0024 84F83C30 		strb	r3, [r4, #60]
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1937              		.loc 1 1142 0
 1938 0028 0220     		movs	r0, #2
 1939              	.LVL198:
 1940              	.L176:
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 1941              		.loc 1 1146 0
 1942 002a 03B0     		add	sp, sp, #12
 1943              	.LCFI19:
 1944              		.cfi_remember_state
 1945              		.cfi_def_cfa_offset 12
 1946              		@ sp needed
 1947 002c 30BD     		pop	{r4, r5, pc}
 1948              	.LVL199:
 1949              	.L185:
 1950              	.LCFI20:
 1951              		.cfi_restore_state
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1952              		.loc 1 1114 0
 1953 002e 0220     		movs	r0, #2
 1954 0030 84F83D00 		strb	r0, [r4, #61]
1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1955              		.loc 1 1117 0
 1956 0034 0020     		movs	r0, #0
 1957 0036 A066     		str	r0, [r4, #104]
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1958              		.loc 1 1120 0
 1959 0038 2568     		ldr	r5, [r4]
 1960 003a E868     		ldr	r0, [r5, #12]
 1961 003c 20F00100 		bic	r0, r0, #1
 1962 0040 E860     		str	r0, [r5, #12]
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1963              		.loc 1 1123 0
 1964 0042 0698     		ldr	r0, [sp, #24]
 1965 0044 0090     		str	r0, [sp]
 1966 0046 2046     		mov	r0, r4
 1967 0048 FFF7FEFF 		bl	MDMA_SetConfig
 1968              	.LVL200:
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 1969              		.loc 1 1127 0
 1970 004c 2268     		ldr	r2, [r4]
 1971 004e D368     		ldr	r3, [r2, #12]
 1972 0050 43F00103 		orr	r3, r3, #1
 1973 0054 D360     		str	r3, [r2, #12]
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 1974              		.loc 1 1130 0
 1975 0056 6368     		ldr	r3, [r4, #4]
 1976 0058 B3F1804F 		cmp	r3, #1073741824
 1977 005c 01D0     		beq	.L186
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 90


1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 1978              		.loc 1 1145 0
 1979 005e 0020     		movs	r0, #0
 1980 0060 E3E7     		b	.L176
 1981              	.L186:
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }  
 1982              		.loc 1 1133 0
 1983 0062 2268     		ldr	r2, [r4]
 1984 0064 D368     		ldr	r3, [r2, #12]
 1985 0066 43F48033 		orr	r3, r3, #65536
 1986 006a D360     		str	r3, [r2, #12]
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 1987              		.loc 1 1145 0
 1988 006c 0020     		movs	r0, #0
 1989 006e DCE7     		b	.L176
 1990              	.LVL201:
 1991              	.L178:
 1992              	.LCFI21:
 1993              		.cfi_def_cfa_offset 0
 1994              		.cfi_restore 4
 1995              		.cfi_restore 5
 1996              		.cfi_restore 14
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 1997              		.loc 1 1105 0
 1998 0070 0120     		movs	r0, #1
 1999              	.LVL202:
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2000              		.loc 1 1146 0
 2001 0072 7047     		bx	lr
 2002              	.LVL203:
 2003              	.L179:
 2004              	.LCFI22:
 2005              		.cfi_def_cfa_offset 24
 2006              		.cfi_offset 4, -12
 2007              		.cfi_offset 5, -8
 2008              		.cfi_offset 14, -4
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 2009              		.loc 1 1109 0
 2010 0074 0220     		movs	r0, #2
 2011 0076 D8E7     		b	.L176
 2012              		.cfi_endproc
 2013              	.LFE147:
 2015              		.section	.text.HAL_MDMA_Start_IT,"ax",%progbits
 2016              		.align	1
 2017              		.global	HAL_MDMA_Start_IT
 2018              		.syntax unified
 2019              		.thumb
 2020              		.thumb_func
 2021              		.fpu fpv5-d16
 2023              	HAL_MDMA_Start_IT:
 2024              	.LFB148:
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
 2025              		.loc 1 1159 0
 2026              		.cfi_startproc
 2027              		@ args = 4, pretend = 0, frame = 0
 2028              		@ frame_needed = 0, uses_anonymous_args = 0
 2029              	.LVL204:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 91


1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2030              		.loc 1 1165 0
 2031 0000 0028     		cmp	r0, #0
 2032 0002 4FD0     		beq	.L193
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the parameters */
 2033              		.loc 1 1159 0
 2034 0004 30B5     		push	{r4, r5, lr}
 2035              	.LCFI23:
 2036              		.cfi_def_cfa_offset 12
 2037              		.cfi_offset 4, -12
 2038              		.cfi_offset 5, -8
 2039              		.cfi_offset 14, -4
 2040 0006 83B0     		sub	sp, sp, #12
 2041              	.LCFI24:
 2042              		.cfi_def_cfa_offset 24
 2043 0008 0446     		mov	r4, r0
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 2044              		.loc 1 1171 0
 2045 000a 90F83C00 		ldrb	r0, [r0, #60]	@ zero_extendqisi2
 2046              	.LVL205:
 2047 000e 0128     		cmp	r0, #1
 2048 0010 4AD0     		beq	.L194
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 2049              		.loc 1 1171 0 is_stmt 0 discriminator 2
 2050 0012 0120     		movs	r0, #1
 2051 0014 84F83C00 		strb	r0, [r4, #60]
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2052              		.loc 1 1173 0 is_stmt 1 discriminator 2
 2053 0018 94F83D00 		ldrb	r0, [r4, #61]	@ zero_extendqisi2
 2054 001c C0B2     		uxtb	r0, r0
 2055 001e 0128     		cmp	r0, #1
 2056 0020 05D0     		beq	.L200
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2057              		.loc 1 1220 0
 2058 0022 0023     		movs	r3, #0
 2059              	.LVL206:
 2060 0024 84F83C30 		strb	r3, [r4, #60]
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2061              		.loc 1 1223 0
 2062 0028 0220     		movs	r0, #2
 2063              	.LVL207:
 2064              	.L188:
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2065              		.loc 1 1227 0
 2066 002a 03B0     		add	sp, sp, #12
 2067              	.LCFI25:
 2068              		.cfi_remember_state
 2069              		.cfi_def_cfa_offset 12
 2070              		@ sp needed
 2071 002c 30BD     		pop	{r4, r5, pc}
 2072              	.LVL208:
 2073              	.L200:
 2074              	.LCFI26:
 2075              		.cfi_restore_state
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2076              		.loc 1 1176 0
 2077 002e 0220     		movs	r0, #2
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 92


 2078 0030 84F83D00 		strb	r0, [r4, #61]
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2079              		.loc 1 1179 0
 2080 0034 0020     		movs	r0, #0
 2081 0036 A066     		str	r0, [r4, #104]
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2082              		.loc 1 1182 0
 2083 0038 2568     		ldr	r5, [r4]
 2084 003a E868     		ldr	r0, [r5, #12]
 2085 003c 20F00100 		bic	r0, r0, #1
 2086 0040 E860     		str	r0, [r5, #12]
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2087              		.loc 1 1185 0
 2088 0042 0698     		ldr	r0, [sp, #24]
 2089 0044 0090     		str	r0, [sp]
 2090 0046 2046     		mov	r0, r4
 2091 0048 FFF7FEFF 		bl	MDMA_SetConfig
 2092              	.LVL209:
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2093              		.loc 1 1188 0
 2094 004c 2268     		ldr	r2, [r4]
 2095 004e D368     		ldr	r3, [r2, #12]
 2096 0050 43F00603 		orr	r3, r3, #6
 2097 0054 D360     		str	r3, [r2, #12]
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2098              		.loc 1 1190 0
 2099 0056 E36C     		ldr	r3, [r4, #76]
 2100 0058 23B1     		cbz	r3, .L190
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 2101              		.loc 1 1193 0
 2102 005a 2268     		ldr	r2, [r4]
 2103 005c D368     		ldr	r3, [r2, #12]
 2104 005e 43F01003 		orr	r3, r3, #16
 2105 0062 D360     		str	r3, [r2, #12]
 2106              	.L190:
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2107              		.loc 1 1196 0
 2108 0064 236D     		ldr	r3, [r4, #80]
 2109 0066 23B1     		cbz	r3, .L191
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }  
 2110              		.loc 1 1199 0
 2111 0068 2268     		ldr	r2, [r4]
 2112 006a D368     		ldr	r3, [r2, #12]
 2113 006c 43F00803 		orr	r3, r3, #8
 2114 0070 D360     		str	r3, [r2, #12]
 2115              	.L191:
1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2116              		.loc 1 1202 0
 2117 0072 A36C     		ldr	r3, [r4, #72]
 2118 0074 23B1     		cbz	r3, .L192
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 2119              		.loc 1 1205 0
 2120 0076 2268     		ldr	r2, [r4]
 2121 0078 D368     		ldr	r3, [r2, #12]
 2122 007a 43F02003 		orr	r3, r3, #32
 2123 007e D360     		str	r3, [r2, #12]
 2124              	.L192:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 93


1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2125              		.loc 1 1209 0
 2126 0080 2268     		ldr	r2, [r4]
 2127 0082 D368     		ldr	r3, [r2, #12]
 2128 0084 43F00103 		orr	r3, r3, #1
 2129 0088 D360     		str	r3, [r2, #12]
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2130              		.loc 1 1211 0
 2131 008a 6368     		ldr	r3, [r4, #4]
 2132 008c B3F1804F 		cmp	r3, #1073741824
 2133 0090 01D0     		beq	.L201
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** } 
 2134              		.loc 1 1226 0
 2135 0092 0020     		movs	r0, #0
 2136 0094 C9E7     		b	.L188
 2137              	.L201:
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }  
 2138              		.loc 1 1214 0
 2139 0096 2268     		ldr	r2, [r4]
 2140 0098 D368     		ldr	r3, [r2, #12]
 2141 009a 43F48033 		orr	r3, r3, #65536
 2142 009e D360     		str	r3, [r2, #12]
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** } 
 2143              		.loc 1 1226 0
 2144 00a0 0020     		movs	r0, #0
 2145 00a2 C2E7     		b	.L188
 2146              	.LVL210:
 2147              	.L193:
 2148              	.LCFI27:
 2149              		.cfi_def_cfa_offset 0
 2150              		.cfi_restore 4
 2151              		.cfi_restore 5
 2152              		.cfi_restore 14
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2153              		.loc 1 1167 0
 2154 00a4 0120     		movs	r0, #1
 2155              	.LVL211:
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2156              		.loc 1 1227 0
 2157 00a6 7047     		bx	lr
 2158              	.LVL212:
 2159              	.L194:
 2160              	.LCFI28:
 2161              		.cfi_def_cfa_offset 24
 2162              		.cfi_offset 4, -12
 2163              		.cfi_offset 5, -8
 2164              		.cfi_offset 14, -4
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 2165              		.loc 1 1171 0
 2166 00a8 0220     		movs	r0, #2
 2167 00aa BEE7     		b	.L188
 2168              		.cfi_endproc
 2169              	.LFE148:
 2171              		.section	.text.HAL_MDMA_Abort,"ax",%progbits
 2172              		.align	1
 2173              		.global	HAL_MDMA_Abort
 2174              		.syntax unified
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 94


 2175              		.thumb
 2176              		.thumb_func
 2177              		.fpu fpv5-d16
 2179              	HAL_MDMA_Abort:
 2180              	.LFB149:
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t tickstart =  HAL_GetTick();
 2181              		.loc 1 1242 0
 2182              		.cfi_startproc
 2183              		@ args = 0, pretend = 0, frame = 0
 2184              		@ frame_needed = 0, uses_anonymous_args = 0
 2185              	.LVL213:
 2186 0000 38B5     		push	{r3, r4, r5, lr}
 2187              	.LCFI29:
 2188              		.cfi_def_cfa_offset 16
 2189              		.cfi_offset 3, -16
 2190              		.cfi_offset 4, -12
 2191              		.cfi_offset 5, -8
 2192              		.cfi_offset 14, -4
 2193 0002 0446     		mov	r4, r0
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2194              		.loc 1 1243 0
 2195 0004 FFF7FEFF 		bl	HAL_GetTick
 2196              	.LVL214:
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2197              		.loc 1 1246 0
 2198 0008 002C     		cmp	r4, #0
 2199 000a 35D0     		beq	.L207
 2200 000c 0546     		mov	r5, r0
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2201              		.loc 1 1251 0
 2202 000e 94F83D30 		ldrb	r3, [r4, #61]	@ zero_extendqisi2
 2203 0012 DBB2     		uxtb	r3, r3
 2204 0014 022B     		cmp	r3, #2
 2205 0016 06D0     		beq	.L204
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2206              		.loc 1 1253 0
 2207 0018 8023     		movs	r3, #128
 2208 001a A366     		str	r3, [r4, #104]
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2209              		.loc 1 1256 0
 2210 001c 0023     		movs	r3, #0
 2211 001e 84F83C30 		strb	r3, [r4, #60]
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2212              		.loc 1 1258 0
 2213 0022 0120     		movs	r0, #1
 2214              	.LVL215:
 2215              	.L203:
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2216              		.loc 1 1298 0
 2217 0024 38BD     		pop	{r3, r4, r5, pc}
 2218              	.LVL216:
 2219              	.L204:
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2220              		.loc 1 1263 0
 2221 0026 2268     		ldr	r2, [r4]
 2222 0028 D368     		ldr	r3, [r2, #12]
 2223 002a 23F03E03 		bic	r3, r3, #62
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 95


 2224 002e D360     		str	r3, [r2, #12]
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2225              		.loc 1 1266 0
 2226 0030 2268     		ldr	r2, [r4]
 2227 0032 D368     		ldr	r3, [r2, #12]
 2228 0034 23F00103 		bic	r3, r3, #1
 2229 0038 D360     		str	r3, [r2, #12]
 2230              	.LVL217:
 2231              	.L205:
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2232              		.loc 1 1269 0
 2233 003a 2368     		ldr	r3, [r4]
 2234 003c DA68     		ldr	r2, [r3, #12]
 2235 003e 12F0010F 		tst	r2, #1
 2236 0042 10D0     		beq	.L209
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2237              		.loc 1 1272 0
 2238 0044 FFF7FEFF 		bl	HAL_GetTick
 2239              	.LVL218:
 2240 0048 401B     		subs	r0, r0, r5
 2241 004a 0528     		cmp	r0, #5
 2242 004c F5D9     		bls	.L205
1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 2243              		.loc 1 1275 0
 2244 004e A36E     		ldr	r3, [r4, #104]
 2245 0050 43F04003 		orr	r3, r3, #64
 2246 0054 A366     		str	r3, [r4, #104]
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 2247              		.loc 1 1278 0
 2248 0056 0023     		movs	r3, #0
 2249 0058 84F83C30 		strb	r3, [r4, #60]
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 2250              		.loc 1 1281 0
 2251 005c 0323     		movs	r3, #3
 2252 005e 84F83D30 		strb	r3, [r4, #61]
1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2253              		.loc 1 1283 0
 2254 0062 0120     		movs	r0, #1
 2255 0064 DEE7     		b	.L203
 2256              	.L209:
1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2257              		.loc 1 1288 0
 2258 0066 1F22     		movs	r2, #31
 2259 0068 5A60     		str	r2, [r3, #4]
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2260              		.loc 1 1291 0
 2261 006a 0020     		movs	r0, #0
 2262 006c 84F83C00 		strb	r0, [r4, #60]
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2263              		.loc 1 1294 0
 2264 0070 0123     		movs	r3, #1
 2265 0072 84F83D30 		strb	r3, [r4, #61]
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 2266              		.loc 1 1297 0
 2267 0076 D5E7     		b	.L203
 2268              	.LVL219:
 2269              	.L207:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 96


1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 2270              		.loc 1 1248 0
 2271 0078 0120     		movs	r0, #1
 2272              	.LVL220:
 2273 007a D3E7     		b	.L203
 2274              		.cfi_endproc
 2275              	.LFE149:
 2277              		.section	.text.HAL_MDMA_Abort_IT,"ax",%progbits
 2278              		.align	1
 2279              		.global	HAL_MDMA_Abort_IT
 2280              		.syntax unified
 2281              		.thumb
 2282              		.thumb_func
 2283              		.fpu fpv5-d16
 2285              	HAL_MDMA_Abort_IT:
 2286              	.LFB150:
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 2287              		.loc 1 1307 0
 2288              		.cfi_startproc
 2289              		@ args = 0, pretend = 0, frame = 0
 2290              		@ frame_needed = 0, uses_anonymous_args = 0
 2291              		@ link register save eliminated.
 2292              	.LVL221:
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2293              		.loc 1 1309 0
 2294 0000 90B1     		cbz	r0, .L213
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2295              		.loc 1 1314 0
 2296 0002 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 2297 0006 DBB2     		uxtb	r3, r3
 2298 0008 022B     		cmp	r3, #2
 2299 000a 03D0     		beq	.L212
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;
 2300              		.loc 1 1316 0
 2301 000c 8023     		movs	r3, #128
 2302 000e 8366     		str	r3, [r0, #104]
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2303              		.loc 1 1317 0
 2304 0010 0120     		movs	r0, #1
 2305              	.LVL222:
 2306 0012 7047     		bx	lr
 2307              	.LVL223:
 2308              	.L212:
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2309              		.loc 1 1322 0
 2310 0014 0423     		movs	r3, #4
 2311 0016 80F83D30 		strb	r3, [r0, #61]
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2312              		.loc 1 1325 0
 2313 001a 0268     		ldr	r2, [r0]
 2314 001c D368     		ldr	r3, [r2, #12]
 2315 001e 23F00103 		bic	r3, r3, #1
 2316 0022 D360     		str	r3, [r2, #12]
1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 2317              		.loc 1 1328 0
 2318 0024 0020     		movs	r0, #0
 2319              	.LVL224:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 97


 2320 0026 7047     		bx	lr
 2321              	.LVL225:
 2322              	.L213:
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2323              		.loc 1 1311 0
 2324 0028 0120     		movs	r0, #1
 2325              	.LVL226:
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2326              		.loc 1 1329 0
 2327 002a 7047     		bx	lr
 2328              		.cfi_endproc
 2329              	.LFE150:
 2331              		.section	.text.HAL_MDMA_PollForTransfer,"ax",%progbits
 2332              		.align	1
 2333              		.global	HAL_MDMA_PollForTransfer
 2334              		.syntax unified
 2335              		.thumb
 2336              		.thumb_func
 2337              		.fpu fpv5-d16
 2339              	HAL_MDMA_PollForTransfer:
 2340              	.LFB151:
1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t levelFlag = 0, errorFlag = 0;
 2341              		.loc 1 1340 0
 2342              		.cfi_startproc
 2343              		@ args = 0, pretend = 0, frame = 0
 2344              		@ frame_needed = 0, uses_anonymous_args = 0
 2345              	.LVL227:
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2346              		.loc 1 1348 0
 2347 0000 0028     		cmp	r0, #0
 2348 0002 00F08380 		beq	.L232
1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t levelFlag = 0, errorFlag = 0;
 2349              		.loc 1 1340 0
 2350 0006 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2351              	.LCFI30:
 2352              		.cfi_def_cfa_offset 24
 2353              		.cfi_offset 4, -24
 2354              		.cfi_offset 5, -20
 2355              		.cfi_offset 6, -16
 2356              		.cfi_offset 7, -12
 2357              		.cfi_offset 8, -8
 2358              		.cfi_offset 14, -4
 2359 000a 0446     		mov	r4, r0
1353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2360              		.loc 1 1353 0
 2361 000c 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 2362 0010 DBB2     		uxtb	r3, r3
 2363 0012 022B     		cmp	r3, #2
 2364 0014 04D0     		beq	.L216
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2365              		.loc 1 1356 0
 2366 0016 8023     		movs	r3, #128
 2367 0018 8366     		str	r3, [r0, #104]
1358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 2368              		.loc 1 1358 0
 2369 001a 0120     		movs	r0, #1
 2370              	.LVL228:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 98


 2371              	.L215:
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2372              		.loc 1 1474 0
 2373 001c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2374              	.LVL229:
 2375              	.L216:
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC :\
 2376              		.loc 1 1362 0
 2377 0020 39B1     		cbz	r1, .L233
1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   :\
 2378              		.loc 1 1363 0
 2379 0022 0129     		cmp	r1, #1
 2380 0024 26D0     		beq	.L234
1364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         MDMA_FLAG_BRT);
 2381              		.loc 1 1364 0
 2382 0026 0229     		cmp	r1, #2
 2383 0028 01D0     		beq	.L241
 2384 002a 0426     		movs	r6, #4
 2385 002c 02E0     		b	.L217
 2386              	.L241:
 2387 002e 0826     		movs	r6, #8
 2388 0030 00E0     		b	.L217
 2389              	.L233:
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC :\
 2390              		.loc 1 1362 0
 2391 0032 0226     		movs	r6, #2
 2392              	.L217:
 2393 0034 1546     		mov	r5, r2
 2394 0036 0F46     		mov	r7, r1
 2395              	.LVL230:
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 2396              		.loc 1 1369 0 discriminator 3
 2397 0038 FFF7FEFF 		bl	HAL_GetTick
 2398              	.LVL231:
 2399 003c 8046     		mov	r8, r0
 2400              	.LVL232:
 2401              	.L226:
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2402              		.loc 1 1371 0
 2403 003e 2368     		ldr	r3, [r4]
 2404 0040 1868     		ldr	r0, [r3]
 2405 0042 3042     		tst	r0, r6
 2406 0044 46D1     		bne	.L242
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {      
 2407              		.loc 1 1373 0
 2408 0046 1868     		ldr	r0, [r3]
 2409 0048 10F0010F 		tst	r0, #1
 2410 004c 14D1     		bne	.L243
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2411              		.loc 1 1427 0
 2412 004e B5F1FF3F 		cmp	r5, #-1
 2413 0052 F4D0     		beq	.L226
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2414              		.loc 1 1429 0
 2415 0054 2DB1     		cbz	r5, .L227
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2416              		.loc 1 1429 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 99


 2417 0056 FFF7FEFF 		bl	HAL_GetTick
 2418              	.LVL233:
 2419 005a A0EB0800 		sub	r0, r0, r8
 2420 005e A842     		cmp	r0, r5
 2421 0060 EDD9     		bls	.L226
 2422              	.L227:
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2423              		.loc 1 1432 0 is_stmt 1
 2424 0062 A36E     		ldr	r3, [r4, #104]
 2425 0064 43F04003 		orr	r3, r3, #64
 2426 0068 A366     		str	r3, [r4, #104]
1434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2427              		.loc 1 1434 0
 2428 006a 2046     		mov	r0, r4
 2429 006c FFF7FEFF 		bl	HAL_MDMA_Abort
 2430              	.LVL234:
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2431              		.loc 1 1443 0
 2432 0070 0120     		movs	r0, #1
 2433 0072 D3E7     		b	.L215
 2434              	.LVL235:
 2435              	.L234:
1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   :\
 2436              		.loc 1 1363 0
 2437 0074 1026     		movs	r6, #16
 2438 0076 DDE7     		b	.L217
 2439              	.LVL236:
 2440              	.L243:
1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2441              		.loc 1 1376 0
 2442 0078 9B68     		ldr	r3, [r3, #8]
 2443              	.LVL237:
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2444              		.loc 1 1378 0
 2445 007a 13F0800F 		tst	r3, #128
 2446 007e 24D1     		bne	.L220
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2447              		.loc 1 1381 0
 2448 0080 A26E     		ldr	r2, [r4, #104]
 2449 0082 42F00102 		orr	r2, r2, #1
 2450 0086 A266     		str	r2, [r4, #104]
 2451              	.L221:
1389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2452              		.loc 1 1389 0
 2453 0088 13F4007F 		tst	r3, #512
 2454 008c 03D0     		beq	.L222
1392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2455              		.loc 1 1392 0
 2456 008e A26E     		ldr	r2, [r4, #104]
 2457 0090 42F00402 		orr	r2, r2, #4
 2458 0094 A266     		str	r2, [r4, #104]
 2459              	.L222:
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2460              		.loc 1 1395 0
 2461 0096 13F4807F 		tst	r3, #256
 2462 009a 03D0     		beq	.L223
1398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 100


 2463              		.loc 1 1398 0
 2464 009c A26E     		ldr	r2, [r4, #104]
 2465 009e 42F00802 		orr	r2, r2, #8
 2466 00a2 A266     		str	r2, [r4, #104]
 2467              	.L223:
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2468              		.loc 1 1401 0
 2469 00a4 13F4806F 		tst	r3, #1024
 2470 00a8 03D0     		beq	.L224
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2471              		.loc 1 1404 0
 2472 00aa A26E     		ldr	r2, [r4, #104]
 2473 00ac 42F01002 		orr	r2, r2, #16
 2474 00b0 A266     		str	r2, [r4, #104]
 2475              	.L224:
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2476              		.loc 1 1407 0
 2477 00b2 13F4006F 		tst	r3, #2048
 2478 00b6 03D0     		beq	.L225
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }      
 2479              		.loc 1 1410 0
 2480 00b8 A36E     		ldr	r3, [r4, #104]
 2481              	.LVL238:
 2482 00ba 43F02003 		orr	r3, r3, #32
 2483 00be A366     		str	r3, [r4, #104]
 2484              	.L225:
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2485              		.loc 1 1413 0
 2486 00c0 2046     		mov	r0, r4
 2487 00c2 FFF7FEFF 		bl	HAL_MDMA_Abort
 2488              	.LVL239:
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2489              		.loc 1 1422 0
 2490 00c6 0120     		movs	r0, #1
 2491 00c8 A8E7     		b	.L215
 2492              	.LVL240:
 2493              	.L220:
1386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2494              		.loc 1 1386 0
 2495 00ca A26E     		ldr	r2, [r4, #104]
 2496 00cc 42F00202 		orr	r2, r2, #2
 2497 00d0 A266     		str	r2, [r4, #104]
 2498 00d2 D9E7     		b	.L221
 2499              	.LVL241:
 2500              	.L242:
1449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2501              		.loc 1 1449 0
 2502 00d4 012F     		cmp	r7, #1
 2503 00d6 0DD0     		beq	.L244
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2504              		.loc 1 1454 0
 2505 00d8 022F     		cmp	r7, #2
 2506 00da 0FD0     		beq	.L245
1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2507              		.loc 1 1459 0
 2508 00dc 032F     		cmp	r7, #3
 2509 00de 11D0     		beq	.L246
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 101


1463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2510              		.loc 1 1463 0
 2511 00e0 B7B9     		cbnz	r7, .L236
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2512              		.loc 1 1465 0
 2513 00e2 1E22     		movs	r2, #30
 2514 00e4 5A60     		str	r2, [r3, #4]
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2515              		.loc 1 1468 0
 2516 00e6 0020     		movs	r0, #0
 2517 00e8 84F83C00 		strb	r0, [r4, #60]
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2518              		.loc 1 1470 0
 2519 00ec 0123     		movs	r3, #1
 2520 00ee 84F83D30 		strb	r3, [r4, #61]
 2521 00f2 93E7     		b	.L215
 2522              	.L244:
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2523              		.loc 1 1451 0
 2524 00f4 1022     		movs	r2, #16
 2525 00f6 5A60     		str	r2, [r3, #4]
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 2526              		.loc 1 1473 0
 2527 00f8 0020     		movs	r0, #0
 2528 00fa 8FE7     		b	.L215
 2529              	.L245:
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2530              		.loc 1 1456 0
 2531 00fc 1822     		movs	r2, #24
 2532 00fe 5A60     		str	r2, [r3, #4]
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 2533              		.loc 1 1473 0
 2534 0100 0020     		movs	r0, #0
 2535 0102 8BE7     		b	.L215
 2536              	.L246:
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }    
 2537              		.loc 1 1461 0
 2538 0104 1C22     		movs	r2, #28
 2539 0106 5A60     		str	r2, [r3, #4]
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 2540              		.loc 1 1473 0
 2541 0108 0020     		movs	r0, #0
 2542 010a 87E7     		b	.L215
 2543              	.LVL242:
 2544              	.L232:
 2545              	.LCFI31:
 2546              		.cfi_def_cfa_offset 0
 2547              		.cfi_restore 4
 2548              		.cfi_restore 5
 2549              		.cfi_restore 6
 2550              		.cfi_restore 7
 2551              		.cfi_restore 8
 2552              		.cfi_restore 14
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }  
 2553              		.loc 1 1350 0
 2554 010c 0120     		movs	r0, #1
 2555              	.LVL243:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 102


1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2556              		.loc 1 1474 0
 2557 010e 7047     		bx	lr
 2558              	.LVL244:
 2559              	.L236:
 2560              	.LCFI32:
 2561              		.cfi_def_cfa_offset 24
 2562              		.cfi_offset 4, -24
 2563              		.cfi_offset 5, -20
 2564              		.cfi_offset 6, -16
 2565              		.cfi_offset 7, -12
 2566              		.cfi_offset 8, -8
 2567              		.cfi_offset 14, -4
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 2568              		.loc 1 1473 0
 2569 0110 0020     		movs	r0, #0
 2570 0112 83E7     		b	.L215
 2571              		.cfi_endproc
 2572              	.LFE151:
 2574              		.section	.text.HAL_MDMA_GenerateSWRequest,"ax",%progbits
 2575              		.align	1
 2576              		.global	HAL_MDMA_GenerateSWRequest
 2577              		.syntax unified
 2578              		.thumb
 2579              		.thumb_func
 2580              		.fpu fpv5-d16
 2582              	HAL_MDMA_GenerateSWRequest:
 2583              	.LFB152:
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   /* Check the MDMA peripheral handle */
 2584              		.loc 1 1483 0
 2585              		.cfi_startproc
 2586              		@ args = 0, pretend = 0, frame = 0
 2587              		@ frame_needed = 0, uses_anonymous_args = 0
 2588              		@ link register save eliminated.
 2589              	.LVL245:
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2590              		.loc 1 1485 0
 2591 0000 0346     		mov	r3, r0
 2592 0002 D8B1     		cbz	r0, .L252
1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2593              		.loc 1 1490 0
 2594 0004 0268     		ldr	r2, [r0]
 2595 0006 D168     		ldr	r1, [r2, #12]
 2596 0008 11F0010F 		tst	r1, #1
 2597 000c 0DD0     		beq	.L253
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2598              		.loc 1 1496 0
 2599 000e 1168     		ldr	r1, [r2]
 2600 0010 11F4803F 		tst	r1, #65536
 2601 0014 0DD1     		bne	.L250
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2602              		.loc 1 1496 0 is_stmt 0 discriminator 1
 2603 0016 1169     		ldr	r1, [r2, #16]
 2604 0018 11F0804F 		tst	r1, #1073741824
 2605 001c 09D0     		beq	.L250
1505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2606              		.loc 1 1505 0 is_stmt 1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 103


 2607 001e D368     		ldr	r3, [r2, #12]
 2608 0020 43F48033 		orr	r3, r3, #65536
 2609 0024 D360     		str	r3, [r2, #12]
1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2610              		.loc 1 1507 0
 2611 0026 0020     		movs	r0, #0
 2612              	.LVL246:
 2613 0028 7047     		bx	lr
 2614              	.LVL247:
 2615              	.L253:
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;      
 2616              		.loc 1 1493 0
 2617 002a 8022     		movs	r2, #128
 2618 002c 8266     		str	r2, [r0, #104]
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2619              		.loc 1 1494 0
 2620 002e 0120     		movs	r0, #1
 2621              	.LVL248:
 2622 0030 7047     		bx	lr
 2623              	.LVL249:
 2624              	.L250:
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     return HAL_ERROR;      
 2625              		.loc 1 1499 0
 2626 0032 4FF48072 		mov	r2, #256
 2627 0036 9A66     		str	r2, [r3, #104]
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2628              		.loc 1 1500 0
 2629 0038 0120     		movs	r0, #1
 2630              	.LVL250:
 2631 003a 7047     		bx	lr
 2632              	.LVL251:
 2633              	.L252:
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   }
 2634              		.loc 1 1487 0
 2635 003c 0120     		movs	r0, #1
 2636              	.LVL252:
1509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2637              		.loc 1 1509 0
 2638 003e 7047     		bx	lr
 2639              		.cfi_endproc
 2640              	.LFE152:
 2642              		.section	.text.HAL_MDMA_IRQHandler,"ax",%progbits
 2643              		.align	1
 2644              		.global	HAL_MDMA_IRQHandler
 2645              		.syntax unified
 2646              		.thumb
 2647              		.thumb_func
 2648              		.fpu fpv5-d16
 2650              	HAL_MDMA_IRQHandler:
 2651              	.LFB153:
1518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   __IO uint32_t count = 0;
 2652              		.loc 1 1518 0
 2653              		.cfi_startproc
 2654              		@ args = 0, pretend = 0, frame = 8
 2655              		@ frame_needed = 0, uses_anonymous_args = 0
 2656              	.LVL253:
 2657 0000 30B5     		push	{r4, r5, lr}
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 104


 2658              	.LCFI33:
 2659              		.cfi_def_cfa_offset 12
 2660              		.cfi_offset 4, -12
 2661              		.cfi_offset 5, -8
 2662              		.cfi_offset 14, -4
 2663 0002 83B0     		sub	sp, sp, #12
 2664              	.LCFI34:
 2665              		.cfi_def_cfa_offset 24
1519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   uint32_t timeout = SystemCoreClock / 9600;
 2666              		.loc 1 1519 0
 2667 0004 0023     		movs	r3, #0
 2668 0006 0193     		str	r3, [sp, #4]
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   
 2669              		.loc 1 1520 0
 2670 0008 664B     		ldr	r3, .L274
 2671 000a 1D68     		ldr	r5, [r3]
 2672 000c 664B     		ldr	r3, .L274+4
 2673 000e A3FB0535 		umull	r3, r5, r3, r5
 2674              	.LVL254:
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   if((MDMA->GISR0 & generalIntFlag) == RESET)
 2675              		.loc 1 1525 0
 2676 0012 0168     		ldr	r1, [r0]
 2677 0014 654B     		ldr	r3, .L274+8
 2678 0016 0B44     		add	r3, r3, r1
 2679 0018 9B09     		lsrs	r3, r3, #6
 2680 001a 0122     		movs	r2, #1
 2681 001c 02FA03F3 		lsl	r3, r2, r3
 2682              	.LVL255:
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2683              		.loc 1 1526 0
 2684 0020 4FF0A442 		mov	r2, #1375731712
 2685 0024 1268     		ldr	r2, [r2]
 2686 0026 1A42     		tst	r2, r3
 2687 0028 00F0A480 		beq	.L254
 2688 002c AD0A     		lsrs	r5, r5, #10
 2689              	.LVL256:
1532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2690              		.loc 1 1532 0
 2691 002e 0B68     		ldr	r3, [r1]
 2692              	.LVL257:
 2693 0030 13F0010F 		tst	r3, #1
 2694 0034 2FD0     		beq	.L256
1534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {      
 2695              		.loc 1 1534 0
 2696 0036 CB68     		ldr	r3, [r1, #12]
 2697 0038 13F0020F 		tst	r3, #2
 2698 003c 2BD0     		beq	.L256
1537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2699              		.loc 1 1537 0
 2700 003e CB68     		ldr	r3, [r1, #12]
 2701 0040 23F00203 		bic	r3, r3, #2
 2702 0044 CB60     		str	r3, [r1, #12]
1540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2703              		.loc 1 1540 0
 2704 0046 0268     		ldr	r2, [r0]
 2705 0048 9368     		ldr	r3, [r2, #8]
 2706              	.LVL258:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 105


1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2707              		.loc 1 1542 0
 2708 004a 13F0800F 		tst	r3, #128
 2709 004e 40F09380 		bne	.L257
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2710              		.loc 1 1545 0
 2711 0052 816E     		ldr	r1, [r0, #104]
 2712              	.LVL259:
 2713 0054 41F00101 		orr	r1, r1, #1
 2714 0058 8166     		str	r1, [r0, #104]
 2715              	.L258:
1553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2716              		.loc 1 1553 0
 2717 005a 13F4007F 		tst	r3, #512
 2718 005e 03D0     		beq	.L259
1556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2719              		.loc 1 1556 0
 2720 0060 816E     		ldr	r1, [r0, #104]
 2721 0062 41F00401 		orr	r1, r1, #4
 2722 0066 8166     		str	r1, [r0, #104]
 2723              	.L259:
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2724              		.loc 1 1559 0
 2725 0068 13F4807F 		tst	r3, #256
 2726 006c 03D0     		beq	.L260
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2727              		.loc 1 1562 0
 2728 006e 816E     		ldr	r1, [r0, #104]
 2729 0070 41F00801 		orr	r1, r1, #8
 2730 0074 8166     		str	r1, [r0, #104]
 2731              	.L260:
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2732              		.loc 1 1565 0
 2733 0076 13F4806F 		tst	r3, #1024
 2734 007a 03D0     		beq	.L261
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2735              		.loc 1 1568 0
 2736 007c 816E     		ldr	r1, [r0, #104]
 2737 007e 41F01001 		orr	r1, r1, #16
 2738 0082 8166     		str	r1, [r0, #104]
 2739              	.L261:
1571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2740              		.loc 1 1571 0
 2741 0084 13F4006F 		tst	r3, #2048
 2742 0088 03D0     		beq	.L262
1574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }       
 2743              		.loc 1 1574 0
 2744 008a 836E     		ldr	r3, [r0, #104]
 2745              	.LVL260:
 2746 008c 43F02003 		orr	r3, r3, #32
 2747 0090 8366     		str	r3, [r0, #104]
 2748              	.L262:
1578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 2749              		.loc 1 1578 0
 2750 0092 0123     		movs	r3, #1
 2751 0094 5360     		str	r3, [r2, #4]
 2752              	.L256:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 106


 2753 0096 0446     		mov	r4, r0
1583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2754              		.loc 1 1583 0
 2755 0098 0368     		ldr	r3, [r0]
 2756 009a 1A68     		ldr	r2, [r3]
 2757 009c 12F0100F 		tst	r2, #16
 2758 00a0 08D0     		beq	.L263
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2759              		.loc 1 1585 0
 2760 00a2 DA68     		ldr	r2, [r3, #12]
 2761 00a4 12F0200F 		tst	r2, #32
 2762 00a8 04D0     		beq	.L263
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2763              		.loc 1 1588 0
 2764 00aa 1022     		movs	r2, #16
 2765 00ac 5A60     		str	r2, [r3, #4]
1590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2766              		.loc 1 1590 0
 2767 00ae 836C     		ldr	r3, [r0, #72]
 2768 00b0 03B1     		cbz	r3, .L263
1593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }          
 2769              		.loc 1 1593 0
 2770 00b2 9847     		blx	r3
 2771              	.LVL261:
 2772              	.L263:
1599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2773              		.loc 1 1599 0
 2774 00b4 2368     		ldr	r3, [r4]
 2775 00b6 1A68     		ldr	r2, [r3]
 2776 00b8 12F0080F 		tst	r2, #8
 2777 00bc 09D0     		beq	.L264
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2778              		.loc 1 1601 0
 2779 00be DA68     		ldr	r2, [r3, #12]
 2780 00c0 12F0100F 		tst	r2, #16
 2781 00c4 05D0     		beq	.L264
1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2782              		.loc 1 1604 0
 2783 00c6 0822     		movs	r2, #8
 2784 00c8 5A60     		str	r2, [r3, #4]
1606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2785              		.loc 1 1606 0
 2786 00ca E36C     		ldr	r3, [r4, #76]
 2787 00cc 0BB1     		cbz	r3, .L264
1609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }          
 2788              		.loc 1 1609 0
 2789 00ce 2046     		mov	r0, r4
 2790 00d0 9847     		blx	r3
 2791              	.LVL262:
 2792              	.L264:
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2793              		.loc 1 1615 0
 2794 00d2 2368     		ldr	r3, [r4]
 2795 00d4 1A68     		ldr	r2, [r3]
 2796 00d6 12F0040F 		tst	r2, #4
 2797 00da 09D0     		beq	.L265
1617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 107


 2798              		.loc 1 1617 0
 2799 00dc DA68     		ldr	r2, [r3, #12]
 2800 00de 12F0080F 		tst	r2, #8
 2801 00e2 05D0     		beq	.L265
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2802              		.loc 1 1620 0
 2803 00e4 0422     		movs	r2, #4
 2804 00e6 5A60     		str	r2, [r3, #4]
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2805              		.loc 1 1622 0
 2806 00e8 236D     		ldr	r3, [r4, #80]
 2807 00ea 0BB1     		cbz	r3, .L265
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }          
 2808              		.loc 1 1625 0
 2809 00ec 2046     		mov	r0, r4
 2810 00ee 9847     		blx	r3
 2811              	.LVL263:
 2812              	.L265:
1631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2813              		.loc 1 1631 0
 2814 00f0 2368     		ldr	r3, [r4]
 2815 00f2 1A68     		ldr	r2, [r3]
 2816 00f4 12F0020F 		tst	r2, #2
 2817 00f8 19D0     		beq	.L266
1633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2818              		.loc 1 1633 0
 2819 00fa DA68     		ldr	r2, [r3, #12]
 2820 00fc 12F0040F 		tst	r2, #4
 2821 0100 15D0     		beq	.L266
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2822              		.loc 1 1636 0
 2823 0102 DA68     		ldr	r2, [r3, #12]
 2824 0104 22F03E02 		bic	r2, r2, #62
 2825 0108 DA60     		str	r2, [r3, #12]
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2826              		.loc 1 1638 0
 2827 010a 94F83D30 		ldrb	r3, [r4, #61]	@ zero_extendqisi2
 2828 010e DBB2     		uxtb	r3, r3
 2829 0110 042B     		cmp	r3, #4
 2830 0112 36D0     		beq	.L273
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2831              		.loc 1 1654 0
 2832 0114 2368     		ldr	r3, [r4]
 2833 0116 0222     		movs	r2, #2
 2834 0118 5A60     		str	r2, [r3, #4]
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2835              		.loc 1 1657 0
 2836 011a 0023     		movs	r3, #0
 2837 011c 84F83C30 		strb	r3, [r4, #60]
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       
 2838              		.loc 1 1660 0
 2839 0120 0123     		movs	r3, #1
 2840 0122 84F83D30 		strb	r3, [r4, #61]
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2841              		.loc 1 1662 0
 2842 0126 636C     		ldr	r3, [r4, #68]
 2843 0128 0BB1     		cbz	r3, .L266
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 108


1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }          
 2844              		.loc 1 1665 0
 2845 012a 2046     		mov	r0, r4
 2846 012c 9847     		blx	r3
 2847              	.LVL264:
 2848              	.L266:
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   {
 2849              		.loc 1 1671 0
 2850 012e A36E     		ldr	r3, [r4, #104]
 2851 0130 03B3     		cbz	r3, .L254
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2852              		.loc 1 1673 0
 2853 0132 0423     		movs	r3, #4
 2854 0134 84F83D30 		strb	r3, [r4, #61]
1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2855              		.loc 1 1676 0
 2856 0138 2268     		ldr	r2, [r4]
 2857 013a D368     		ldr	r3, [r2, #12]
 2858 013c 23F00103 		bic	r3, r3, #1
 2859 0140 D360     		str	r3, [r2, #12]
 2860              	.L269:
1680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       {
 2861              		.loc 1 1680 0
 2862 0142 019B     		ldr	r3, [sp, #4]
 2863 0144 0133     		adds	r3, r3, #1
 2864 0146 0193     		str	r3, [sp, #4]
 2865 0148 AB42     		cmp	r3, r5
 2866 014a 04D8     		bhi	.L268
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2867              		.loc 1 1685 0
 2868 014c 2368     		ldr	r3, [r4]
 2869 014e DB68     		ldr	r3, [r3, #12]
 2870 0150 13F0010F 		tst	r3, #1
 2871 0154 F5D1     		bne	.L269
 2872              	.L268:
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     
 2873              		.loc 1 1688 0
 2874 0156 0023     		movs	r3, #0
 2875 0158 84F83C30 		strb	r3, [r4, #60]
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2876              		.loc 1 1690 0
 2877 015c 2368     		ldr	r3, [r4]
 2878 015e DB68     		ldr	r3, [r3, #12]
 2879 0160 13F0010F 		tst	r3, #1
 2880 0164 19D0     		beq	.L270
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 2881              		.loc 1 1693 0
 2882 0166 0323     		movs	r3, #3
 2883 0168 84F83D30 		strb	r3, [r4, #61]
 2884              	.L271:
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     {
 2885              		.loc 1 1702 0
 2886 016c 636D     		ldr	r3, [r4, #84]
 2887 016e 0BB1     		cbz	r3, .L254
1705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 2888              		.loc 1 1705 0
 2889 0170 2046     		mov	r0, r4
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 109


 2890 0172 9847     		blx	r3
 2891              	.LVL265:
 2892              	.L254:
1709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2893              		.loc 1 1709 0
 2894 0174 03B0     		add	sp, sp, #12
 2895              	.LCFI35:
 2896              		.cfi_remember_state
 2897              		.cfi_def_cfa_offset 12
 2898              		@ sp needed
 2899 0176 30BD     		pop	{r4, r5, pc}
 2900              	.LVL266:
 2901              	.L257:
 2902              	.LCFI36:
 2903              		.cfi_restore_state
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****       }
 2904              		.loc 1 1550 0
 2905 0178 816E     		ldr	r1, [r0, #104]
 2906              	.LVL267:
 2907 017a 41F00201 		orr	r1, r1, #2
 2908 017e 8166     		str	r1, [r0, #104]
 2909 0180 6BE7     		b	.L258
 2910              	.LVL268:
 2911              	.L273:
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 2912              		.loc 1 1641 0
 2913 0182 0023     		movs	r3, #0
 2914 0184 84F83C30 		strb	r3, [r4, #60]
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         
 2915              		.loc 1 1644 0
 2916 0188 0123     		movs	r3, #1
 2917 018a 84F83D30 		strb	r3, [r4, #61]
1646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         {
 2918              		.loc 1 1646 0
 2919 018e A36D     		ldr	r3, [r4, #88]
 2920 0190 002B     		cmp	r3, #0
 2921 0192 EFD0     		beq	.L254
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****         }
 2922              		.loc 1 1648 0
 2923 0194 2046     		mov	r0, r4
 2924 0196 9847     		blx	r3
 2925              	.LVL269:
 2926 0198 ECE7     		b	.L254
 2927              	.L270:
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****     }
 2928              		.loc 1 1698 0
 2929 019a 0123     		movs	r3, #1
 2930 019c 84F83D30 		strb	r3, [r4, #61]
 2931 01a0 E4E7     		b	.L271
 2932              	.L275:
 2933 01a2 00BF     		.align	2
 2934              	.L274:
 2935 01a4 00000000 		.word	SystemCoreClock
 2936 01a8 B5814E1B 		.word	458129845
 2937 01ac C0FFFFAD 		.word	-1375731776
 2938              		.cfi_endproc
 2939              	.LFE153:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 110


 2941              		.section	.text.HAL_MDMA_GetState,"ax",%progbits
 2942              		.align	1
 2943              		.global	HAL_MDMA_GetState
 2944              		.syntax unified
 2945              		.thumb
 2946              		.thumb_func
 2947              		.fpu fpv5-d16
 2949              	HAL_MDMA_GetState:
 2950              	.LFB154:
1737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return hmdma->State;
 2951              		.loc 1 1737 0
 2952              		.cfi_startproc
 2953              		@ args = 0, pretend = 0, frame = 0
 2954              		@ frame_needed = 0, uses_anonymous_args = 0
 2955              		@ link register save eliminated.
 2956              	.LVL270:
1738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 2957              		.loc 1 1738 0
 2958 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 2959              	.LVL271:
1739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2960              		.loc 1 1739 0
 2961 0004 7047     		bx	lr
 2962              		.cfi_endproc
 2963              	.LFE154:
 2965              		.section	.text.HAL_MDMA_GetError,"ax",%progbits
 2966              		.align	1
 2967              		.global	HAL_MDMA_GetError
 2968              		.syntax unified
 2969              		.thumb
 2970              		.thumb_func
 2971              		.fpu fpv5-d16
 2973              	HAL_MDMA_GetError:
 2974              	.LFB155:
1748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c ****   return hmdma->ErrorCode;
 2975              		.loc 1 1748 0
 2976              		.cfi_startproc
 2977              		@ args = 0, pretend = 0, frame = 0
 2978              		@ frame_needed = 0, uses_anonymous_args = 0
 2979              		@ link register save eliminated.
 2980              	.LVL272:
1749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** }
 2981              		.loc 1 1749 0
 2982 0000 806E     		ldr	r0, [r0, #104]
 2983              	.LVL273:
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c **** 
 2984              		.loc 1 1750 0
 2985 0002 7047     		bx	lr
 2986              		.cfi_endproc
 2987              	.LFE155:
 2989              		.text
 2990              	.Letext0:
 2991              		.file 3 "c:\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 2992              		.file 4 "c:\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 2993              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 2994              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2995              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 111


 2996              		.file 8 "c:\\gcc\\arm-none-eabi\\include\\sys\\lock.h"
 2997              		.file 9 "c:\\gcc\\arm-none-eabi\\include\\sys\\_types.h"
 2998              		.file 10 "c:\\gcc\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\stddef.h"
 2999              		.file 11 "c:\\gcc\\arm-none-eabi\\include\\sys\\reent.h"
 3000              		.file 12 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 3001              		.file 13 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 3002              		.file 14 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
 3003              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 3004              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 112


DEFINED SYMBOLS
                            *ABS*:00000000 stm32h7xx_hal_mdma.c
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:17     .text.MDMA_Init:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:23     .text.MDMA_Init:00000000 MDMA_Init
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:222    .text.MDMA_Init:000000dc $d
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:227    .text.MDMA_SetConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:233    .text.MDMA_SetConfig:00000000 MDMA_SetConfig
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:363    .text.MDMA_SetConfig:00000090 $d
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:369    .text.HAL_MDMA_Init:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:376    .text.HAL_MDMA_Init:00000000 HAL_MDMA_Init
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:461    .text.HAL_MDMA_DeInit:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:468    .text.HAL_MDMA_DeInit:00000000 HAL_MDMA_DeInit
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:560    .text.HAL_MDMA_ConfigPostRequestMask:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:567    .text.HAL_MDMA_ConfigPostRequestMask:00000000 HAL_MDMA_ConfigPostRequestMask
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:673    .text.HAL_MDMA_RegisterCallback:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:680    .text.HAL_MDMA_RegisterCallback:00000000 HAL_MDMA_RegisterCallback
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:721    .text.HAL_MDMA_RegisterCallback:0000002e $d
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:727    .text.HAL_MDMA_RegisterCallback:00000034 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:789    .text.HAL_MDMA_UnRegisterCallback:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:796    .text.HAL_MDMA_UnRegisterCallback:00000000 HAL_MDMA_UnRegisterCallback
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:836    .text.HAL_MDMA_UnRegisterCallback:00000030 $d
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:932    .text.HAL_MDMA_LinkedList_CreateNode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:939    .text.HAL_MDMA_LinkedList_CreateNode:00000000 HAL_MDMA_LinkedList_CreateNode
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1245   .text.HAL_MDMA_LinkedList_CreateNode:0000014c $d
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1251   .text.HAL_MDMA_LinkedList_AddNode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1258   .text.HAL_MDMA_LinkedList_AddNode:00000000 HAL_MDMA_LinkedList_AddNode
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1488   .text.HAL_MDMA_LinkedList_RemoveNode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1495   .text.HAL_MDMA_LinkedList_RemoveNode:00000000 HAL_MDMA_LinkedList_RemoveNode
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1705   .text.HAL_MDMA_LinkedList_EnableCircularMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1712   .text.HAL_MDMA_LinkedList_EnableCircularMode:00000000 HAL_MDMA_LinkedList_EnableCircularMode
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1798   .text.HAL_MDMA_LinkedList_DisableCircularMode:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1805   .text.HAL_MDMA_LinkedList_DisableCircularMode:00000000 HAL_MDMA_LinkedList_DisableCircularMode
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1892   .text.HAL_MDMA_Start:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:1899   .text.HAL_MDMA_Start:00000000 HAL_MDMA_Start
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2016   .text.HAL_MDMA_Start_IT:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2023   .text.HAL_MDMA_Start_IT:00000000 HAL_MDMA_Start_IT
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2172   .text.HAL_MDMA_Abort:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2179   .text.HAL_MDMA_Abort:00000000 HAL_MDMA_Abort
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2278   .text.HAL_MDMA_Abort_IT:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2285   .text.HAL_MDMA_Abort_IT:00000000 HAL_MDMA_Abort_IT
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2332   .text.HAL_MDMA_PollForTransfer:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2339   .text.HAL_MDMA_PollForTransfer:00000000 HAL_MDMA_PollForTransfer
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2575   .text.HAL_MDMA_GenerateSWRequest:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2582   .text.HAL_MDMA_GenerateSWRequest:00000000 HAL_MDMA_GenerateSWRequest
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2643   .text.HAL_MDMA_IRQHandler:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2650   .text.HAL_MDMA_IRQHandler:00000000 HAL_MDMA_IRQHandler
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2935   .text.HAL_MDMA_IRQHandler:000001a4 $d
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2942   .text.HAL_MDMA_GetState:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2949   .text.HAL_MDMA_GetState:00000000 HAL_MDMA_GetState
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2966   .text.HAL_MDMA_GetError:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:2973   .text.HAL_MDMA_GetError:00000000 HAL_MDMA_GetError
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:843    .text.HAL_MDMA_UnRegisterCallback:00000037 $d
C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s:843    .text.HAL_MDMA_UnRegisterCallback:00000038 $t

UNDEFINED SYMBOLS
HAL_GetTick
SystemCoreClock
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccOpvSEN.s 			page 113


