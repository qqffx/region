ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_rcc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  17              		.align	1
  18              		.global	HAL_RCC_DeInit
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	HAL_RCC_DeInit:
  25              	.LFB137:
  26              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @file    stm32h7xx_hal_rcc.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   @verbatim
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   ==============================================================================
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     [..]  
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (HSI 64MHz) with Flash 0 wait state,and all peripherals are off except
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       internal SRAM, Flash, JTAG and PWR
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) There is no pre-scaler on High speed (AHB) and Low speed (APB) buses;
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           all peripherals mapped on these buses are running at HSI speed.
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) All GPIOs are in analogue mode , except the JTAG pins which
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     [..]          
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       Once the device started from reset, the user application has to:        
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) Configure the AHB and APB buses pre-scalers
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) Configure the clock kernel source(s) for peripherals which clocks are not
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 2


  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           derived from the System clock through :RCC_D1CCIPR,RCC_D2CCIP1R,RCC_D2CCIP2R
  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           and RCC_D3CCIPR registers
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                       ##### RCC Limitations #####
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   ==============================================================================
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     [..]  
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       from/to registers.
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) If peripheral is mapped on AHB: the delay is 2 AHB clock cycle 
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) If peripheral is mapped on APB: the delay is 2 APB clock cycle 
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     [..]  
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       Implemented Workaround:
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (+) For AHB & APB peripherals, a dummy read to the peripheral register has been
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   @endverbatim
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   ******************************************************************************
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @attention
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *      without specific prior written permission.
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   ******************************************************************************
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */ 
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** #include "stm32h7xx_hal.h"
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /** @addtogroup STM32H7xx_HAL_Driver
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @{
  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 3


  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /** @defgroup RCC  RCC
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief RCC HAL module driver
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @{
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @{
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __HAL_RCC_GPIOA_CLK_ENABLE()
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8 
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** #define __MCO2_CLK_ENABLE()   __HAL_RCC_GPIOC_CLK_ENABLE()
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @}
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @{
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @}
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /* Exported functions --------------------------------------------------------*/
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @{
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  *
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** @verbatim
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  ===============================================================================
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  ===============================================================================
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     [..]
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       (HSE, HSI, LSE,CSI, LSI,HSI48, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB3, A
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****        AHB2,AHB4,APB3, APB1L, APB1H, APB2, and APB4).
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) HSI (high-speed internal), 64 MHz factory-trimmed RC used directly or through
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              the PLL as System clock source.
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) CSI is a low-power RC oscillator which can be used directly as system clock, periphera
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              clock, or PLL input.But even with frequency calibration, is less accurate than an 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 4


 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              external crystal oscillator or ceramic resonator.  
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              clock source.
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 48 MHz crystal oscillator used directly or
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) PLL , The RCC features three independent PLLs (clocked by HSI , HSE or CSI), 
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              featuring three different output clocks and able  to work either in integer or Fractio
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****            (++) A main PLL, PLL1, which is generally used to provide clocks to the CPU 
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                 and to some peripherals.
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****            (++) Two dedicated PLLs, PLL2 and PLL3, which are used to generate the kernel clock for 
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) CSS (Clock security system), once enabled and if a HSE clock failure occurs
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             (HSE used directly or through PLL as System clock source), the System clock
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              is automatically switched to HSI and an interrupt is generated if enabled.
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              The interrupt is linked to the Cortex-M NMI (Non-Mask-able Interrupt)
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              exception vector.
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) MCO1 (micro controller clock output), used to output HSI, LSE, HSE, PLL1(PLL1_Q)
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              or HSI48 clock (through a configurable pre-scaler) on PA8 pin.
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) MCO2 (micro controller clock output), used to output HSE, PLL2(PLL2_P), SYSCLK, 
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              LSI, CSI, or PLL1(PLL1_P) clock (through a configurable pre-scaler) on PC9 pin.
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     [..] System, AHB and APB buses clocks configuration
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): CSI,HSI,
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              HSE and PLL.
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System core clock through configurable
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              pre-scaler and used to clock the CPU, memory and peripherals mapped
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              on AHB and APB bus of the 3 Domains (D1, D2, D3) through configurable pre-scalers
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              and used to clock the peripherals mapped on these buses. You can use
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve system clock frequency.
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except those 
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              with dual clock domain where kernel source clock could be selected through 
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****              RCC_D1CCIPR,RCC_D2CCIP1R,RCC_D2CCIP2R and RCC_D3CCIPR registers. 
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** @endverbatim
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @{
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            - HSE, PLL1, PLL2 and PLL3 OFF
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            - AHB, APB Bus pre-scaler set to 1.
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            - All interrupts disabled
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            - Peripheral clocks  
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks 
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval None
 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 5


 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
  27              		.loc 1 205 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Set HSION bit */
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
  32              		.loc 1 207 0
  33 0000 0D4B     		ldr	r3, .L2
  34 0002 1A68     		ldr	r2, [r3]
  35 0004 42F00102 		orr	r2, r2, #1
  36 0008 1A60     		str	r2, [r3]
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset CFGR register */
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  37              		.loc 1 210 0
  38 000a 0022     		movs	r2, #0
  39 000c 1A61     		str	r2, [r3, #16]
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset CSION , CSIKERON, HSEON, HSI48ON, HSECSSON,HSIDIV, PLL1ON, PLL2ON, PLL3ON bits */
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | 
  40              		.loc 1 213 0
  41 000e 1868     		ldr	r0, [r3]
  42 0010 0A49     		ldr	r1, .L2+4
  43 0012 0140     		ands	r1, r1, r0
  44 0014 1960     		str	r1, [r3]
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   |RCC_CR_CSSHSEON | RCC_CR_PLL1ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset D1CFGR register */
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->D1CFGR);
  45              		.loc 1 217 0
  46 0016 9A61     		str	r2, [r3, #24]
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset D2CFGR register */
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->D2CFGR);
  47              		.loc 1 220 0
  48 0018 DA61     		str	r2, [r3, #28]
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset D3CFGR register */
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->D3CFGR);
  49              		.loc 1 223 0
  50 001a 1A62     		str	r2, [r3, #32]
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset PLLCKSELR register */
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLCKSELR);
  51              		.loc 1 226 0
  52 001c 9A62     		str	r2, [r3, #40]
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset PLLCFGR register */
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLCFGR);
  53              		.loc 1 229 0
  54 001e DA62     		str	r2, [r3, #44]
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset PLL1DIVR register */
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLL1DIVR);
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 6


  55              		.loc 1 232 0
  56 0020 1A63     		str	r2, [r3, #48]
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset PLL1FRACR register */
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLL1FRACR);
  57              		.loc 1 235 0
  58 0022 5A63     		str	r2, [r3, #52]
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset PLL2DIVR register */
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLL2DIVR);
  59              		.loc 1 238 0
  60 0024 9A63     		str	r2, [r3, #56]
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset PLL2FRACR register */
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLL2FRACR);
  61              		.loc 1 241 0
  62 0026 DA63     		str	r2, [r3, #60]
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset PLL3DIVR register */
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLL3DIVR);
  63              		.loc 1 244 0
  64 0028 1A64     		str	r2, [r3, #64]
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset PLL3FRACR register */
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLL3FRACR);
  65              		.loc 1 247 0
  66 002a 5A64     		str	r2, [r3, #68]
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
  67              		.loc 1 250 0
  68 002c 1968     		ldr	r1, [r3]
  69 002e 21F48021 		bic	r1, r1, #262144
  70 0032 1960     		str	r1, [r3]
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Disable all interrupts */
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   CLEAR_REG(RCC->CICR);
  71              		.loc 1 253 0
  72 0034 9A66     		str	r2, [r3, #104]
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
  73              		.loc 1 254 0
  74 0036 7047     		bx	lr
  75              	.L3:
  76              		.align	2
  77              	.L2:
  78 0038 00440258 		.word	1476543488
  79 003c 45EDF6EA 		.word	-352916155
  80              		.cfi_endproc
  81              	.LFE137:
  83              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
  84              		.align	1
  85              		.weak	HAL_RCC_OscConfig
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu fpv5-d16
  91              	HAL_RCC_OscConfig:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 7


  92              	.LFB138:
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         supported by this function. User should request a transition to LSE Off
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         supported by this function. User should request a transition to HSE Off
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval HAL status
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
  93              		.loc 1 271 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              	.LVL0:
  98 0000 38B5     		push	{r3, r4, r5, lr}
  99              	.LCFI0:
 100              		.cfi_def_cfa_offset 16
 101              		.cfi_offset 3, -16
 102              		.cfi_offset 4, -12
 103              		.cfi_offset 5, -8
 104              		.cfi_offset 14, -4
 105 0002 0446     		mov	r4, r0
 106              	.LVL1:
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   uint32_t tickstart = 0;
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Check the parameters */
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 107              		.loc 1 277 0
 108 0004 0368     		ldr	r3, [r0]
 109 0006 13F0010F 		tst	r3, #1
 110 000a 2AD0     		beq	.L5
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the parameters */
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 111              		.loc 1 282 0
 112 000c AC4B     		ldr	r3, .L109
 113 000e 1B69     		ldr	r3, [r3, #16]
 114 0010 03F03803 		and	r3, r3, #56
 115 0014 102B     		cmp	r3, #16
 116 0016 1BD0     		beq	.L6
 117              		.loc 1 282 0 is_stmt 0 discriminator 1
 118 0018 A94B     		ldr	r3, .L109
 119 001a 1B69     		ldr	r3, [r3, #16]
 120 001c 03F03803 		and	r3, r3, #56
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 8


 121 0020 182B     		cmp	r3, #24
 122 0022 0FD0     		beq	.L92
 123              	.L7:
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         return HAL_ERROR;
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     else
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 124              		.loc 1 292 0 is_stmt 1
 125 0024 6368     		ldr	r3, [r4, #4]
 126 0026 B3F5803F 		cmp	r3, #65536
 127 002a 44D0     		beq	.L93
 128              		.loc 1 292 0 is_stmt 0 discriminator 2
 129 002c 002B     		cmp	r3, #0
 130 002e 58D1     		bne	.L11
 131              		.loc 1 292 0 discriminator 3
 132 0030 A34B     		ldr	r3, .L109
 133 0032 1A68     		ldr	r2, [r3]
 134 0034 22F48032 		bic	r2, r2, #65536
 135 0038 1A60     		str	r2, [r3]
 136 003a 1A68     		ldr	r2, [r3]
 137 003c 22F48022 		bic	r2, r2, #262144
 138 0040 1A60     		str	r2, [r3]
 139 0042 3DE0     		b	.L10
 140              	.L92:
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 141              		.loc 1 282 0 is_stmt 1 discriminator 2
 142 0044 9E4B     		ldr	r3, .L109
 143 0046 9B6A     		ldr	r3, [r3, #40]
 144 0048 03F00303 		and	r3, r3, #3
 145 004c 022B     		cmp	r3, #2
 146 004e E9D1     		bne	.L7
 147              	.L6:
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 148              		.loc 1 284 0
 149 0050 9B4B     		ldr	r3, .L109
 150 0052 1B68     		ldr	r3, [r3]
 151 0054 13F4003F 		tst	r3, #131072
 152 0058 03D0     		beq	.L5
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 153              		.loc 1 284 0 is_stmt 0 discriminator 1
 154 005a 6368     		ldr	r3, [r4, #4]
 155 005c 002B     		cmp	r3, #0
 156 005e 00F08382 		beq	.L94
 157              	.LVL2:
 158              	.L5:
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Check the HSE State */
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 9


 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till HSE is ready */
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 159              		.loc 1 326 0 is_stmt 1
 160 0062 2368     		ldr	r3, [r4]
 161 0064 13F0020F 		tst	r3, #2
 162 0068 00F09480 		beq	.L18
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the parameters */
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* When the HSI is used as system clock it will not disabled */
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 163              		.loc 1 333 0
 164 006c 944B     		ldr	r3, .L109
 165 006e 1B69     		ldr	r3, [r3, #16]
 166 0070 13F0380F 		tst	r3, #56
 167 0074 60D0     		beq	.L19
 168              		.loc 1 333 0 is_stmt 0 discriminator 1
 169 0076 924B     		ldr	r3, .L109
 170 0078 1B69     		ldr	r3, [r3, #16]
 171 007a 03F03803 		and	r3, r3, #56
 172 007e 182B     		cmp	r3, #24
 173 0080 55D0     		beq	.L95
 174              	.L20:
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         return HAL_ERROR;
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 10


 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till HSI is ready */
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     else
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Check the HSI State */
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 175              		.loc 1 365 0 is_stmt 1
 176 0082 E368     		ldr	r3, [r4, #12]
 177 0084 002B     		cmp	r3, #0
 178 0086 00F0BD80 		beq	.L24
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 179              		.loc 1 368 0
 180 008a 8D49     		ldr	r1, .L109
 181 008c 0A68     		ldr	r2, [r1]
 182 008e 22F01902 		bic	r2, r2, #25
 183 0092 1343     		orrs	r3, r3, r2
 184 0094 0B60     		str	r3, [r1]
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 185              		.loc 1 371 0
 186 0096 FFF7FEFF 		bl	HAL_GetTick
 187              	.LVL3:
 188 009a 0546     		mov	r5, r0
 189              	.LVL4:
 190              	.L25:
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till HSI is ready */
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 191              		.loc 1 374 0
 192 009c 884B     		ldr	r3, .L109
 193 009e 1B68     		ldr	r3, [r3]
 194 00a0 13F0040F 		tst	r3, #4
 195 00a4 40F09E80 		bne	.L96
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 11


 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 196              		.loc 1 376 0
 197 00a8 FFF7FEFF 		bl	HAL_GetTick
 198              	.LVL5:
 199 00ac 401B     		subs	r0, r0, r5
 200 00ae 0228     		cmp	r0, #2
 201 00b0 F4D9     		bls	.L25
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 202              		.loc 1 378 0
 203 00b2 0320     		movs	r0, #3
 204 00b4 5DE2     		b	.L8
 205              	.LVL6:
 206              	.L93:
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 207              		.loc 1 292 0 discriminator 1
 208 00b6 824A     		ldr	r2, .L109
 209 00b8 1368     		ldr	r3, [r2]
 210 00ba 43F48033 		orr	r3, r3, #65536
 211 00be 1360     		str	r3, [r2]
 212              	.L10:
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 213              		.loc 1 295 0
 214 00c0 6368     		ldr	r3, [r4, #4]
 215 00c2 2BB3     		cbz	r3, .L13
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 216              		.loc 1 298 0
 217 00c4 FFF7FEFF 		bl	HAL_GetTick
 218              	.LVL7:
 219 00c8 0546     		mov	r5, r0
 220              	.LVL8:
 221              	.L14:
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 222              		.loc 1 301 0
 223 00ca 7D4B     		ldr	r3, .L109
 224 00cc 1B68     		ldr	r3, [r3]
 225 00ce 13F4003F 		tst	r3, #131072
 226 00d2 C6D1     		bne	.L5
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 227              		.loc 1 303 0
 228 00d4 FFF7FEFF 		bl	HAL_GetTick
 229              	.LVL9:
 230 00d8 401B     		subs	r0, r0, r5
 231 00da 6428     		cmp	r0, #100
 232 00dc F5D9     		bls	.L14
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 233              		.loc 1 305 0
 234 00de 0320     		movs	r0, #3
 235 00e0 47E2     		b	.L8
 236              	.LVL10:
 237              	.L11:
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 238              		.loc 1 292 0 discriminator 4
 239 00e2 B3F5A02F 		cmp	r3, #327680
 240 00e6 09D0     		beq	.L97
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 241              		.loc 1 292 0 is_stmt 0 discriminator 6
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 12


 242 00e8 754B     		ldr	r3, .L109
 243 00ea 1A68     		ldr	r2, [r3]
 244 00ec 22F48032 		bic	r2, r2, #65536
 245 00f0 1A60     		str	r2, [r3]
 246 00f2 1A68     		ldr	r2, [r3]
 247 00f4 22F48022 		bic	r2, r2, #262144
 248 00f8 1A60     		str	r2, [r3]
 249 00fa E1E7     		b	.L10
 250              	.L97:
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 251              		.loc 1 292 0 discriminator 5
 252 00fc 704B     		ldr	r3, .L109
 253 00fe 1A68     		ldr	r2, [r3]
 254 0100 42F48022 		orr	r2, r2, #262144
 255 0104 1A60     		str	r2, [r3]
 256 0106 1A68     		ldr	r2, [r3]
 257 0108 42F48032 		orr	r2, r2, #65536
 258 010c 1A60     		str	r2, [r3]
 259 010e D7E7     		b	.L10
 260              	.L13:
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 261              		.loc 1 312 0 is_stmt 1
 262 0110 FFF7FEFF 		bl	HAL_GetTick
 263              	.LVL11:
 264 0114 0546     		mov	r5, r0
 265              	.LVL12:
 266              	.L16:
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 267              		.loc 1 315 0
 268 0116 6A4B     		ldr	r3, .L109
 269 0118 1B68     		ldr	r3, [r3]
 270 011a 13F4003F 		tst	r3, #131072
 271 011e A0D0     		beq	.L5
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 272              		.loc 1 317 0
 273 0120 FFF7FEFF 		bl	HAL_GetTick
 274              	.LVL13:
 275 0124 401B     		subs	r0, r0, r5
 276 0126 6428     		cmp	r0, #100
 277 0128 F5D9     		bls	.L16
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 278              		.loc 1 319 0
 279 012a 0320     		movs	r0, #3
 280 012c 21E2     		b	.L8
 281              	.LVL14:
 282              	.L95:
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 283              		.loc 1 333 0 discriminator 2
 284 012e 644B     		ldr	r3, .L109
 285 0130 9B6A     		ldr	r3, [r3, #40]
 286 0132 13F0030F 		tst	r3, #3
 287 0136 A4D1     		bne	.L20
 288              	.L19:
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 289              		.loc 1 336 0
 290 0138 614B     		ldr	r3, .L109
 291 013a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 13


 292 013c 13F0040F 		tst	r3, #4
 293 0140 03D0     		beq	.L21
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 294              		.loc 1 336 0 is_stmt 0 discriminator 1
 295 0142 E368     		ldr	r3, [r4, #12]
 296 0144 002B     		cmp	r3, #0
 297 0146 00F01182 		beq	.L72
 298              	.L21:
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 299              		.loc 1 344 0 is_stmt 1
 300 014a 5D4A     		ldr	r2, .L109
 301 014c 1368     		ldr	r3, [r2]
 302 014e 23F01903 		bic	r3, r3, #25
 303 0152 E168     		ldr	r1, [r4, #12]
 304 0154 0B43     		orrs	r3, r3, r1
 305 0156 1360     		str	r3, [r2]
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 306              		.loc 1 347 0
 307 0158 FFF7FEFF 		bl	HAL_GetTick
 308              	.LVL15:
 309 015c 0546     		mov	r5, r0
 310              	.LVL16:
 311              	.L22:
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 312              		.loc 1 350 0
 313 015e 584B     		ldr	r3, .L109
 314 0160 1B68     		ldr	r3, [r3]
 315 0162 13F0040F 		tst	r3, #4
 316 0166 06D1     		bne	.L98
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 317              		.loc 1 352 0
 318 0168 FFF7FEFF 		bl	HAL_GetTick
 319              	.LVL17:
 320 016c 401B     		subs	r0, r0, r5
 321 016e 0228     		cmp	r0, #2
 322 0170 F5D9     		bls	.L22
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 323              		.loc 1 354 0
 324 0172 0320     		movs	r0, #3
 325 0174 FDE1     		b	.L8
 326              	.L98:
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 327              		.loc 1 358 0
 328 0176 5248     		ldr	r0, .L109
 329 0178 4368     		ldr	r3, [r0, #4]
 330 017a 23F47C33 		bic	r3, r3, #258048
 331 017e 2169     		ldr	r1, [r4, #16]
 332              	.LVL18:
 333              	.LBB38:
 334              	.LBB39:
 335              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     02. February 2017
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 14


   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  39:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  48:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  50:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wpacked"
  56:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wattributes"
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic pop
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 15


  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT           struct __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  84:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 119:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 16


 121:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 136:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 138:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 139:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 147:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 17


 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 185:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 199:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 18


 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 242:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 246:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 276:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 19


 292:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 293:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 294:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 297:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 335:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 336:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 337:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 340:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 347:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 20


 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 374:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 376:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 380:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 21


 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 22


 463:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 487:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 489:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 494:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 515:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 517:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 23


 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 524:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 539:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 543:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 547:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 561:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 566:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 570:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 24


 577:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 581:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 591:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 602:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 607:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 620:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 25


 634:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 635:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0U);
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 659:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 662:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 676:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 687:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 688:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 26


 691:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 692:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("nop");
 697:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 709:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 718:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 719:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 720:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 725:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 728:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 729:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("sev");
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 740:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 741:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 743:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 744:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 745:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 747:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 27


 748:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 770:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 771:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 776:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 792:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 798:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 28


 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 813:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 822:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 823:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 824:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 837:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 841:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 852:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 336              		.loc 2 857 0
 337 0180 4FF47C32 		mov	r2, #258048
 338              		.syntax unified
 339              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 29


 340 0184 92FAA2F2 		rbit r2, r2
 341              	@ 0 "" 2
 342              	.LVL19:
 343              		.thumb
 344              		.syntax unified
 345              	.LBE39:
 346              	.LBE38:
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 347              		.loc 1 358 0
 348 0188 B2FA82F2 		clz	r2, r2
 349 018c 01FA02F2 		lsl	r2, r1, r2
 350 0190 1343     		orrs	r3, r3, r2
 351 0192 4360     		str	r3, [r0, #4]
 352              	.LVL20:
 353              	.L18:
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till HSI is ready */
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*----------------------------- CSI Configuration --------------------------*/
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 354              		.loc 1 405 0
 355 0194 2368     		ldr	r3, [r4]
 356 0196 13F0100F 		tst	r3, #16
 357 019a 66D0     		beq	.L29
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the parameters */
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* When the CSI is used as system clock it will not disabled */
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 358              		.loc 1 412 0
 359 019c 484B     		ldr	r3, .L109
 360 019e 1B69     		ldr	r3, [r3, #16]
 361 01a0 03F03803 		and	r3, r3, #56
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 30


 362 01a4 082B     		cmp	r3, #8
 363 01a6 47D0     		beq	.L30
 364              		.loc 1 412 0 is_stmt 0 discriminator 1
 365 01a8 454B     		ldr	r3, .L109
 366 01aa 1B69     		ldr	r3, [r3, #16]
 367 01ac 03F03803 		and	r3, r3, #56
 368 01b0 182B     		cmp	r3, #24
 369 01b2 3BD0     		beq	.L99
 370              	.L31:
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* When CSI is used as system clock it will not disabled */
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         return HAL_ERROR;
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     else
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Check the CSI State */
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 371              		.loc 1 429 0 is_stmt 1
 372 01b4 E369     		ldr	r3, [r4, #28]
 373 01b6 002B     		cmp	r3, #0
 374 01b8 00F08480 		beq	.L33
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (CSI). */
 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_CSI_ENABLE();
 375              		.loc 1 432 0
 376 01bc 404A     		ldr	r2, .L109
 377 01be 1368     		ldr	r3, [r2]
 378 01c0 43F08003 		orr	r3, r3, #128
 379 01c4 1360     		str	r3, [r2]
 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 380              		.loc 1 435 0
 381 01c6 FFF7FEFF 		bl	HAL_GetTick
 382              	.LVL21:
 383 01ca 0546     		mov	r5, r0
 384              	.LVL22:
 385              	.L34:
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till CSI is ready */
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 386              		.loc 1 438 0
 387 01cc 3C4B     		ldr	r3, .L109
 388 01ce 1B68     		ldr	r3, [r3]
 389 01d0 13F4807F 		tst	r3, #256
 390 01d4 64D1     		bne	.L100
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 31


 391              		.loc 1 440 0
 392 01d6 FFF7FEFF 		bl	HAL_GetTick
 393              	.LVL23:
 394 01da 401B     		subs	r0, r0, r5
 395 01dc 0228     		cmp	r0, #2
 396 01de F5D9     		bls	.L34
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 397              		.loc 1 442 0
 398 01e0 0320     		movs	r0, #3
 399 01e2 C6E1     		b	.L8
 400              	.L96:
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 401              		.loc 1 383 0
 402 01e4 3648     		ldr	r0, .L109
 403 01e6 4368     		ldr	r3, [r0, #4]
 404 01e8 23F47C33 		bic	r3, r3, #258048
 405 01ec 2169     		ldr	r1, [r4, #16]
 406              	.LVL24:
 407              	.LBB40:
 408              	.LBB41:
 409              		.loc 2 857 0
 410 01ee 4FF47C32 		mov	r2, #258048
 411              		.syntax unified
 412              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 413 01f2 92FAA2F2 		rbit r2, r2
 414              	@ 0 "" 2
 415              	.LVL25:
 416              		.thumb
 417              		.syntax unified
 418              	.LBE41:
 419              	.LBE40:
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 420              		.loc 1 383 0
 421 01f6 B2FA82F2 		clz	r2, r2
 422 01fa 01FA02F2 		lsl	r2, r1, r2
 423 01fe 1343     		orrs	r3, r3, r2
 424 0200 4360     		str	r3, [r0, #4]
 425 0202 C7E7     		b	.L18
 426              	.LVL26:
 427              	.L24:
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 428              		.loc 1 388 0
 429 0204 2E4A     		ldr	r2, .L109
 430 0206 1368     		ldr	r3, [r2]
 431 0208 23F00103 		bic	r3, r3, #1
 432 020c 1360     		str	r3, [r2]
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 433              		.loc 1 391 0
 434 020e FFF7FEFF 		bl	HAL_GetTick
 435              	.LVL27:
 436 0212 0546     		mov	r5, r0
 437              	.LVL28:
 438              	.L27:
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 439              		.loc 1 394 0
 440 0214 2A4B     		ldr	r3, .L109
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 32


 441 0216 1B68     		ldr	r3, [r3]
 442 0218 13F0040F 		tst	r3, #4
 443 021c BAD0     		beq	.L18
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 444              		.loc 1 396 0
 445 021e FFF7FEFF 		bl	HAL_GetTick
 446              	.LVL29:
 447 0222 401B     		subs	r0, r0, r5
 448 0224 0228     		cmp	r0, #2
 449 0226 F5D9     		bls	.L27
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 450              		.loc 1 398 0
 451 0228 0320     		movs	r0, #3
 452 022a A2E1     		b	.L8
 453              	.LVL30:
 454              	.L99:
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 455              		.loc 1 412 0 discriminator 2
 456 022c 244B     		ldr	r3, .L109
 457 022e 9B6A     		ldr	r3, [r3, #40]
 458 0230 03F00303 		and	r3, r3, #3
 459 0234 012B     		cmp	r3, #1
 460 0236 BDD1     		bne	.L31
 461              	.L30:
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 462              		.loc 1 415 0
 463 0238 214B     		ldr	r3, .L109
 464 023a 1B68     		ldr	r3, [r3]
 465 023c 13F4807F 		tst	r3, #256
 466 0240 04D0     		beq	.L32
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 467              		.loc 1 415 0 is_stmt 0 discriminator 1
 468 0242 E369     		ldr	r3, [r4, #28]
 469 0244 802B     		cmp	r3, #128
 470 0246 01D0     		beq	.L32
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 471              		.loc 1 417 0 is_stmt 1
 472 0248 0120     		movs	r0, #1
 473 024a 92E1     		b	.L8
 474              	.L32:
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 475              		.loc 1 423 0
 476 024c 1C48     		ldr	r0, .L109
 477 024e 4368     		ldr	r3, [r0, #4]
 478 0250 23F0F843 		bic	r3, r3, #2080374784
 479 0254 216A     		ldr	r1, [r4, #32]
 480              	.LVL31:
 481              	.LBB42:
 482              	.LBB43:
 483              		.loc 2 857 0
 484 0256 4FF0F842 		mov	r2, #2080374784
 485              		.syntax unified
 486              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 487 025a 92FAA2F2 		rbit r2, r2
 488              	@ 0 "" 2
 489              	.LVL32:
 490              		.thumb
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 33


 491              		.syntax unified
 492              	.LBE43:
 493              	.LBE42:
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 494              		.loc 1 423 0
 495 025e B2FA82F2 		clz	r2, r2
 496 0262 01FA02F2 		lsl	r2, r1, r2
 497 0266 1343     		orrs	r3, r3, r2
 498 0268 4360     		str	r3, [r0, #4]
 499              	.L29:
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (CSI). */
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_CSI_DISABLE();
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till CSI is ready */
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 500              		.loc 1 469 0
 501 026a 2368     		ldr	r3, [r4]
 502 026c 13F0080F 		tst	r3, #8
 503 0270 50D0     		beq	.L38
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the parameters */
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSI State */
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 504              		.loc 1 475 0
 505 0272 6369     		ldr	r3, [r4, #20]
 506 0274 002B     		cmp	r3, #0
 507 0276 39D0     		beq	.L39
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 508              		.loc 1 478 0
 509 0278 114A     		ldr	r2, .L109
 510 027a 536F     		ldr	r3, [r2, #116]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 34


 511 027c 43F00103 		orr	r3, r3, #1
 512 0280 5367     		str	r3, [r2, #116]
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Get Start Tick*/
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 513              		.loc 1 481 0
 514 0282 FFF7FEFF 		bl	HAL_GetTick
 515              	.LVL33:
 516 0286 0546     		mov	r5, r0
 517              	.LVL34:
 518              	.L40:
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Wait till LSI is ready */
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 519              		.loc 1 484 0
 520 0288 0D4B     		ldr	r3, .L109
 521 028a 5B6F     		ldr	r3, [r3, #116]
 522 028c 13F0020F 		tst	r3, #2
 523 0290 40D1     		bne	.L38
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 524              		.loc 1 486 0
 525 0292 FFF7FEFF 		bl	HAL_GetTick
 526              	.LVL35:
 527 0296 401B     		subs	r0, r0, r5
 528 0298 0228     		cmp	r0, #2
 529 029a F5D9     		bls	.L40
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 530              		.loc 1 488 0
 531 029c 0320     		movs	r0, #3
 532 029e 68E1     		b	.L8
 533              	.L100:
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 534              		.loc 1 447 0
 535 02a0 0748     		ldr	r0, .L109
 536 02a2 4368     		ldr	r3, [r0, #4]
 537 02a4 23F0F843 		bic	r3, r3, #2080374784
 538 02a8 216A     		ldr	r1, [r4, #32]
 539              	.LVL36:
 540              	.LBB44:
 541              	.LBB45:
 542              		.loc 2 857 0
 543 02aa 4FF0F842 		mov	r2, #2080374784
 544              		.syntax unified
 545              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 546 02ae 92FAA2F2 		rbit r2, r2
 547              	@ 0 "" 2
 548              	.LVL37:
 549              		.thumb
 550              		.syntax unified
 551              	.LBE45:
 552              	.LBE44:
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 553              		.loc 1 447 0
 554 02b2 B2FA82F2 		clz	r2, r2
 555 02b6 01FA02F2 		lsl	r2, r1, r2
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 35


 556 02ba 1343     		orrs	r3, r3, r2
 557 02bc 4360     		str	r3, [r0, #4]
 558 02be D4E7     		b	.L29
 559              	.L110:
 560              		.align	2
 561              	.L109:
 562 02c0 00440258 		.word	1476543488
 563              	.LVL38:
 564              	.L33:
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 565              		.loc 1 452 0
 566 02c4 AC4A     		ldr	r2, .L111
 567 02c6 1368     		ldr	r3, [r2]
 568 02c8 23F08003 		bic	r3, r3, #128
 569 02cc 1360     		str	r3, [r2]
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 570              		.loc 1 455 0
 571 02ce FFF7FEFF 		bl	HAL_GetTick
 572              	.LVL39:
 573 02d2 0546     		mov	r5, r0
 574              	.LVL40:
 575              	.L36:
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 576              		.loc 1 458 0
 577 02d4 A84B     		ldr	r3, .L111
 578 02d6 1B68     		ldr	r3, [r3]
 579 02d8 13F4807F 		tst	r3, #256
 580 02dc C5D0     		beq	.L29
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 581              		.loc 1 460 0
 582 02de FFF7FEFF 		bl	HAL_GetTick
 583              	.LVL41:
 584 02e2 401B     		subs	r0, r0, r5
 585 02e4 0228     		cmp	r0, #2
 586 02e6 F5D9     		bls	.L36
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 587              		.loc 1 462 0
 588 02e8 0320     		movs	r0, #3
 589 02ea 42E1     		b	.L8
 590              	.LVL42:
 591              	.L39:
 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     else
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 592              		.loc 1 495 0
 593 02ec A24A     		ldr	r2, .L111
 594 02ee 536F     		ldr	r3, [r2, #116]
 595 02f0 23F00103 		bic	r3, r3, #1
 596 02f4 5367     		str	r3, [r2, #116]
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Get Start Tick*/
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 597              		.loc 1 498 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 36


 598 02f6 FFF7FEFF 		bl	HAL_GetTick
 599              	.LVL43:
 600 02fa 0546     		mov	r5, r0
 601              	.LVL44:
 602              	.L42:
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Wait till LSI is ready */
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 603              		.loc 1 501 0
 604 02fc 9E4B     		ldr	r3, .L111
 605 02fe 5B6F     		ldr	r3, [r3, #116]
 606 0300 13F0020F 		tst	r3, #2
 607 0304 06D0     		beq	.L38
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 608              		.loc 1 503 0
 609 0306 FFF7FEFF 		bl	HAL_GetTick
 610              	.LVL45:
 611 030a 401B     		subs	r0, r0, r5
 612 030c 0228     		cmp	r0, #2
 613 030e F5D9     		bls	.L42
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 614              		.loc 1 505 0
 615 0310 0320     		movs	r0, #3
 616 0312 2EE1     		b	.L8
 617              	.LVL46:
 618              	.L38:
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*------------------------------ HSI48 Configuration -------------------------*/ 
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 619              		.loc 1 512 0
 620 0314 2368     		ldr	r3, [r4]
 621 0316 13F0200F 		tst	r3, #32
 622 031a 29D0     		beq	.L44
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the parameters */
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the HSI48 State */
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 623              		.loc 1 518 0
 624 031c A369     		ldr	r3, [r4, #24]
 625 031e 9BB1     		cbz	r3, .L45
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (HSI48). */
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       __HAL_RCC_HSI48_ENABLE();
 626              		.loc 1 521 0
 627 0320 954A     		ldr	r2, .L111
 628 0322 1368     		ldr	r3, [r2]
 629 0324 43F48053 		orr	r3, r3, #4096
 630 0328 1360     		str	r3, [r2]
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 37


 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Get time-out */
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 631              		.loc 1 524 0
 632 032a FFF7FEFF 		bl	HAL_GetTick
 633              	.LVL47:
 634 032e 0546     		mov	r5, r0
 635              	.LVL48:
 636              	.L46:
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Wait till HSI48 is ready */  
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 637              		.loc 1 527 0
 638 0330 914B     		ldr	r3, .L111
 639 0332 1B68     		ldr	r3, [r3]
 640 0334 13F4005F 		tst	r3, #8192
 641 0338 1AD1     		bne	.L44
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 642              		.loc 1 529 0
 643 033a FFF7FEFF 		bl	HAL_GetTick
 644              	.LVL49:
 645 033e 401B     		subs	r0, r0, r5
 646 0340 0228     		cmp	r0, #2
 647 0342 F5D9     		bls	.L46
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 648              		.loc 1 531 0
 649 0344 0320     		movs	r0, #3
 650 0346 14E1     		b	.L8
 651              	.LVL50:
 652              	.L45:
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }      
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       } 
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     else
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (HSI48). */
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       __HAL_RCC_HSI48_DISABLE();
 653              		.loc 1 538 0
 654 0348 8B4A     		ldr	r2, .L111
 655 034a 1368     		ldr	r3, [r2]
 656 034c 23F48053 		bic	r3, r3, #4096
 657 0350 1360     		str	r3, [r2]
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Get time-out */
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 658              		.loc 1 541 0
 659 0352 FFF7FEFF 		bl	HAL_GetTick
 660              	.LVL51:
 661 0356 0546     		mov	r5, r0
 662              	.LVL52:
 663              	.L48:
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Wait till HSI48 is ready */  
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 664              		.loc 1 544 0
 665 0358 874B     		ldr	r3, .L111
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 38


 666 035a 1B68     		ldr	r3, [r3]
 667 035c 13F4005F 		tst	r3, #8192
 668 0360 06D0     		beq	.L44
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 669              		.loc 1 546 0
 670 0362 FFF7FEFF 		bl	HAL_GetTick
 671              	.LVL53:
 672 0366 401B     		subs	r0, r0, r5
 673 0368 0228     		cmp	r0, #2
 674 036a F5D9     		bls	.L48
 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 675              		.loc 1 548 0
 676 036c 0320     		movs	r0, #3
 677 036e 00E1     		b	.L8
 678              	.LVL54:
 679              	.L44:
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }      
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       } 
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 680              		.loc 1 554 0
 681 0370 2368     		ldr	r3, [r4]
 682 0372 13F0040F 		tst	r3, #4
 683 0376 21D1     		bne	.L101
 684              	.L50:
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the parameters */
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Enable write access to Backup domain */
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     PWR->CR1 |= PWR_CR1_DBP;
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Wait for Backup domain Write protection disable */
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         return HAL_TIMEOUT;
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSE State */
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Get Start Tick*/
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Wait till LSE is ready */
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 39


 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     else
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Get Start Tick*/
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Wait till LSE is ready */
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Check the parameters */
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 685              		.loc 1 608 0
 686 0378 636A     		ldr	r3, [r4, #36]
 687 037a 002B     		cmp	r3, #0
 688 037c 00F0F880 		beq	.L86
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 689              		.loc 1 611 0
 690 0380 7D4A     		ldr	r2, .L111
 691 0382 1269     		ldr	r2, [r2, #16]
 692 0384 02F03802 		and	r2, r2, #56
 693 0388 182A     		cmp	r2, #24
 694 038a 00F0F380 		beq	.L87
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 695              		.loc 1 613 0
 696 038e 022B     		cmp	r3, #2
 697 0390 75D0     		beq	.L102
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Check the parameters */
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Disable the main PLL. */
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 40


 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till PLL is ready */
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ,
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLR);
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          /* Configure PLL  PLL1FRACN */
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Select PLL1 input reference frequency range: VCI */ 
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Select PLL1 output frequency range : VCO */
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Enable PLL System Clock output. */
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Enable PLL1Q Clock output. */
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Enable PLL1R  Clock output. */
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Enable PLL1FRACN . */
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****          __HAL_RCC_PLLFRACN_ENABLE();
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Enable the main PLL. */
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till PLL is ready */
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 41


 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Disable the main PLL. */
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 698              		.loc 1 685 0
 699 0392 794A     		ldr	r2, .L111
 700 0394 1368     		ldr	r3, [r2]
 701 0396 23F08073 		bic	r3, r3, #16777216
 702 039a 1360     		str	r3, [r2]
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Get Start Tick*/
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 703              		.loc 1 688 0
 704 039c FFF7FEFF 		bl	HAL_GetTick
 705              	.LVL55:
 706 03a0 0446     		mov	r4, r0
 707              	.LVL56:
 708              	.L67:
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Wait till PLL is ready */
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 709              		.loc 1 691 0
 710 03a2 754B     		ldr	r3, .L111
 711 03a4 1B68     		ldr	r3, [r3]
 712 03a6 13F0007F 		tst	r3, #33554432
 713 03aa 00F0DB80 		beq	.L103
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 714              		.loc 1 693 0
 715 03ae FFF7FEFF 		bl	HAL_GetTick
 716              	.LVL57:
 717 03b2 001B     		subs	r0, r0, r4
 718 03b4 0228     		cmp	r0, #2
 719 03b6 F4D9     		bls	.L67
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 720              		.loc 1 695 0
 721 03b8 0320     		movs	r0, #3
 722 03ba DAE0     		b	.L8
 723              	.LVL58:
 724              	.L101:
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 725              		.loc 1 560 0
 726 03bc 6F4A     		ldr	r2, .L111+4
 727 03be 1368     		ldr	r3, [r2]
 728 03c0 43F48073 		orr	r3, r3, #256
 729 03c4 1360     		str	r3, [r2]
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 730              		.loc 1 563 0
 731 03c6 FFF7FEFF 		bl	HAL_GetTick
 732              	.LVL59:
 733 03ca 0546     		mov	r5, r0
 734              	.LVL60:
 735              	.L51:
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 736              		.loc 1 565 0
 737 03cc 6B4B     		ldr	r3, .L111+4
 738 03ce 1B68     		ldr	r3, [r3]
 739 03d0 13F4807F 		tst	r3, #256
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 42


 740 03d4 06D1     		bne	.L104
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 741              		.loc 1 567 0
 742 03d6 FFF7FEFF 		bl	HAL_GetTick
 743              	.LVL61:
 744 03da 401B     		subs	r0, r0, r5
 745 03dc 6428     		cmp	r0, #100
 746 03de F5D9     		bls	.L51
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 747              		.loc 1 569 0
 748 03e0 0320     		movs	r0, #3
 749 03e2 C6E0     		b	.L8
 750              	.L104:
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSE State */
 751              		.loc 1 574 0
 752 03e4 A368     		ldr	r3, [r4, #8]
 753 03e6 012B     		cmp	r3, #1
 754 03e8 0AD0     		beq	.L105
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSE State */
 755              		.loc 1 574 0 is_stmt 0 discriminator 2
 756 03ea 0BBB     		cbnz	r3, .L55
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSE State */
 757              		.loc 1 574 0 discriminator 3
 758 03ec 624B     		ldr	r3, .L111
 759 03ee 1A6F     		ldr	r2, [r3, #112]
 760 03f0 22F00102 		bic	r2, r2, #1
 761 03f4 1A67     		str	r2, [r3, #112]
 762 03f6 1A6F     		ldr	r2, [r3, #112]
 763 03f8 22F00402 		bic	r2, r2, #4
 764 03fc 1A67     		str	r2, [r3, #112]
 765 03fe 04E0     		b	.L54
 766              	.L105:
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSE State */
 767              		.loc 1 574 0 discriminator 1
 768 0400 5D4A     		ldr	r2, .L111
 769 0402 136F     		ldr	r3, [r2, #112]
 770 0404 43F00103 		orr	r3, r3, #1
 771 0408 1367     		str	r3, [r2, #112]
 772              	.L54:
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 773              		.loc 1 576 0 is_stmt 1
 774 040a A368     		ldr	r3, [r4, #8]
 775 040c 33B3     		cbz	r3, .L57
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 776              		.loc 1 579 0
 777 040e FFF7FEFF 		bl	HAL_GetTick
 778              	.LVL62:
 779 0412 0546     		mov	r5, r0
 780              	.LVL63:
 781              	.L58:
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 782              		.loc 1 582 0
 783 0414 584B     		ldr	r3, .L111
 784 0416 1B6F     		ldr	r3, [r3, #112]
 785 0418 13F0020F 		tst	r3, #2
 786 041c ACD1     		bne	.L50
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 43


 787              		.loc 1 584 0
 788 041e FFF7FEFF 		bl	HAL_GetTick
 789              	.LVL64:
 790 0422 401B     		subs	r0, r0, r5
 791 0424 41F28833 		movw	r3, #5000
 792 0428 9842     		cmp	r0, r3
 793 042a F3D9     		bls	.L58
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 794              		.loc 1 586 0
 795 042c 0320     		movs	r0, #3
 796 042e A0E0     		b	.L8
 797              	.L55:
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSE State */
 798              		.loc 1 574 0 discriminator 4
 799 0430 052B     		cmp	r3, #5
 800 0432 09D0     		beq	.L106
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSE State */
 801              		.loc 1 574 0 is_stmt 0 discriminator 6
 802 0434 504B     		ldr	r3, .L111
 803 0436 1A6F     		ldr	r2, [r3, #112]
 804 0438 22F00102 		bic	r2, r2, #1
 805 043c 1A67     		str	r2, [r3, #112]
 806 043e 1A6F     		ldr	r2, [r3, #112]
 807 0440 22F00402 		bic	r2, r2, #4
 808 0444 1A67     		str	r2, [r3, #112]
 809 0446 E0E7     		b	.L54
 810              	.L106:
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check the LSE State */
 811              		.loc 1 574 0 discriminator 5
 812 0448 4B4B     		ldr	r3, .L111
 813 044a 1A6F     		ldr	r2, [r3, #112]
 814 044c 42F00402 		orr	r2, r2, #4
 815 0450 1A67     		str	r2, [r3, #112]
 816 0452 1A6F     		ldr	r2, [r3, #112]
 817 0454 42F00102 		orr	r2, r2, #1
 818 0458 1A67     		str	r2, [r3, #112]
 819 045a D6E7     		b	.L54
 820              	.L57:
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 821              		.loc 1 593 0 is_stmt 1
 822 045c FFF7FEFF 		bl	HAL_GetTick
 823              	.LVL65:
 824 0460 0546     		mov	r5, r0
 825              	.LVL66:
 826              	.L60:
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 827              		.loc 1 596 0
 828 0462 454B     		ldr	r3, .L111
 829 0464 1B6F     		ldr	r3, [r3, #112]
 830 0466 13F0020F 		tst	r3, #2
 831 046a 85D0     		beq	.L50
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 832              		.loc 1 598 0
 833 046c FFF7FEFF 		bl	HAL_GetTick
 834              	.LVL67:
 835 0470 401B     		subs	r0, r0, r5
 836 0472 41F28833 		movw	r3, #5000
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 44


 837 0476 9842     		cmp	r0, r3
 838 0478 F3D9     		bls	.L60
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 839              		.loc 1 600 0
 840 047a 0320     		movs	r0, #3
 841 047c 79E0     		b	.L8
 842              	.LVL68:
 843              	.L102:
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 844              		.loc 1 624 0
 845 047e 3E4A     		ldr	r2, .L111
 846 0480 1368     		ldr	r3, [r2]
 847 0482 23F08073 		bic	r3, r3, #16777216
 848 0486 1360     		str	r3, [r2]
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 849              		.loc 1 627 0
 850 0488 FFF7FEFF 		bl	HAL_GetTick
 851              	.LVL69:
 852 048c 0546     		mov	r5, r0
 853              	.LVL70:
 854              	.L63:
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 855              		.loc 1 630 0
 856 048e 3A4B     		ldr	r3, .L111
 857 0490 1B68     		ldr	r3, [r3]
 858 0492 13F0007F 		tst	r3, #33554432
 859 0496 06D0     		beq	.L107
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 860              		.loc 1 632 0
 861 0498 FFF7FEFF 		bl	HAL_GetTick
 862              	.LVL71:
 863 049c 401B     		subs	r0, r0, r5
 864 049e 0228     		cmp	r0, #2
 865 04a0 F5D9     		bls	.L63
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 866              		.loc 1 634 0
 867 04a2 0320     		movs	r0, #3
 868 04a4 65E0     		b	.L8
 869              	.L107:
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 870              		.loc 1 639 0
 871 04a6 344B     		ldr	r3, .L111
 872 04a8 996A     		ldr	r1, [r3, #40]
 873 04aa 354A     		ldr	r2, .L111+8
 874 04ac 0A40     		ands	r2, r2, r1
 875 04ae A16A     		ldr	r1, [r4, #40]
 876 04b0 E06A     		ldr	r0, [r4, #44]
 877 04b2 41EA0011 		orr	r1, r1, r0, lsl #4
 878 04b6 0A43     		orrs	r2, r2, r1
 879 04b8 9A62     		str	r2, [r3, #40]
 880 04ba 226B     		ldr	r2, [r4, #48]
 881 04bc 013A     		subs	r2, r2, #1
 882 04be C2F30802 		ubfx	r2, r2, #0, #9
 883 04c2 616B     		ldr	r1, [r4, #52]
 884 04c4 0139     		subs	r1, r1, #1
 885 04c6 4902     		lsls	r1, r1, #9
 886 04c8 89B2     		uxth	r1, r1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 45


 887 04ca 0A43     		orrs	r2, r2, r1
 888 04cc A16B     		ldr	r1, [r4, #56]
 889 04ce 0139     		subs	r1, r1, #1
 890 04d0 0904     		lsls	r1, r1, #16
 891 04d2 01F4FE01 		and	r1, r1, #8323072
 892 04d6 0A43     		orrs	r2, r2, r1
 893 04d8 E16B     		ldr	r1, [r4, #60]
 894 04da 0139     		subs	r1, r1, #1
 895 04dc 0906     		lsls	r1, r1, #24
 896 04de 01F0FE41 		and	r1, r1, #2130706432
 897 04e2 0A43     		orrs	r2, r2, r1
 898 04e4 1A63     		str	r2, [r3, #48]
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 899              		.loc 1 647 0
 900 04e6 596B     		ldr	r1, [r3, #52]
 901 04e8 264A     		ldr	r2, .L111+12
 902 04ea 0A40     		ands	r2, r2, r1
 903 04ec A06C     		ldr	r0, [r4, #72]
 904              	.LVL72:
 905              	.LBB46:
 906              	.LBB47:
 907              		.loc 2 857 0
 908 04ee 4FF6F871 		movw	r1, #65528
 909              		.syntax unified
 910              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 911 04f2 91FAA1F1 		rbit r1, r1
 912              	@ 0 "" 2
 913              	.LVL73:
 914              		.thumb
 915              		.syntax unified
 916              	.LBE47:
 917              	.LBE46:
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 918              		.loc 1 647 0
 919 04f6 B1FA81F1 		clz	r1, r1
 920 04fa 00FA01F1 		lsl	r1, r0, r1
 921 04fe 0A43     		orrs	r2, r2, r1
 922 0500 5A63     		str	r2, [r3, #52]
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 923              		.loc 1 650 0
 924 0502 DA6A     		ldr	r2, [r3, #44]
 925 0504 22F00C02 		bic	r2, r2, #12
 926 0508 216C     		ldr	r1, [r4, #64]
 927 050a 0A43     		orrs	r2, r2, r1
 928 050c DA62     		str	r2, [r3, #44]
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 929              		.loc 1 653 0
 930 050e DA6A     		ldr	r2, [r3, #44]
 931 0510 22F00202 		bic	r2, r2, #2
 932 0514 616C     		ldr	r1, [r4, #68]
 933 0516 0A43     		orrs	r2, r2, r1
 934 0518 DA62     		str	r2, [r3, #44]
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 935              		.loc 1 656 0
 936 051a DA6A     		ldr	r2, [r3, #44]
 937 051c 42F48032 		orr	r2, r2, #65536
 938 0520 DA62     		str	r2, [r3, #44]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 46


 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  
 939              		.loc 1 659 0
 940 0522 DA6A     		ldr	r2, [r3, #44]
 941 0524 42F40032 		orr	r2, r2, #131072
 942 0528 DA62     		str	r2, [r3, #44]
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 943              		.loc 1 662 0
 944 052a DA6A     		ldr	r2, [r3, #44]
 945 052c 42F48022 		orr	r2, r2, #262144
 946 0530 DA62     		str	r2, [r3, #44]
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 947              		.loc 1 665 0
 948 0532 DA6A     		ldr	r2, [r3, #44]
 949 0534 42F00102 		orr	r2, r2, #1
 950 0538 DA62     		str	r2, [r3, #44]
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 951              		.loc 1 668 0
 952 053a 1A68     		ldr	r2, [r3]
 953 053c 42F08072 		orr	r2, r2, #16777216
 954 0540 1A60     		str	r2, [r3]
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 955              		.loc 1 671 0
 956 0542 FFF7FEFF 		bl	HAL_GetTick
 957              	.LVL74:
 958 0546 0446     		mov	r4, r0
 959              	.LVL75:
 960              	.L65:
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 961              		.loc 1 674 0
 962 0548 0B4B     		ldr	r3, .L111
 963 054a 1B68     		ldr	r3, [r3]
 964 054c 13F0007F 		tst	r3, #33554432
 965 0550 06D1     		bne	.L108
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 966              		.loc 1 676 0
 967 0552 FFF7FEFF 		bl	HAL_GetTick
 968              	.LVL76:
 969 0556 001B     		subs	r0, r0, r4
 970 0558 0228     		cmp	r0, #2
 971 055a F5D9     		bls	.L65
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 972              		.loc 1 678 0
 973 055c 0320     		movs	r0, #3
 974 055e 08E0     		b	.L8
 975              	.L108:
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     else
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       return HAL_ERROR;
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   return HAL_OK;
 976              		.loc 1 705 0
 977 0560 0020     		movs	r0, #0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 47


 978 0562 06E0     		b	.L8
 979              	.L103:
 980 0564 0020     		movs	r0, #0
 981 0566 04E0     		b	.L8
 982              	.LVL77:
 983              	.L94:
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 984              		.loc 1 286 0
 985 0568 0120     		movs	r0, #1
 986              	.LVL78:
 987 056a 02E0     		b	.L8
 988              	.LVL79:
 989              	.L72:
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 990              		.loc 1 338 0
 991 056c 0120     		movs	r0, #1
 992 056e 00E0     		b	.L8
 993              	.L86:
 994              		.loc 1 705 0
 995 0570 0020     		movs	r0, #0
 996              	.LVL80:
 997              	.L8:
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 998              		.loc 1 706 0
 999 0572 38BD     		pop	{r3, r4, r5, pc}
 1000              	.LVL81:
 1001              	.L87:
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 1002              		.loc 1 702 0
 1003 0574 0120     		movs	r0, #1
 1004 0576 FCE7     		b	.L8
 1005              	.L112:
 1006              		.align	2
 1007              	.L111:
 1008 0578 00440258 		.word	1476543488
 1009 057c 00480258 		.word	1476544512
 1010 0580 0CFCFFFF 		.word	-1012
 1011 0584 0700FFFF 		.word	-65529
 1012              		.cfi_endproc
 1013              	.LFE138:
 1015              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1016              		.align	1
 1017              		.global	HAL_RCC_MCOConfig
 1018              		.syntax unified
 1019              		.thumb
 1020              		.thumb_func
 1021              		.fpu fpv5-d16
 1023              	HAL_RCC_MCOConfig:
 1024              	.LFB140:
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  FLatency: FLASH Latency, this parameter depend on device selected
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 48


 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         and updated by HAL_InitTick() function called within this function
 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *           
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         You can use HAL_RCC_GetClockConfig() function to know which clock is
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         currently used as system clock source.
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed freq
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval None
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   uint32_t tickstart = 0;
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Check the parameters */
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     (HCLK) and the supply voltage of the device. */
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Increasing the CPU frequency */
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       return HAL_ERROR;
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****    /*-------------------------- HCLK Configuration --------------------------*/
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration -------------------------*/
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 49


 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Check the HSE ready flag */
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_ERROR;
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Check the PLL ready flag */
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_ERROR;
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* CSI is selected as System Clock Source */
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Check the PLL ready flag */
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_ERROR;
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         /* Check the HSI ready flag */
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           return HAL_ERROR;
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* Get Start Tick*/
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 50


 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       return HAL_ERROR;
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  }
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 51


 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   return HAL_OK;
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @}
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /** @defgroup RCC_Group2 Peripheral Control functions
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  *  @brief   RCC clocks control functions
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  *
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** @verbatim
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  ===============================================================================
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  ===============================================================================
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     [..]
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     frequencies.
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** @endverbatim
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @{
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  RCC_MCOx: specifies the output direction for the clock source.
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLL1QCLK:  PLL1Q clock selected as MCO1 source
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI48: HSI48 (48MHZ) selected as MCO1 source
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLL2PCLK: PLL2P clock selected as MCO2 source
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 52


 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK:  PLL1P clock selected as MCO2 source
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_CSICLK:  CSI clock selected as MCO2 source
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_LSICLK:  LSI clock selected as MCO2 source
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  RCC_MCODiv: specifies the MCOx pre-scaler.
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval None
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 1025              		.loc 1 953 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 32
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              	.LVL82:
 1030 0000 70B5     		push	{r4, r5, r6, lr}
 1031              	.LCFI1:
 1032              		.cfi_def_cfa_offset 16
 1033              		.cfi_offset 4, -16
 1034              		.cfi_offset 5, -12
 1035              		.cfi_offset 6, -8
 1036              		.cfi_offset 14, -4
 1037 0002 88B0     		sub	sp, sp, #32
 1038              	.LCFI2:
 1039              		.cfi_def_cfa_offset 48
 1040 0004 0C46     		mov	r4, r1
 1041 0006 1646     		mov	r6, r2
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Check the parameters */
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* RCC_MCO1 */
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 1042              		.loc 1 959 0
 1043 0008 18B3     		cbz	r0, .L117
 1044              	.LBB48:
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     __MCO1_CLK_ENABLE();
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Configure the MCO1 pin in alternate function mode */    
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else
 978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 53


 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     __MCO2_CLK_ENABLE();
 1045              		.loc 1 982 0
 1046 000a 234D     		ldr	r5, .L118
 1047 000c D5F8E030 		ldr	r3, [r5, #224]
 1048 0010 43F00403 		orr	r3, r3, #4
 1049 0014 C5F8E030 		str	r3, [r5, #224]
 1050 0018 D5F8E030 		ldr	r3, [r5, #224]
 1051 001c 03F00403 		and	r3, r3, #4
 1052 0020 0293     		str	r3, [sp, #8]
 1053 0022 029B     		ldr	r3, [sp, #8]
 1054              	.LBE48:
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Configure the MCO2 pin in alternate function mode */
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 1055              		.loc 1 985 0
 1056 0024 4FF40073 		mov	r3, #512
 1057 0028 0393     		str	r3, [sp, #12]
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1058              		.loc 1 986 0
 1059 002a 0223     		movs	r3, #2
 1060 002c 0493     		str	r3, [sp, #16]
 987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 1061              		.loc 1 987 0
 1062 002e 0323     		movs	r3, #3
 1063 0030 0693     		str	r3, [sp, #24]
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1064              		.loc 1 988 0
 1065 0032 0023     		movs	r3, #0
 1066 0034 0593     		str	r3, [sp, #20]
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1067              		.loc 1 989 0
 1068 0036 0793     		str	r3, [sp, #28]
 990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 1069              		.loc 1 990 0
 1070 0038 03A9     		add	r1, sp, #12
 1071              	.LVL83:
 1072 003a 1848     		ldr	r0, .L118+4
 1073              	.LVL84:
 1074 003c FFF7FEFF 		bl	HAL_GPIO_Init
 1075              	.LVL85:
 991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7)));
 1076              		.loc 1 993 0
 1077 0040 2B69     		ldr	r3, [r5, #16]
 1078 0042 23F07E43 		bic	r3, r3, #-33554432
 1079 0046 44EAC614 		orr	r4, r4, r6, lsl #7
 1080              	.LVL86:
 1081 004a 1C43     		orrs	r4, r4, r3
 1082 004c 2C61     		str	r4, [r5, #16]
 1083              	.L113:
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 1084              		.loc 1 995 0
 1085 004e 08B0     		add	sp, sp, #32
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 54


 1086              	.LCFI3:
 1087              		.cfi_remember_state
 1088              		.cfi_def_cfa_offset 16
 1089              		@ sp needed
 1090 0050 70BD     		pop	{r4, r5, r6, pc}
 1091              	.LVL87:
 1092              	.L117:
 1093              	.LCFI4:
 1094              		.cfi_restore_state
 1095              	.LBB49:
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 1096              		.loc 1 964 0
 1097 0052 114D     		ldr	r5, .L118
 1098 0054 D5F8E030 		ldr	r3, [r5, #224]
 1099 0058 43F00103 		orr	r3, r3, #1
 1100 005c C5F8E030 		str	r3, [r5, #224]
 1101 0060 D5F8E030 		ldr	r3, [r5, #224]
 1102 0064 03F00103 		and	r3, r3, #1
 1103 0068 0193     		str	r3, [sp, #4]
 1104 006a 019B     		ldr	r3, [sp, #4]
 1105              	.LBE49:
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1106              		.loc 1 967 0
 1107 006c 4FF48073 		mov	r3, #256
 1108 0070 0393     		str	r3, [sp, #12]
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 1109              		.loc 1 968 0
 1110 0072 0223     		movs	r3, #2
 1111 0074 0493     		str	r3, [sp, #16]
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1112              		.loc 1 969 0
 1113 0076 0323     		movs	r3, #3
 1114 0078 0693     		str	r3, [sp, #24]
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1115              		.loc 1 970 0
 1116 007a 0023     		movs	r3, #0
 1117 007c 0593     		str	r3, [sp, #20]
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1118              		.loc 1 971 0
 1119 007e 0793     		str	r3, [sp, #28]
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     
 1120              		.loc 1 972 0
 1121 0080 03A9     		add	r1, sp, #12
 1122              	.LVL88:
 1123 0082 0748     		ldr	r0, .L118+8
 1124              	.LVL89:
 1125 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 1126              	.LVL90:
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 1127              		.loc 1 975 0
 1128 0088 2B69     		ldr	r3, [r5, #16]
 1129 008a 23F0FE73 		bic	r3, r3, #33292288
 1130 008e 3443     		orrs	r4, r4, r6
 1131              	.LVL91:
 1132 0090 1C43     		orrs	r4, r4, r3
 1133 0092 2C61     		str	r4, [r5, #16]
 1134 0094 DBE7     		b	.L113
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 55


 1135              	.L119:
 1136 0096 00BF     		.align	2
 1137              	.L118:
 1138 0098 00440258 		.word	1476543488
 1139 009c 00080258 		.word	1476528128
 1140 00a0 00000258 		.word	1476526080
 1141              		.cfi_endproc
 1142              	.LFE140:
 1144              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1145              		.align	1
 1146              		.global	HAL_RCC_EnableCSS
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu fpv5-d16
 1152              	HAL_RCC_EnableCSS:
 1153              	.LFB141:
 996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
 998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to
1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
1004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval None
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 1154              		.loc 1 1007 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
1008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 1159              		.loc 1 1008 0
 1160 0000 024A     		ldr	r2, .L121
 1161 0002 1368     		ldr	r3, [r2]
 1162 0004 43F40023 		orr	r3, r3, #524288
 1163 0008 1360     		str	r3, [r2]
1009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 1164              		.loc 1 1009 0
 1165 000a 7047     		bx	lr
 1166              	.L122:
 1167              		.align	2
 1168              	.L121:
 1169 000c 00440258 		.word	1476543488
 1170              		.cfi_endproc
 1171              	.LFE141:
 1173              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1174              		.align	1
 1175              		.global	HAL_RCC_GetSysClockFreq
 1176              		.syntax unified
 1177              		.thumb
 1178              		.thumb_func
 1179              		.fpu fpv5-d16
 1181              	HAL_RCC_GetSysClockFreq:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 56


 1182              	.LFB142:
1010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *        
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         constant and the selected clock source:
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note     If SYSCLK source is CSI, function returns values based on CSI_VALUE(*)
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(**)
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(***)
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on CSI_VALUE(*), 
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *           HSI_VALUE(**) or HSE_VALUE(***) multiplied/divided by the PLL factors.         
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note     (*) CSI_VALUE is a constant defined in stm32h7xx_hal_conf.h file (default value
1023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *               4 MHz) but the real value may vary depending on the variations
1024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *               in voltage and temperature.
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note     (**) HSI_VALUE is a constant defined in stm32h7xx_hal_conf.h file (default value
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *               64 MHz) but the real value may vary depending on the variations
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *               in voltage and temperature.
1028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note     (***) HSE_VALUE is a constant defined in stm32h7xx_hal_conf.h file (default value
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *                have wrong result.
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *                  
1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         value for HSE crystal.
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *           
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
1037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         baud rate for the communication peripherals or configure other parameters.
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *           
1039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *               
1043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval SYSCLK frequency
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 1183              		.loc 1 1046 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              		@ link register save eliminated.
 1188              	.LVL92:
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  float fracn1=0, pllvco = 0;
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  uint32_t sysclockfreq = 0;
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1189              		.loc 1 1052 0
 1190 0000 6D4B     		ldr	r3, .L140
 1191 0002 1B69     		ldr	r3, [r3, #16]
 1192 0004 03F03803 		and	r3, r3, #56
 1193 0008 102B     		cmp	r3, #16
 1194 000a 00F0D180 		beq	.L134
 1195 000e 182B     		cmp	r3, #24
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 57


 1196 0010 0FD0     		beq	.L126
 1197 0012 0BB1     		cbz	r3, .L127
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   case 0x00:  /* HSI used as system clock source */
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
1057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         sysclockfreq = (uint32_t) HSI_VALUE;
1063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
1064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     break;
1066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   case 0x08:  /* CSI used as system clock  source */
1068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     sysclockfreq = CSI_VALUE;
 1198              		.loc 1 1068 0
 1199 0014 6948     		ldr	r0, .L140+4
 1200 0016 7047     		bx	lr
 1201              	.L127:
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 1202              		.loc 1 1056 0
 1203 0018 674B     		ldr	r3, .L140
 1204 001a 1B68     		ldr	r3, [r3]
 1205 001c 13F0200F 		tst	r3, #32
 1206 0020 00F0C880 		beq	.L135
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 1207              		.loc 1 1058 0
 1208 0024 644B     		ldr	r3, .L140
 1209 0026 1B68     		ldr	r3, [r3]
 1210 0028 C3F3C103 		ubfx	r3, r3, #3, #2
 1211 002c 6448     		ldr	r0, .L140+8
 1212 002e D840     		lsrs	r0, r0, r3
 1213              	.LVL93:
 1214 0030 7047     		bx	lr
 1215              	.LVL94:
 1216              	.L126:
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 1217              		.loc 1 1046 0
 1218 0032 70B4     		push	{r4, r5, r6}
 1219              	.LCFI5:
 1220              		.cfi_def_cfa_offset 12
 1221              		.cfi_offset 4, -12
 1222              		.cfi_offset 5, -8
 1223              		.cfi_offset 6, -4
1069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     break;
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   case 0x10:  /* HSE used as system clock  source */
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     sysclockfreq = HSE_VALUE;
1073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     break;
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   case 0x18:  /* PLL1 used as system clock  source */
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     SYSCLK = PLL_VCO / PLLR
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 58


1079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     */
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 1224              		.loc 1 1080 0
 1225 0034 604D     		ldr	r5, .L140
 1226 0036 AC6A     		ldr	r4, [r5, #40]
 1227 0038 04F00304 		and	r4, r4, #3
 1228              	.LVL95:
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 1229              		.loc 1 1081 0
 1230 003c AE6A     		ldr	r6, [r5, #40]
 1231 003e C6F30516 		ubfx	r6, r6, #4, #6
 1232              	.LVL96:
1082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 1233              		.loc 1 1082 0
 1234 0042 EB6A     		ldr	r3, [r5, #44]
 1235 0044 03F00103 		and	r3, r3, #1
 1236              	.LVL97:
1083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 1237              		.loc 1 1083 0
 1238 0048 6D6B     		ldr	r5, [r5, #52]
 1239 004a C5F3CC05 		ubfx	r5, r5, #3, #13
 1240 004e 03FB05F3 		mul	r3, r3, r5
 1241              	.LVL98:
 1242 0052 07EE903A 		vmov	s15, r3	@ int
 1243 0056 F8EE677A 		vcvt.f32.u32	s15, s15
 1244              	.LVL99:
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     switch (pllsource)
 1245              		.loc 1 1085 0
 1246 005a 012C     		cmp	r4, #1
 1247 005c 60D0     		beq	.L129
 1248 005e F4B1     		cbz	r4, .L130
 1249 0060 022C     		cmp	r4, #2
 1250 0062 00F08980 		beq	.L131
1086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     case 0x00:  /* HSI used as PLL clock source */
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
1090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       else
1095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       break;
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     case 0x01:  /* CSI used as PLL clock source */
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       break;
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     case 0x02:  /* HSE used as PLL clock source */
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       break;
1107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     default:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 59


1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 1251              		.loc 1 1109 0
 1252 0066 554B     		ldr	r3, .L140+4
 1253 0068 B3FBF6F3 		udiv	r3, r3, r6
 1254 006c 07EE103A 		vmov	s14, r3	@ int
 1255 0070 B8EE477A 		vcvt.f32.u32	s14, s14
 1256 0074 504B     		ldr	r3, .L140
 1257 0076 1B6B     		ldr	r3, [r3, #48]
 1258 0078 C3F30803 		ubfx	r3, r3, #0, #9
 1259 007c DFED516A 		vldr.32	s13, .L140+12
 1260 0080 67EEA67A 		vmul.f32	s15, s15, s13
 1261              	.LVL100:
 1262 0084 06EE903A 		vmov	s13, r3	@ int
 1263 0088 F8EE666A 		vcvt.f32.u32	s13, s13
 1264 008c 76EEA77A 		vadd.f32	s15, s13, s15
 1265 0090 F7EE006A 		vmov.f32	s13, #1.0e+0
 1266 0094 77EEA67A 		vadd.f32	s15, s15, s13
 1267 0098 27EE277A 		vmul.f32	s14, s14, s15
 1268              	.LVL101:
1110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       break;
 1269              		.loc 1 1110 0
 1270 009c 5BE0     		b	.L133
 1271              	.LVL102:
 1272              	.L130:
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 1273              		.loc 1 1089 0
 1274 009e 464B     		ldr	r3, .L140
 1275 00a0 1B68     		ldr	r3, [r3]
 1276 00a2 13F0200F 		tst	r3, #32
 1277 00a6 1FD0     		beq	.L132
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 1278              		.loc 1 1091 0
 1279 00a8 434A     		ldr	r2, .L140
 1280 00aa 1368     		ldr	r3, [r2]
 1281 00ac C3F3C103 		ubfx	r3, r3, #3, #2
 1282 00b0 4348     		ldr	r0, .L140+8
 1283 00b2 D840     		lsrs	r0, r0, r3
 1284              	.LVL103:
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 1285              		.loc 1 1092 0
 1286 00b4 B0FBF6F3 		udiv	r3, r0, r6
 1287 00b8 07EE103A 		vmov	s14, r3	@ int
 1288 00bc B8EE477A 		vcvt.f32.u32	s14, s14
 1289 00c0 136B     		ldr	r3, [r2, #48]
 1290 00c2 C3F30803 		ubfx	r3, r3, #0, #9
 1291 00c6 DFED3F6A 		vldr.32	s13, .L140+12
 1292 00ca 67EEA67A 		vmul.f32	s15, s15, s13
 1293              	.LVL104:
 1294 00ce 06EE903A 		vmov	s13, r3	@ int
 1295 00d2 F8EE666A 		vcvt.f32.u32	s13, s13
 1296 00d6 76EEA77A 		vadd.f32	s15, s13, s15
 1297 00da F7EE006A 		vmov.f32	s13, #1.0e+0
 1298 00de 77EEA67A 		vadd.f32	s15, s15, s13
 1299 00e2 27EE277A 		vmul.f32	s14, s14, s15
 1300              	.LVL105:
 1301 00e6 36E0     		b	.L133
 1302              	.LVL106:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 60


 1303              	.L132:
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 1304              		.loc 1 1096 0
 1305 00e8 3548     		ldr	r0, .L140+8
 1306 00ea B0FBF6F3 		udiv	r3, r0, r6
 1307 00ee 07EE103A 		vmov	s14, r3	@ int
 1308 00f2 B8EE477A 		vcvt.f32.u32	s14, s14
 1309 00f6 304B     		ldr	r3, .L140
 1310 00f8 1B6B     		ldr	r3, [r3, #48]
 1311 00fa C3F30803 		ubfx	r3, r3, #0, #9
 1312 00fe DFED316A 		vldr.32	s13, .L140+12
 1313 0102 67EEA67A 		vmul.f32	s15, s15, s13
 1314              	.LVL107:
 1315 0106 06EE903A 		vmov	s13, r3	@ int
 1316 010a F8EE666A 		vcvt.f32.u32	s13, s13
 1317 010e 76EEA77A 		vadd.f32	s15, s13, s15
 1318 0112 F7EE006A 		vmov.f32	s13, #1.0e+0
 1319 0116 77EEA67A 		vadd.f32	s15, s15, s13
 1320 011a 27EE277A 		vmul.f32	s14, s14, s15
 1321              	.LVL108:
 1322 011e 1AE0     		b	.L133
 1323              	.LVL109:
 1324              	.L129:
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       break;
 1325              		.loc 1 1101 0
 1326 0120 2649     		ldr	r1, .L140+4
 1327 0122 B1FBF6F3 		udiv	r3, r1, r6
 1328 0126 07EE103A 		vmov	s14, r3	@ int
 1329 012a B8EE477A 		vcvt.f32.u32	s14, s14
 1330 012e 224B     		ldr	r3, .L140
 1331 0130 1B6B     		ldr	r3, [r3, #48]
 1332 0132 C3F30803 		ubfx	r3, r3, #0, #9
 1333 0136 DFED236A 		vldr.32	s13, .L140+12
 1334 013a 67EEA67A 		vmul.f32	s15, s15, s13
 1335              	.LVL110:
 1336 013e 06EE903A 		vmov	s13, r3	@ int
 1337 0142 F8EE666A 		vcvt.f32.u32	s13, s13
 1338 0146 76EEA77A 		vadd.f32	s15, s13, s15
 1339 014a F7EE006A 		vmov.f32	s13, #1.0e+0
 1340 014e 77EEA67A 		vadd.f32	s15, s15, s13
 1341 0152 27EE277A 		vmul.f32	s14, s14, s15
 1342              	.LVL111:
 1343              	.L133:
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
1112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 1344              		.loc 1 1112 0
 1345 0156 184B     		ldr	r3, .L140
 1346 0158 1B6B     		ldr	r3, [r3, #48]
 1347 015a C3F34623 		ubfx	r3, r3, #9, #7
 1348 015e 0133     		adds	r3, r3, #1
 1349              	.LVL112:
1113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     sysclockfreq =  (uint32_t)(pllvco/pllp);
 1350              		.loc 1 1113 0
 1351 0160 07EE903A 		vmov	s15, r3	@ int
 1352 0164 F8EE676A 		vcvt.f32.u32	s13, s15
 1353 0168 C7EE267A 		vdiv.f32	s15, s14, s13
 1354 016c FCEEE77A 		vcvt.u32.f32	s15, s15
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 61


 1355 0170 17EE900A 		vmov	r0, s15	@ int
 1356              	.LVL113:
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     break;
1115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   default:
1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     sysclockfreq = CSI_VALUE;
1118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     break;
1119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   return sysclockfreq;
1122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 1357              		.loc 1 1122 0
 1358 0174 70BC     		pop	{r4, r5, r6}
 1359              	.LCFI6:
 1360              		.cfi_remember_state
 1361              		.cfi_restore 6
 1362              		.cfi_restore 5
 1363              		.cfi_restore 4
 1364              		.cfi_def_cfa_offset 0
 1365              	.LVL114:
 1366 0176 7047     		bx	lr
 1367              	.LVL115:
 1368              	.L131:
 1369              	.LCFI7:
 1370              		.cfi_restore_state
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       break;
 1371              		.loc 1 1105 0
 1372 0178 134A     		ldr	r2, .L140+16
 1373 017a B2FBF6F3 		udiv	r3, r2, r6
 1374 017e 07EE103A 		vmov	s14, r3	@ int
 1375 0182 B8EE477A 		vcvt.f32.u32	s14, s14
 1376 0186 0C4B     		ldr	r3, .L140
 1377 0188 1B6B     		ldr	r3, [r3, #48]
 1378 018a C3F30803 		ubfx	r3, r3, #0, #9
 1379 018e DFED0D6A 		vldr.32	s13, .L140+12
 1380 0192 67EEA67A 		vmul.f32	s15, s15, s13
 1381              	.LVL116:
 1382 0196 06EE903A 		vmov	s13, r3	@ int
 1383 019a F8EE666A 		vcvt.f32.u32	s13, s13
 1384 019e 76EEA77A 		vadd.f32	s15, s13, s15
 1385 01a2 F7EE006A 		vmov.f32	s13, #1.0e+0
 1386 01a6 77EEA67A 		vadd.f32	s15, s15, s13
 1387 01aa 27EE277A 		vmul.f32	s14, s14, s15
 1388              	.LVL117:
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 1389              		.loc 1 1106 0
 1390 01ae D2E7     		b	.L133
 1391              	.LVL118:
 1392              	.L134:
 1393              	.LCFI8:
 1394              		.cfi_def_cfa_offset 0
 1395              		.cfi_restore 4
 1396              		.cfi_restore 5
 1397              		.cfi_restore 6
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     break;
 1398              		.loc 1 1072 0
 1399 01b0 0548     		ldr	r0, .L140+16
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 62


 1400 01b2 7047     		bx	lr
 1401              	.L135:
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       }
 1402              		.loc 1 1062 0
 1403 01b4 0248     		ldr	r0, .L140+8
 1404              	.LVL119:
 1405              		.loc 1 1122 0
 1406 01b6 7047     		bx	lr
 1407              	.L141:
 1408              		.align	2
 1409              	.L140:
 1410 01b8 00440258 		.word	1476543488
 1411 01bc 00093D00 		.word	4000000
 1412 01c0 0090D003 		.word	64000000
 1413 01c4 00000039 		.word	956301312
 1414 01c8 00127A00 		.word	8000000
 1415              		.cfi_endproc
 1416              	.LFE142:
 1418              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1419              		.align	1
 1420              		.global	HAL_RCC_ClockConfig
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1424              		.fpu fpv5-d16
 1426              	HAL_RCC_ClockConfig:
 1427              	.LFB139:
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   uint32_t tickstart = 0;
 1428              		.loc 1 735 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              	.LVL120:
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 1433              		.loc 1 747 0
 1434 0000 774B     		ldr	r3, .L185
 1435 0002 1B68     		ldr	r3, [r3]
 1436 0004 03F00703 		and	r3, r3, #7
 1437 0008 8B42     		cmp	r3, r1
 1438 000a 0CD2     		bcs	.L143
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 1439              		.loc 1 750 0
 1440 000c 744A     		ldr	r2, .L185
 1441 000e 1368     		ldr	r3, [r2]
 1442 0010 23F00703 		bic	r3, r3, #7
 1443 0014 0B43     		orrs	r3, r3, r1
 1444 0016 1360     		str	r3, [r2]
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 1445              		.loc 1 754 0
 1446 0018 1368     		ldr	r3, [r2]
 1447 001a 03F00703 		and	r3, r3, #7
 1448 001e 8B42     		cmp	r3, r1
 1449 0020 01D0     		beq	.L143
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 1450              		.loc 1 756 0
 1451 0022 0120     		movs	r0, #1
 1452              	.LVL121:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 63


 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 1453              		.loc 1 906 0
 1454 0024 7047     		bx	lr
 1455              	.LVL122:
 1456              	.L143:
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   uint32_t tickstart = 0;
 1457              		.loc 1 735 0
 1458 0026 70B5     		push	{r4, r5, r6, lr}
 1459              	.LCFI9:
 1460              		.cfi_def_cfa_offset 16
 1461              		.cfi_offset 4, -16
 1462              		.cfi_offset 5, -12
 1463              		.cfi_offset 6, -8
 1464              		.cfi_offset 14, -4
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 1465              		.loc 1 761 0
 1466 0028 0368     		ldr	r3, [r0]
 1467 002a 13F0020F 		tst	r3, #2
 1468 002e 06D0     		beq	.L145
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 1469              		.loc 1 764 0
 1470 0030 6C4A     		ldr	r2, .L185+4
 1471 0032 9369     		ldr	r3, [r2, #24]
 1472 0034 23F00F03 		bic	r3, r3, #15
 1473 0038 C468     		ldr	r4, [r0, #12]
 1474 003a 2343     		orrs	r3, r3, r4
 1475 003c 9361     		str	r3, [r2, #24]
 1476              	.L145:
 1477 003e 0D46     		mov	r5, r1
 1478 0040 0446     		mov	r4, r0
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 1479              		.loc 1 768 0
 1480 0042 0368     		ldr	r3, [r0]
 1481 0044 13F0010F 		tst	r3, #1
 1482 0048 72D0     		beq	.L146
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 1483              		.loc 1 772 0
 1484 004a 664A     		ldr	r2, .L185+4
 1485 004c 9369     		ldr	r3, [r2, #24]
 1486 004e 23F47063 		bic	r3, r3, #3840
 1487 0052 8168     		ldr	r1, [r0, #8]
 1488              	.LVL123:
 1489 0054 0B43     		orrs	r3, r3, r1
 1490 0056 9361     		str	r3, [r2, #24]
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 1491              		.loc 1 774 0
 1492 0058 4368     		ldr	r3, [r0, #4]
 1493 005a 022B     		cmp	r3, #2
 1494 005c 0AD0     		beq	.L181
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 1495              		.loc 1 783 0
 1496 005e 032B     		cmp	r3, #3
 1497 0060 2BD0     		beq	.L182
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 1498              		.loc 1 792 0
 1499 0062 012B     		cmp	r3, #1
 1500 0064 30D0     		beq	.L183
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 64


 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 1501              		.loc 1 804 0
 1502 0066 5F4A     		ldr	r2, .L185+4
 1503 0068 1268     		ldr	r2, [r2]
 1504 006a 12F0040F 		tst	r2, #4
 1505 006e 06D1     		bne	.L148
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 1506              		.loc 1 806 0
 1507 0070 0120     		movs	r0, #1
 1508              	.LVL124:
 1509 0072 B2E0     		b	.L144
 1510              	.LVL125:
 1511              	.L181:
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 1512              		.loc 1 777 0
 1513 0074 1268     		ldr	r2, [r2]
 1514 0076 12F4003F 		tst	r2, #131072
 1515 007a 00F0AF80 		beq	.L184
 1516              	.L148:
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 1517              		.loc 1 809 0
 1518 007e 5949     		ldr	r1, .L185+4
 1519 0080 0A69     		ldr	r2, [r1, #16]
 1520 0082 22F00702 		bic	r2, r2, #7
 1521 0086 1343     		orrs	r3, r3, r2
 1522 0088 0B61     		str	r3, [r1, #16]
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 1523              		.loc 1 812 0
 1524 008a FFF7FEFF 		bl	HAL_GetTick
 1525              	.LVL126:
 1526 008e 0646     		mov	r6, r0
 1527              	.LVL127:
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 1528              		.loc 1 814 0
 1529 0090 6368     		ldr	r3, [r4, #4]
 1530 0092 022B     		cmp	r3, #2
 1531 0094 1FD0     		beq	.L151
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 1532              		.loc 1 824 0
 1533 0096 032B     		cmp	r3, #3
 1534 0098 2CD0     		beq	.L154
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****       {
 1535              		.loc 1 834 0
 1536 009a 012B     		cmp	r3, #1
 1537 009c 39D0     		beq	.L157
 1538              	.LVL128:
 1539              	.L158:
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 1540              		.loc 1 846 0
 1541 009e 514B     		ldr	r3, .L185+4
 1542 00a0 1B69     		ldr	r3, [r3, #16]
 1543 00a2 13F0380F 		tst	r3, #56
 1544 00a6 43D0     		beq	.L146
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 1545              		.loc 1 848 0
 1546 00a8 FFF7FEFF 		bl	HAL_GetTick
 1547              	.LVL129:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 65


 1548 00ac 801B     		subs	r0, r0, r6
 1549 00ae 41F28833 		movw	r3, #5000
 1550 00b2 9842     		cmp	r0, r3
 1551 00b4 F3D9     		bls	.L158
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 1552              		.loc 1 850 0
 1553 00b6 0320     		movs	r0, #3
 1554 00b8 8FE0     		b	.L144
 1555              	.LVL130:
 1556              	.L182:
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 1557              		.loc 1 786 0
 1558 00ba 4A4A     		ldr	r2, .L185+4
 1559 00bc 1268     		ldr	r2, [r2]
 1560 00be 12F0007F 		tst	r2, #33554432
 1561 00c2 DCD1     		bne	.L148
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 1562              		.loc 1 788 0
 1563 00c4 0120     		movs	r0, #1
 1564              	.LVL131:
 1565 00c6 88E0     		b	.L144
 1566              	.LVL132:
 1567              	.L183:
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 1568              		.loc 1 795 0
 1569 00c8 464A     		ldr	r2, .L185+4
 1570 00ca 1268     		ldr	r2, [r2]
 1571 00cc 12F4807F 		tst	r2, #256
 1572 00d0 D5D1     		bne	.L148
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 1573              		.loc 1 797 0
 1574 00d2 0120     		movs	r0, #1
 1575              	.LVL133:
 1576 00d4 81E0     		b	.L144
 1577              	.LVL134:
 1578              	.L151:
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 1579              		.loc 1 816 0
 1580 00d6 434B     		ldr	r3, .L185+4
 1581 00d8 1B69     		ldr	r3, [r3, #16]
 1582 00da 03F03803 		and	r3, r3, #56
 1583 00de 102B     		cmp	r3, #16
 1584 00e0 26D0     		beq	.L146
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 1585              		.loc 1 818 0
 1586 00e2 FFF7FEFF 		bl	HAL_GetTick
 1587              	.LVL135:
 1588 00e6 801B     		subs	r0, r0, r6
 1589 00e8 41F28833 		movw	r3, #5000
 1590 00ec 9842     		cmp	r0, r3
 1591 00ee F2D9     		bls	.L151
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 1592              		.loc 1 820 0
 1593 00f0 0320     		movs	r0, #3
 1594 00f2 72E0     		b	.L144
 1595              	.L154:
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 66


 1596              		.loc 1 826 0
 1597 00f4 3B4B     		ldr	r3, .L185+4
 1598 00f6 1B69     		ldr	r3, [r3, #16]
 1599 00f8 03F03803 		and	r3, r3, #56
 1600 00fc 182B     		cmp	r3, #24
 1601 00fe 17D0     		beq	.L146
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 1602              		.loc 1 828 0
 1603 0100 FFF7FEFF 		bl	HAL_GetTick
 1604              	.LVL136:
 1605 0104 801B     		subs	r0, r0, r6
 1606 0106 41F28833 		movw	r3, #5000
 1607 010a 9842     		cmp	r0, r3
 1608 010c F2D9     		bls	.L154
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 1609              		.loc 1 830 0
 1610 010e 0320     		movs	r0, #3
 1611 0110 63E0     		b	.L144
 1612              	.L157:
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         {
 1613              		.loc 1 836 0
 1614 0112 344B     		ldr	r3, .L185+4
 1615 0114 1B69     		ldr	r3, [r3, #16]
 1616 0116 03F03803 		and	r3, r3, #56
 1617 011a 082B     		cmp	r3, #8
 1618 011c 08D0     		beq	.L146
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           {
 1619              		.loc 1 838 0
 1620 011e FFF7FEFF 		bl	HAL_GetTick
 1621              	.LVL137:
 1622 0122 801B     		subs	r0, r0, r6
 1623 0124 41F28833 		movw	r3, #5000
 1624 0128 9842     		cmp	r0, r3
 1625 012a F2D9     		bls	.L157
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****           }
 1626              		.loc 1 840 0
 1627 012c 0320     		movs	r0, #3
 1628 012e 54E0     		b	.L144
 1629              	.LVL138:
 1630              	.L146:
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 1631              		.loc 1 857 0
 1632 0130 2B4B     		ldr	r3, .L185
 1633 0132 1B68     		ldr	r3, [r3]
 1634 0134 03F00703 		and	r3, r3, #7
 1635 0138 AB42     		cmp	r3, r5
 1636 013a 0CD9     		bls	.L161
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 1637              		.loc 1 860 0
 1638 013c 284A     		ldr	r2, .L185
 1639 013e 1368     		ldr	r3, [r2]
 1640 0140 23F00703 		bic	r3, r3, #7
 1641 0144 2B43     		orrs	r3, r3, r5
 1642 0146 1360     		str	r3, [r2]
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     {
 1643              		.loc 1 864 0
 1644 0148 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 67


 1645 014a 03F00703 		and	r3, r3, #7
 1646 014e AB42     		cmp	r3, r5
 1647 0150 01D0     		beq	.L161
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     }
 1648              		.loc 1 866 0
 1649 0152 0120     		movs	r0, #1
 1650 0154 41E0     		b	.L144
 1651              	.L161:
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 1652              		.loc 1 871 0
 1653 0156 2368     		ldr	r3, [r4]
 1654 0158 13F0040F 		tst	r3, #4
 1655 015c 06D0     		beq	.L162
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 1656              		.loc 1 874 0
 1657 015e 214A     		ldr	r2, .L185+4
 1658 0160 9369     		ldr	r3, [r2, #24]
 1659 0162 23F07003 		bic	r3, r3, #112
 1660 0166 2169     		ldr	r1, [r4, #16]
 1661 0168 0B43     		orrs	r3, r3, r1
 1662 016a 9361     		str	r3, [r2, #24]
 1663              	.L162:
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 1664              		.loc 1 878 0
 1665 016c 2368     		ldr	r3, [r4]
 1666 016e 13F0080F 		tst	r3, #8
 1667 0172 06D0     		beq	.L163
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 1668              		.loc 1 881 0
 1669 0174 1B4A     		ldr	r2, .L185+4
 1670 0176 D369     		ldr	r3, [r2, #28]
 1671 0178 23F07003 		bic	r3, r3, #112
 1672 017c 6169     		ldr	r1, [r4, #20]
 1673 017e 0B43     		orrs	r3, r3, r1
 1674 0180 D361     		str	r3, [r2, #28]
 1675              	.L163:
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 1676              		.loc 1 885 0
 1677 0182 2368     		ldr	r3, [r4]
 1678 0184 13F0100F 		tst	r3, #16
 1679 0188 06D0     		beq	.L164
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 1680              		.loc 1 888 0
 1681 018a 164A     		ldr	r2, .L185+4
 1682 018c D369     		ldr	r3, [r2, #28]
 1683 018e 23F4E063 		bic	r3, r3, #1792
 1684 0192 A169     		ldr	r1, [r4, #24]
 1685 0194 0B43     		orrs	r3, r3, r1
 1686 0196 D361     		str	r3, [r2, #28]
 1687              	.L164:
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 1688              		.loc 1 893 0
 1689 0198 2368     		ldr	r3, [r4]
 1690 019a 13F0200F 		tst	r3, #32
 1691 019e 06D0     		beq	.L165
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 1692              		.loc 1 896 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 68


 1693 01a0 104A     		ldr	r2, .L185+4
 1694 01a2 136A     		ldr	r3, [r2, #32]
 1695 01a4 23F07003 		bic	r3, r3, #112
 1696 01a8 E169     		ldr	r1, [r4, #28]
 1697 01aa 0B43     		orrs	r3, r3, r1
 1698 01ac 1362     		str	r3, [r2, #32]
 1699              	.L165:
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   
 1700              		.loc 1 900 0
 1701 01ae FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1702              	.LVL139:
 1703 01b2 0C4B     		ldr	r3, .L185+4
 1704 01b4 9B69     		ldr	r3, [r3, #24]
 1705 01b6 03F47063 		and	r3, r3, #3840
 1706              	.LVL140:
 1707              	.LBB50:
 1708              	.LBB51:
 1709              		.loc 2 857 0
 1710 01ba 4FF48072 		mov	r2, #256
 1711              		.syntax unified
 1712              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1713 01be 92FAA2F2 		rbit r2, r2
 1714              	@ 0 "" 2
 1715              	.LVL141:
 1716              		.thumb
 1717              		.syntax unified
 1718              	.LBE51:
 1719              	.LBE50:
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   
 1720              		.loc 1 900 0
 1721 01c2 B2FA82F2 		clz	r2, r2
 1722 01c6 D340     		lsrs	r3, r3, r2
 1723 01c8 074A     		ldr	r2, .L185+8
 1724 01ca D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1725 01cc D840     		lsrs	r0, r0, r3
 1726 01ce 074B     		ldr	r3, .L185+12
 1727 01d0 1860     		str	r0, [r3]
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 1728              		.loc 1 903 0
 1729 01d2 0020     		movs	r0, #0
 1730 01d4 FFF7FEFF 		bl	HAL_InitTick
 1731              	.LVL142:
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 1732              		.loc 1 905 0
 1733 01d8 0020     		movs	r0, #0
 1734              	.L144:
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 1735              		.loc 1 906 0
 1736 01da 70BD     		pop	{r4, r5, r6, pc}
 1737              	.LVL143:
 1738              	.L184:
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****         }
 1739              		.loc 1 779 0
 1740 01dc 0120     		movs	r0, #1
 1741              	.LVL144:
 1742 01de FCE7     		b	.L144
 1743              	.L186:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 69


 1744              		.align	2
 1745              	.L185:
 1746 01e0 00200052 		.word	1375739904
 1747 01e4 00440258 		.word	1476543488
 1748 01e8 00000000 		.word	D1CorePrescTable
 1749 01ec 00000000 		.word	SystemCoreClock
 1750              		.cfi_endproc
 1751              	.LFE139:
 1753              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1754              		.align	1
 1755              		.global	HAL_RCC_GetHCLKFreq
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1759              		.fpu fpv5-d16
 1761              	HAL_RCC_GetHCLKFreq:
 1762              	.LFB143:
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
1126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
1131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         and updated within this function
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval HCLK frequency
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 1763              		.loc 1 1135 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767 0000 08B5     		push	{r3, lr}
 1768              	.LCFI10:
 1769              		.cfi_def_cfa_offset 8
 1770              		.cfi_offset 3, -8
 1771              		.cfi_offset 14, -4
1136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE
 1772              		.loc 1 1136 0
 1773 0002 FFF7FEFF 		bl	HAL_RCCEx_GetD1SysClockFreq
 1774              	.LVL145:
 1775 0006 084B     		ldr	r3, .L189
 1776 0008 9B69     		ldr	r3, [r3, #24]
 1777 000a 03F00F03 		and	r3, r3, #15
 1778              	.LVL146:
 1779              	.LBB52:
 1780              	.LBB53:
 1781              		.loc 2 857 0
 1782 000e 0122     		movs	r2, #1
 1783              		.syntax unified
 1784              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1785 0010 92FAA2F2 		rbit r2, r2
 1786              	@ 0 "" 2
 1787              	.LVL147:
 1788              		.thumb
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 70


 1789              		.syntax unified
 1790              	.LBE53:
 1791              	.LBE52:
 1792              		.loc 1 1136 0
 1793 0014 B2FA82F2 		clz	r2, r2
 1794 0018 D340     		lsrs	r3, r3, r2
 1795 001a 044A     		ldr	r2, .L189+4
 1796 001c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1797 001e D840     		lsrs	r0, r0, r3
 1798 0020 034B     		ldr	r3, .L189+8
 1799 0022 1860     		str	r0, [r3]
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   return SystemD2Clock;
1138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 1800              		.loc 1 1138 0
 1801 0024 08BD     		pop	{r3, pc}
 1802              	.L190:
 1803 0026 00BF     		.align	2
 1804              	.L189:
 1805 0028 00440258 		.word	1476543488
 1806 002c 00000000 		.word	D1CorePrescTable
 1807 0030 00000000 		.word	SystemD2Clock
 1808              		.cfi_endproc
 1809              	.LFE143:
 1811              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1812              		.align	1
 1813              		.global	HAL_RCC_GetPCLK1Freq
 1814              		.syntax unified
 1815              		.thumb
 1816              		.thumb_func
 1817              		.fpu fpv5-d16
 1819              	HAL_RCC_GetPCLK1Freq:
 1820              	.LFB144:
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval PCLK1 frequency
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 1821              		.loc 1 1148 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 1825 0000 08B5     		push	{r3, lr}
 1826              	.LCFI11:
 1827              		.cfi_def_cfa_offset 8
 1828              		.cfi_offset 3, -8
 1829              		.cfi_offset 14, -4
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_V
 1830              		.loc 1 1150 0
 1831 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1832              	.LVL148:
 1833 0006 074B     		ldr	r3, .L193
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 71


 1834 0008 DB69     		ldr	r3, [r3, #28]
 1835 000a 03F07003 		and	r3, r3, #112
 1836              	.LVL149:
 1837              	.LBB54:
 1838              	.LBB55:
 1839              		.loc 2 857 0
 1840 000e 1022     		movs	r2, #16
 1841              		.syntax unified
 1842              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1843 0010 92FAA2F2 		rbit r2, r2
 1844              	@ 0 "" 2
 1845              	.LVL150:
 1846              		.thumb
 1847              		.syntax unified
 1848              	.LBE55:
 1849              	.LBE54:
 1850              		.loc 1 1150 0
 1851 0014 B2FA82F2 		clz	r2, r2
 1852 0018 D340     		lsrs	r3, r3, r2
 1853 001a 034A     		ldr	r2, .L193+4
 1854 001c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 1855              		.loc 1 1151 0
 1856 001e D840     		lsrs	r0, r0, r3
 1857 0020 08BD     		pop	{r3, pc}
 1858              	.L194:
 1859 0022 00BF     		.align	2
 1860              	.L193:
 1861 0024 00440258 		.word	1476543488
 1862 0028 00000000 		.word	D1CorePrescTable
 1863              		.cfi_endproc
 1864              	.LFE144:
 1866              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1867              		.align	1
 1868              		.global	HAL_RCC_GetPCLK2Freq
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1872              		.fpu fpv5-d16
 1874              	HAL_RCC_GetPCLK2Freq:
 1875              	.LFB145:
1152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval PCLK1 frequency
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 1876              		.loc 1 1161 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880 0000 08B5     		push	{r3, lr}
 1881              	.LCFI12:
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 72


 1882              		.cfi_def_cfa_offset 8
 1883              		.cfi_offset 3, -8
 1884              		.cfi_offset 14, -4
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_V
 1885              		.loc 1 1163 0
 1886 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1887              	.LVL151:
 1888 0006 074B     		ldr	r3, .L197
 1889 0008 DB69     		ldr	r3, [r3, #28]
 1890 000a 03F4E063 		and	r3, r3, #1792
 1891              	.LVL152:
 1892              	.LBB56:
 1893              	.LBB57:
 1894              		.loc 2 857 0
 1895 000e 4FF48072 		mov	r2, #256
 1896              		.syntax unified
 1897              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1898 0012 92FAA2F2 		rbit r2, r2
 1899              	@ 0 "" 2
 1900              	.LVL153:
 1901              		.thumb
 1902              		.syntax unified
 1903              	.LBE57:
 1904              	.LBE56:
 1905              		.loc 1 1163 0
 1906 0016 B2FA82F2 		clz	r2, r2
 1907 001a D340     		lsrs	r3, r3, r2
 1908 001c 024A     		ldr	r2, .L197+4
 1909 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 1910              		.loc 1 1164 0
 1911 0020 D840     		lsrs	r0, r0, r3
 1912 0022 08BD     		pop	{r3, pc}
 1913              	.L198:
 1914              		.align	2
 1915              	.L197:
 1916 0024 00440258 		.word	1476543488
 1917 0028 00000000 		.word	D1CorePrescTable
 1918              		.cfi_endproc
 1919              	.LFE145:
 1921              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1922              		.align	1
 1923              		.global	HAL_RCC_GetOscConfig
 1924              		.syntax unified
 1925              		.thumb
 1926              		.thumb_func
 1927              		.fpu fpv5-d16
 1929              	HAL_RCC_GetOscConfig:
 1930              	.LFB146:
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * RCC configuration registers.
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
1170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * will be configured.
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval None
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 73


1172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 1931              		.loc 1 1174 0
 1932              		.cfi_startproc
 1933              		@ args = 0, pretend = 0, frame = 0
 1934              		@ frame_needed = 0, uses_anonymous_args = 0
 1935              		@ link register save eliminated.
 1936              	.LVL154:
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 1937              		.loc 1 1176 0
 1938 0000 3F23     		movs	r3, #63
 1939 0002 0360     		str	r3, [r0]
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                                       RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI| RCC_OSCILLAT
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1940              		.loc 1 1180 0
 1941 0004 634B     		ldr	r3, .L217
 1942 0006 1B68     		ldr	r3, [r3]
 1943 0008 13F4802F 		tst	r3, #262144
 1944 000c 00F09B80 		beq	.L200
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1945              		.loc 1 1182 0
 1946 0010 4FF4A023 		mov	r3, #327680
 1947 0014 4360     		str	r3, [r0, #4]
 1948              	.L201:
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
1191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****    /* Get the CSI configuration -----------------------------------------------*/
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_CSION) == RCC_CR_CSION)
 1949              		.loc 1 1194 0
 1950 0016 5F4B     		ldr	r3, .L217
 1951 0018 1B68     		ldr	r3, [r3]
 1952 001a 13F0800F 		tst	r3, #128
 1953 001e 00F09E80 		beq	.L203
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->CSIState = RCC_CSI_ON;
 1954              		.loc 1 1196 0
 1955 0022 8023     		movs	r3, #128
 1956 0024 C361     		str	r3, [r0, #28]
 1957              	.L204:
1197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 74


1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->CSICalibrationValue = (uint32_t)((RCC->ICSCR &RCC_ICSCR_CSITRIM) >> POSITION_V
 1958              		.loc 1 1203 0
 1959 0026 5B49     		ldr	r1, .L217
 1960 0028 4B68     		ldr	r3, [r1, #4]
 1961 002a 03F0F843 		and	r3, r3, #2080374784
 1962              	.LVL155:
 1963              	.LBB58:
 1964              	.LBB59:
 1965              		.loc 2 857 0
 1966 002e 4FF0F842 		mov	r2, #2080374784
 1967              		.syntax unified
 1968              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1969 0032 92FAA2F2 		rbit r2, r2
 1970              	@ 0 "" 2
 1971              	.LVL156:
 1972              		.thumb
 1973              		.syntax unified
 1974              	.LBE59:
 1975              	.LBE58:
 1976              		.loc 1 1203 0
 1977 0036 B2FA82F2 		clz	r2, r2
 1978 003a D340     		lsrs	r3, r3, r2
 1979 003c 0362     		str	r3, [r0, #32]
1204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1980              		.loc 1 1206 0
 1981 003e 0B68     		ldr	r3, [r1]
 1982 0040 13F0010F 		tst	r3, #1
 1983 0044 00F08E80 		beq	.L205
1207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1984              		.loc 1 1208 0
 1985 0048 0123     		movs	r3, #1
 1986 004a C360     		str	r3, [r0, #12]
 1987              	.L206:
1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR &RCC_ICSCR_HSITRIM) >> POSITION_V
 1988              		.loc 1 1215 0
 1989 004c 5149     		ldr	r1, .L217
 1990 004e 4B68     		ldr	r3, [r1, #4]
 1991 0050 03F47C33 		and	r3, r3, #258048
 1992              	.LVL157:
 1993              	.LBB60:
 1994              	.LBB61:
 1995              		.loc 2 857 0
 1996 0054 4FF47C32 		mov	r2, #258048
 1997              		.syntax unified
 1998              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1999 0058 92FAA2F2 		rbit r2, r2
 2000              	@ 0 "" 2
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 75


 2001              	.LVL158:
 2002              		.thumb
 2003              		.syntax unified
 2004              	.LBE61:
 2005              	.LBE60:
 2006              		.loc 1 1215 0
 2007 005c B2FA82F2 		clz	r2, r2
 2008 0060 D340     		lsrs	r3, r3, r2
 2009 0062 0361     		str	r3, [r0, #16]
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 2010              		.loc 1 1218 0
 2011 0064 0B6F     		ldr	r3, [r1, #112]
 2012 0066 13F0040F 		tst	r3, #4
 2013 006a 7ED0     		beq	.L207
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 2014              		.loc 1 1220 0
 2015 006c 0523     		movs	r3, #5
 2016 006e 8360     		str	r3, [r0, #8]
 2017              	.L208:
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 2018              		.loc 1 1232 0
 2019 0070 484B     		ldr	r3, .L217
 2020 0072 5B6F     		ldr	r3, [r3, #116]
 2021 0074 13F0010F 		tst	r3, #1
 2022 0078 00F08280 		beq	.L210
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 2023              		.loc 1 1234 0
 2024 007c 0123     		movs	r3, #1
 2025 007e 4361     		str	r3, [r0, #20]
 2026              	.L211:
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
1239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****  
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the HSI48 configuration ---------------------------------------------*/
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
 2027              		.loc 1 1242 0
 2028 0080 444B     		ldr	r3, .L217
 2029 0082 1B68     		ldr	r3, [r3]
 2030 0084 13F4805F 		tst	r3, #4096
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 76


 2031 0088 7DD0     		beq	.L212
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
 2032              		.loc 1 1244 0
 2033 008a 0123     		movs	r3, #1
 2034 008c 8361     		str	r3, [r0, #24]
 2035              	.L213:
1245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 2036              		.loc 1 1252 0
 2037 008e 414B     		ldr	r3, .L217
 2038 0090 1B68     		ldr	r3, [r3]
 2039 0092 13F0807F 		tst	r3, #16777216
 2040 0096 79D1     		bne	.L216
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
1255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   else
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 2041              		.loc 1 1258 0
 2042 0098 0123     		movs	r3, #1
 2043 009a 4362     		str	r3, [r0, #36]
 2044              	.L215:
1259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 2045              		.loc 1 1260 0
 2046 009c 3D4B     		ldr	r3, .L217
 2047 009e 9A6A     		ldr	r2, [r3, #40]
 2048 00a0 02F00302 		and	r2, r2, #3
 2049 00a4 8262     		str	r2, [r0, #40]
1261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> POSITION_VAL(RC
 2050              		.loc 1 1261 0
 2051 00a6 9A6A     		ldr	r2, [r3, #40]
 2052 00a8 02F47C72 		and	r2, r2, #1008
 2053              	.LVL159:
 2054              	.LBB62:
 2055              	.LBB63:
 2056              		.loc 2 857 0
 2057 00ac 4FF47C71 		mov	r1, #1008
 2058              		.syntax unified
 2059              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2060 00b0 91FAA1F1 		rbit r1, r1
 2061              	@ 0 "" 2
 2062              	.LVL160:
 2063              		.thumb
 2064              		.syntax unified
 2065              	.LBE63:
 2066              	.LBE62:
 2067              		.loc 1 1261 0
 2068 00b4 B1FA81F1 		clz	r1, r1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 77


 2069 00b8 CA40     		lsrs	r2, r2, r1
 2070 00ba C262     		str	r2, [r0, #44]
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> POSITION_VAL(RCC_PL
 2071              		.loc 1 1262 0
 2072 00bc 1A6B     		ldr	r2, [r3, #48]
 2073 00be C2F30802 		ubfx	r2, r2, #0, #9
 2074              	.LVL161:
 2075              	.LBB64:
 2076              	.LBB65:
 2077              		.loc 2 857 0
 2078 00c2 40F2FF11 		movw	r1, #511
 2079              		.syntax unified
 2080              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2081 00c6 91FAA1F1 		rbit r1, r1
 2082              	@ 0 "" 2
 2083              	.LVL162:
 2084              		.thumb
 2085              		.syntax unified
 2086              	.LBE65:
 2087              	.LBE64:
 2088              		.loc 1 1262 0
 2089 00ca B1FA81F1 		clz	r1, r1
 2090 00ce CA40     		lsrs	r2, r2, r1
 2091 00d0 0132     		adds	r2, r2, #1
 2092 00d2 0263     		str	r2, [r0, #48]
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> POSITION_VAL(RCC_PL
 2093              		.loc 1 1263 0
 2094 00d4 1A6B     		ldr	r2, [r3, #48]
 2095 00d6 02F0FE42 		and	r2, r2, #2130706432
 2096              	.LVL163:
 2097              	.LBB66:
 2098              	.LBB67:
 2099              		.loc 2 857 0
 2100 00da 4FF0FE41 		mov	r1, #2130706432
 2101              		.syntax unified
 2102              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2103 00de 91FAA1F1 		rbit r1, r1
 2104              	@ 0 "" 2
 2105              	.LVL164:
 2106              		.thumb
 2107              		.syntax unified
 2108              	.LBE67:
 2109              	.LBE66:
 2110              		.loc 1 1263 0
 2111 00e2 B1FA81F1 		clz	r1, r1
 2112 00e6 CA40     		lsrs	r2, r2, r1
 2113 00e8 0132     		adds	r2, r2, #1
 2114 00ea C263     		str	r2, [r0, #60]
1264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> POSITION_VAL(RCC_PL
 2115              		.loc 1 1264 0
 2116 00ec 1A6B     		ldr	r2, [r3, #48]
 2117 00ee 02F47E42 		and	r2, r2, #65024
 2118              	.LVL165:
 2119              	.LBB68:
 2120              	.LBB69:
 2121              		.loc 2 857 0
 2122 00f2 4FF47E41 		mov	r1, #65024
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 78


 2123              		.syntax unified
 2124              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2125 00f6 91FAA1F1 		rbit r1, r1
 2126              	@ 0 "" 2
 2127              	.LVL166:
 2128              		.thumb
 2129              		.syntax unified
 2130              	.LBE69:
 2131              	.LBE68:
 2132              		.loc 1 1264 0
 2133 00fa B1FA81F1 		clz	r1, r1
 2134 00fe CA40     		lsrs	r2, r2, r1
 2135 0100 0132     		adds	r2, r2, #1
 2136 0102 4263     		str	r2, [r0, #52]
1265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> POSITION_VAL(RCC_PL
 2137              		.loc 1 1265 0
 2138 0104 1A6B     		ldr	r2, [r3, #48]
 2139 0106 02F4FE02 		and	r2, r2, #8323072
 2140              	.LVL167:
 2141              	.LBB70:
 2142              	.LBB71:
 2143              		.loc 2 857 0
 2144 010a 4FF4FE01 		mov	r1, #8323072
 2145              		.syntax unified
 2146              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2147 010e 91FAA1F1 		rbit r1, r1
 2148              	@ 0 "" 2
 2149              	.LVL168:
 2150              		.thumb
 2151              		.syntax unified
 2152              	.LBE71:
 2153              	.LBE70:
 2154              		.loc 1 1265 0
 2155 0112 B1FA81F1 		clz	r1, r1
 2156 0116 CA40     		lsrs	r2, r2, r1
 2157 0118 0132     		adds	r2, r2, #1
 2158 011a 8263     		str	r2, [r0, #56]
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE) >> POSITION_VAL(R
 2159              		.loc 1 1266 0
 2160 011c DA6A     		ldr	r2, [r3, #44]
 2161 011e 02F00C02 		and	r2, r2, #12
 2162              	.LVL169:
 2163              	.LBB72:
 2164              	.LBB73:
 2165              		.loc 2 857 0
 2166 0122 0421     		movs	r1, #4
 2167              		.syntax unified
 2168              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2169 0124 91FAA1F1 		rbit r1, r1
 2170              	@ 0 "" 2
 2171              	.LVL170:
 2172              		.thumb
 2173              		.syntax unified
 2174              	.LBE73:
 2175              	.LBE72:
 2176              		.loc 1 1266 0
 2177 0128 B1FA81F1 		clz	r1, r1
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 79


 2178 012c CA40     		lsrs	r2, r2, r1
 2179 012e 0264     		str	r2, [r0, #64]
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> POSITION
 2180              		.loc 1 1267 0
 2181 0130 DB6A     		ldr	r3, [r3, #44]
 2182 0132 03F00203 		and	r3, r3, #2
 2183              	.LVL171:
 2184              	.LBB74:
 2185              	.LBB75:
 2186              		.loc 2 857 0
 2187 0136 0222     		movs	r2, #2
 2188              		.syntax unified
 2189              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2190 0138 92FAA2F2 		rbit r2, r2
 2191              	@ 0 "" 2
 2192              	.LVL172:
 2193              		.thumb
 2194              		.syntax unified
 2195              	.LBE75:
 2196              	.LBE74:
 2197              		.loc 1 1267 0
 2198 013c B2FA82F2 		clz	r2, r2
 2199 0140 D340     		lsrs	r3, r3, r2
 2200 0142 4364     		str	r3, [r0, #68]
1268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 2201              		.loc 1 1268 0
 2202 0144 7047     		bx	lr
 2203              	.L200:
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 2204              		.loc 1 1184 0
 2205 0146 134B     		ldr	r3, .L217
 2206 0148 1B68     		ldr	r3, [r3]
 2207 014a 13F4803F 		tst	r3, #65536
 2208 014e 03D0     		beq	.L202
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2209              		.loc 1 1186 0
 2210 0150 4FF48033 		mov	r3, #65536
 2211 0154 4360     		str	r3, [r0, #4]
 2212 0156 5EE7     		b	.L201
 2213              	.L202:
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2214              		.loc 1 1190 0
 2215 0158 0023     		movs	r3, #0
 2216 015a 4360     		str	r3, [r0, #4]
 2217 015c 5BE7     		b	.L201
 2218              	.L203:
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2219              		.loc 1 1200 0
 2220 015e 0023     		movs	r3, #0
 2221 0160 C361     		str	r3, [r0, #28]
 2222 0162 60E7     		b	.L204
 2223              	.L205:
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2224              		.loc 1 1212 0
 2225 0164 0023     		movs	r3, #0
 2226 0166 C360     		str	r3, [r0, #12]
 2227 0168 70E7     		b	.L206
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 80


 2228              	.L207:
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 2229              		.loc 1 1222 0
 2230 016a 0A4B     		ldr	r3, .L217
 2231 016c 1B6F     		ldr	r3, [r3, #112]
 2232 016e 13F0010F 		tst	r3, #1
 2233 0172 02D0     		beq	.L209
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2234              		.loc 1 1224 0
 2235 0174 0123     		movs	r3, #1
 2236 0176 8360     		str	r3, [r0, #8]
 2237 0178 7AE7     		b	.L208
 2238              	.L209:
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2239              		.loc 1 1228 0
 2240 017a 0023     		movs	r3, #0
 2241 017c 8360     		str	r3, [r0, #8]
 2242 017e 77E7     		b	.L208
 2243              	.L210:
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2244              		.loc 1 1238 0
 2245 0180 0023     		movs	r3, #0
 2246 0182 4361     		str	r3, [r0, #20]
 2247 0184 7CE7     		b	.L211
 2248              	.L212:
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2249              		.loc 1 1248 0
 2250 0186 0023     		movs	r3, #0
 2251 0188 8361     		str	r3, [r0, #24]
 2252 018a 80E7     		b	.L213
 2253              	.L216:
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2254              		.loc 1 1254 0
 2255 018c 0223     		movs	r3, #2
 2256 018e 4362     		str	r3, [r0, #36]
 2257 0190 84E7     		b	.L215
 2258              	.L218:
 2259 0192 00BF     		.align	2
 2260              	.L217:
 2261 0194 00440258 		.word	1476543488
 2262              		.cfi_endproc
 2263              	.LFE146:
 2265              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2266              		.align	1
 2267              		.global	HAL_RCC_GetClockConfig
 2268              		.syntax unified
 2269              		.thumb
 2270              		.thumb_func
 2271              		.fpu fpv5-d16
 2273              	HAL_RCC_GetClockConfig:
 2274              	.LFB147:
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * RCC configuration registers.
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_ClkInitTypeDef structure that
1274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * will be configured.
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 81


1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @param  pFLatency: Pointer on the Flash Latency.
1276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval None
1277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 2275              		.loc 1 1279 0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 0
 2278              		@ frame_needed = 0, uses_anonymous_args = 0
 2279              		@ link register save eliminated.
 2280              	.LVL173:
1280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 
 2281              		.loc 1 1281 0
 2282 0000 3F23     		movs	r3, #63
 2283 0002 0360     		str	r3, [r0]
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****                                  RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;
1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2284              		.loc 1 1285 0
 2285 0004 114B     		ldr	r3, .L220
 2286 0006 1A69     		ldr	r2, [r3, #16]
 2287 0008 02F00702 		and	r2, r2, #7
 2288 000c 4260     		str	r2, [r0, #4]
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the SYSCLK configuration ----------------------------------------------*/
1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 2289              		.loc 1 1288 0
 2290 000e 9A69     		ldr	r2, [r3, #24]
 2291 0010 02F47062 		and	r2, r2, #3840
 2292 0014 8260     		str	r2, [r0, #8]
1289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the D1HCLK configuration ----------------------------------------------*/
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 2293              		.loc 1 1291 0
 2294 0016 9A69     		ldr	r2, [r3, #24]
 2295 0018 02F00F02 		and	r2, r2, #15
 2296 001c C260     		str	r2, [r0, #12]
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the APB3 configuration ----------------------------------------------*/
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 2297              		.loc 1 1294 0
 2298 001e 9A69     		ldr	r2, [r3, #24]
 2299 0020 02F07002 		and	r2, r2, #112
 2300 0024 0261     		str	r2, [r0, #16]
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 2301              		.loc 1 1297 0
 2302 0026 DA69     		ldr	r2, [r3, #28]
 2303 0028 02F07002 		and	r2, r2, #112
 2304 002c 4261     		str	r2, [r0, #20]
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 2305              		.loc 1 1300 0
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 82


 2306 002e DA69     		ldr	r2, [r3, #28]
 2307 0030 02F4E062 		and	r2, r2, #1792
 2308 0034 8261     		str	r2, [r0, #24]
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the APB4 configuration ----------------------------------------------*/
1303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 2309              		.loc 1 1303 0
 2310 0036 1B6A     		ldr	r3, [r3, #32]
 2311 0038 03F07003 		and	r3, r3, #112
 2312 003c C361     		str	r3, [r0, #28]
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 2313              		.loc 1 1307 0
 2314 003e 044B     		ldr	r3, .L220+4
 2315 0040 1B68     		ldr	r3, [r3]
 2316 0042 03F00703 		and	r3, r3, #7
 2317 0046 0B60     		str	r3, [r1]
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 2318              		.loc 1 1308 0
 2319 0048 7047     		bx	lr
 2320              	.L221:
 2321 004a 00BF     		.align	2
 2322              	.L220:
 2323 004c 00440258 		.word	1476543488
 2324 0050 00200052 		.word	1375739904
 2325              		.cfi_endproc
 2326              	.LFE147:
 2328              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2329              		.align	1
 2330              		.weak	HAL_RCC_CSSCallback
 2331              		.syntax unified
 2332              		.thumb
 2333              		.thumb_func
 2334              		.fpu fpv5-d16
 2336              	HAL_RCC_CSSCallback:
 2337              	.LFB149:
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval None
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
1319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     HAL_RCC_CCSCallback();
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
1327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 83


1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** /**
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   * @retval none
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   */
1332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** __weak void HAL_RCC_CCSCallback(void)
1333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** {
 2338              		.loc 1 1333 0
 2339              		.cfi_startproc
 2340              		@ args = 0, pretend = 0, frame = 0
 2341              		@ frame_needed = 0, uses_anonymous_args = 0
 2342              		@ link register save eliminated.
1334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****             the HAL_RCC_CCSCallback could be implemented in the user file
1336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****    */
1337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** }
 2343              		.loc 1 1337 0
 2344 0000 7047     		bx	lr
 2345              		.cfi_endproc
 2346              	.LFE149:
 2348              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2349              		.align	1
 2350              		.global	HAL_RCC_NMI_IRQHandler
 2351              		.syntax unified
 2352              		.thumb
 2353              		.thumb_func
 2354              		.fpu fpv5-d16
 2356              	HAL_RCC_NMI_IRQHandler:
 2357              	.LFB148:
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 2358              		.loc 1 1316 0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 0
 2361              		@ frame_needed = 0, uses_anonymous_args = 0
 2362 0000 08B5     		push	{r3, lr}
 2363              	.LCFI13:
 2364              		.cfi_def_cfa_offset 8
 2365              		.cfi_offset 3, -8
 2366              		.cfi_offset 14, -4
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   {
 2367              		.loc 1 1318 0
 2368 0002 064B     		ldr	r3, .L227
 2369 0004 5B6E     		ldr	r3, [r3, #100]
 2370 0006 13F4806F 		tst	r3, #1024
 2371 000a 00D1     		bne	.L226
 2372              	.L223:
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 2373              		.loc 1 1326 0
 2374 000c 08BD     		pop	{r3, pc}
 2375              	.L226:
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 2376              		.loc 1 1321 0
 2377 000e FFF7FEFF 		bl	HAL_RCC_CSSCallback
 2378              	.LVL174:
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c ****   }
 2379              		.loc 1 1324 0
 2380 0012 024B     		ldr	r3, .L227
 2381 0014 4FF48062 		mov	r2, #1024
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 84


 2382 0018 9A66     		str	r2, [r3, #104]
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c **** 
 2383              		.loc 1 1326 0
 2384 001a F7E7     		b	.L223
 2385              	.L228:
 2386              		.align	2
 2387              	.L227:
 2388 001c 00440258 		.word	1476543488
 2389              		.cfi_endproc
 2390              	.LFE148:
 2392              		.text
 2393              	.Letext0:
 2394              		.file 3 "c:\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 2395              		.file 4 "c:\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 2396              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 2397              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2398              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 2399              		.file 8 "c:\\gcc\\arm-none-eabi\\include\\sys\\lock.h"
 2400              		.file 9 "c:\\gcc\\arm-none-eabi\\include\\sys\\_types.h"
 2401              		.file 10 "c:\\gcc\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\stddef.h"
 2402              		.file 11 "c:\\gcc\\arm-none-eabi\\include\\sys\\reent.h"
 2403              		.file 12 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 2404              		.file 13 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2405              		.file 14 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
 2406              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
 2407              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 2408              		.file 17 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
 2409              		.file 18 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s 			page 85


DEFINED SYMBOLS
                            *ABS*:00000000 stm32h7xx_hal_rcc.c
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:17     .text.HAL_RCC_DeInit:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:24     .text.HAL_RCC_DeInit:00000000 HAL_RCC_DeInit
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:78     .text.HAL_RCC_DeInit:00000038 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:84     .text.HAL_RCC_OscConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:91     .text.HAL_RCC_OscConfig:00000000 HAL_RCC_OscConfig
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:562    .text.HAL_RCC_OscConfig:000002c0 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:566    .text.HAL_RCC_OscConfig:000002c4 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1008   .text.HAL_RCC_OscConfig:00000578 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1016   .text.HAL_RCC_MCOConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1023   .text.HAL_RCC_MCOConfig:00000000 HAL_RCC_MCOConfig
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1138   .text.HAL_RCC_MCOConfig:00000098 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1145   .text.HAL_RCC_EnableCSS:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1152   .text.HAL_RCC_EnableCSS:00000000 HAL_RCC_EnableCSS
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1169   .text.HAL_RCC_EnableCSS:0000000c $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1174   .text.HAL_RCC_GetSysClockFreq:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1181   .text.HAL_RCC_GetSysClockFreq:00000000 HAL_RCC_GetSysClockFreq
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1410   .text.HAL_RCC_GetSysClockFreq:000001b8 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1419   .text.HAL_RCC_ClockConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1426   .text.HAL_RCC_ClockConfig:00000000 HAL_RCC_ClockConfig
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1746   .text.HAL_RCC_ClockConfig:000001e0 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1754   .text.HAL_RCC_GetHCLKFreq:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1761   .text.HAL_RCC_GetHCLKFreq:00000000 HAL_RCC_GetHCLKFreq
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1805   .text.HAL_RCC_GetHCLKFreq:00000028 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1812   .text.HAL_RCC_GetPCLK1Freq:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1819   .text.HAL_RCC_GetPCLK1Freq:00000000 HAL_RCC_GetPCLK1Freq
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1861   .text.HAL_RCC_GetPCLK1Freq:00000024 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1867   .text.HAL_RCC_GetPCLK2Freq:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1874   .text.HAL_RCC_GetPCLK2Freq:00000000 HAL_RCC_GetPCLK2Freq
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1916   .text.HAL_RCC_GetPCLK2Freq:00000024 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1922   .text.HAL_RCC_GetOscConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:1929   .text.HAL_RCC_GetOscConfig:00000000 HAL_RCC_GetOscConfig
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2261   .text.HAL_RCC_GetOscConfig:00000194 $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2266   .text.HAL_RCC_GetClockConfig:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2273   .text.HAL_RCC_GetClockConfig:00000000 HAL_RCC_GetClockConfig
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2323   .text.HAL_RCC_GetClockConfig:0000004c $d
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2329   .text.HAL_RCC_CSSCallback:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2336   .text.HAL_RCC_CSSCallback:00000000 HAL_RCC_CSSCallback
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2349   .text.HAL_RCC_NMI_IRQHandler:00000000 $t
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2356   .text.HAL_RCC_NMI_IRQHandler:00000000 HAL_RCC_NMI_IRQHandler
C:\Users\qqffx\AppData\Local\Temp\ccid92BI.s:2388   .text.HAL_RCC_NMI_IRQHandler:0000001c $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_GPIO_Init
HAL_InitTick
D1CorePrescTable
SystemCoreClock
HAL_RCCEx_GetD1SysClockFreq
SystemD2Clock
